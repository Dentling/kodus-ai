name: CI/CD Workflow Prod

on:
    release:
        types:
            - published

jobs:
    build_and_push_image:
        name: Build and push image
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.1

            - name: Capture release version
              run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

              # see: https://github.com/aws-actions/configure-aws-credentials
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4.0.1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2.0.1

            - name: Build, tag, and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: kodus-orchestrator-prod
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build --build-arg RELEASE_VERSION=${{ env.RELEASE_VERSION }} -f DockerFiles/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            - name: Log out of Amazon ECR
              if: always()
              run: docker logout ${{ steps.login-ecr.outputs.registry }}

    deploy_in_server:
        name: Deploy in server
        runs-on: ubuntu-latest
        needs: build_and_push_image

        steps:
            - name: Get runner IP
              run: |
                  ip=$(curl -s https://ipinfo.io/ip)
                  echo "::add-mask::$ip"
                  echo "runner_ip=$ip" >> $GITHUB_ENV

            - name: Add Github Actions IP to Security group as a Postgres inbound rule
              run: |
                  aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ env.runner_ip }}/32 > /dev/null 2>&1
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

            - name: Execute start-app.sh on EC2
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ secrets.AWS_PROD_HOST }}
                  username: ${{ secrets.AWS_PROD_USERNAME }}
                  key: ${{ secrets.AWS_PROD_KEY_SSH }}
                  script: |
                      cd ~/kodus-orchestrator
                      ./start-app.sh prod ${{ github.sha }} ${{ github.ref }}

            - name: Remove Github Actions IP from security group
              run: |
                  aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ env.runner_ip }}/32 > /dev/null 2>&1
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
              if: always()

            - name: Actions for Discord
              uses: sarisia/actions-status-discord@v1.13.0
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  status: ${{ job.status }}
                  content: ":clap: Build successful!"
                  title: "Deploy Prod: kodus-orchestrator"
                  username: GitHub Actions
