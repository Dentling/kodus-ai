{
  "PHP": [
    {
      "uuid": "679bb43b-164b-43f9-9624-4171eea761cb",
      "title": "Use Prepared (Parameterized) SQL Queries",
      "rule": "Do not build SQL queries by directly concatenating untrusted data. Instead, use prepared statements with parameters (for example, using PDO or MySQLi) to prevent SQL Injection.",
      "why_is_this_important": "Concatenating user input into SQL queries can allow an attacker to inject malicious commands into the database. Prepared statements ensure that data is treated as parameters, preventing unexpected SQL code execution.",
      "severity": "High",
      "bad_example": "<?php\n$nome = $_GET['nome'];\n$query = \"SELECT * FROM usuarios WHERE nome = '$nome'\";\n$result = mysqli_query($conn, $query);\n?>",
      "good_example": "<?php\n$nome = $_GET['nome'];\n$stmt = $pdo->prepare(\"SELECT * FROM usuarios WHERE nome = :nome\");\n$stmt->execute(['nome' => $nome]);\n$usuarios = $stmt->fetchAll();\n?>",
      "tags": "security, reliability",
      "examples": [
        {
          "snippet": "<?php\n$nome = $_GET['nome'];\n$query = \"SELECT * FROM usuarios WHERE nome = '$nome'\";\n$result = mysqli_query($conn, $query);\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$nome = $_GET['nome'];\n$stmt = $pdo->prepare(\"SELECT * FROM usuarios WHERE nome = :nome\");\n$stmt->execute(['nome' => $nome]);\n$usuarios = $stmt->fetchAll();\n?>",
          "isCorrect": true
        }
      ]
    }
  ]
} 