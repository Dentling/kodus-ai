{
    "JSTS": [
        {
            "uuid": "55a0284b-eb7f-40ae-8b8c-db3dc66e8e0a",
            "title": "Avoid equality operators in loop termination conditions",
            "rule": "Check if loops use equality operators (== or !=) in termination conditions. These can lead to infinite loops if the condition is never met exactly. Instead, use relational operators like < or > for safer loop termination.",
            "why_is_this_important": "Using equality operators (== or !=) in loop termination conditions can accidentally cause infinite loops if the condition is never met exactly. Relational operators like < or > are safer and reduce the risk of unintended infinite loops.",
            "severity": "Critical",
            "bad_example": "for (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
            "good_example": "for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
            "tags": "cwe, maintainability, security",
            "examples": [
                {
                    "snippet": "for (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "68c567f6-0b2c-4796-aef0-cfc6a939cb1c",
            "title": "Avoid using the comma operator",
            "rule": "Detect occurrences of the comma operator in expressions. The comma operator can make code harder to read and debug, as it executes two expressions but only returns the last one. Suggest alternative structures for better readability.",
            "why_is_this_important": "The comma operator executes two expressions and returns the result of the second one, which can make the code confusing and harder to debug. It reduces readability and reliability, and the same outcome can be achieved with clearer alternatives.",
            "severity": "High",
            "bad_example": "i = a += 2, a + b;  // Noncompliant: What's the value of i ?",
            "good_example": "a += 2;\ni = a + b; // We probably expected to assign the result of the addition to i, although the previous code wasn't doing it.",
            "tags": "maintainability",
            "examples": [
                {
                    "snippet": "i = a += 2, a + b;  // Noncompliant: What's the value of i ?",
                    "isCorrect": false
                },
                {
                    "snippet": "a += 2;\ni = a + b; // We probably expected to assign the result of the addition to i, although the previous code wasn't doing it.",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "95ab7c18-c733-4401-9dd3-90893f9723eb",
            "title": "A module should not import itself",
            "rule": "Identify cases where a module imports itself. Self-imports are usually unintentional and can cause confusion or unnecessary dependencies. Suggest removing them.",
            "why_is_this_important": "When a module imports itself, the import statement serves no purpose and may indicate a mistake during refactoring. Removing self-imports improves code clarity and avoids confusion.",
            "severity": "High",
            "bad_example": "// file: foo.js\nimport foo from './foo'; // Noncompliant\n\nconst foo = require('./foo'); // Noncompliant\n",
            "good_example": "// file: index.js\nimport index from '.'; // Noncompliant\n\nconst index = require('.'); // Noncompliant",
            "tags": "maintainability, reliability",
            "examples": [
                {
                    "snippet": "// file: foo.js\nimport foo from './foo'; // Noncompliant\n\nconst foo = require('./foo'); // Noncompliant\n",
                    "isCorrect": false
                },
                {
                    "snippet": "// file: index.js\nimport index from '.'; // Noncompliant\n\nconst index = require('.'); // Noncompliant",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "2502eb35-99bc-43bd-978f-2967d4d6c2fb",
            "title": "Avoid asynchronous operations in constructors",
            "rule": "Ensure that constructors do not include asynchronous operations. Constructors should initialize class instances synchronously. If async logic is required, suggest moving it to a separate initialization method.",
            "why_is_this_important": "Constructors are meant to initialize class instances synchronously. Including asynchronous operations can result in partially initialized objects and unexpected behavior. Use an explicit initialization method instead.",
            "severity": "High",
            "bad_example": "class MyClass {\n  constructor() {\n    Promise.resolve().then(() => this.data = fetchData()); // Noncompliant, this.data will be undefined in the new instance\n  }\n}",
            "good_example": "class MyClass {\n  constructor() {\n    this.data = null;\n  }\n\n  async initialize() {\n    this.data = await fetchData();\n  }\n}\n\n(async () => {\n  const myObject = new MyClass();\n  await myObject.initialize();\n})();",
            "tags": "maintainability, reliability",
            "examples": [
                {
                    "snippet": "class MyClass {\n  constructor() {\n    Promise.resolve().then(() => this.data = fetchData()); // Noncompliant, this.data will be undefined in the new instance\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "class MyClass {\n  constructor() {\n    this.data = null;\n  }\n\n  async initialize() {\n    this.data = await fetchData();\n  }\n}\n\n(async () => {\n  const myObject = new MyClass();\n  await myObject.initialize();\n})();",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4f700025-144e-4534-a0e4-bca56ba9897b",
            "title": "Do not export mutable variables",
            "rule": "Check if modules export mutable variables. Mutable exports can be modified by other modules, leading to unpredictable behavior. Recommend exporting immutable values instead.",
            "why_is_this_important": "Exporting mutable variables allows other modules to modify their values, making it difficult to track changes and leading to potential bugs. Use immutable exports to ensure predictable behavior.",
            "severity": "High",
            "bad_example": "let mutableVar = \"initial value\";\n\nexport { mutableVar }; // Noncompliant",
            "good_example": "const immutableVar = \"constant value\";\nexport { immutableVar };",
            "tags": "maintainability, reliability",
            "examples": [
                {
                    "snippet": "let mutableVar = \"initial value\";\n\nexport { mutableVar }; // Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "const immutableVar = \"constant value\";\nexport { immutableVar };",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "5e88a926-fa04-4c8b-b903-6a4cbf71f3db",
            "title": "Ensure heading elements have meaningful content",
            "rule": "Verify that heading elements contain meaningful content. Headings are used for structure and navigation, so empty or generic headings negatively impact accessibility and usability.",
            "why_is_this_important": "Heading elements are used for navigation and structure. Empty or meaningless headings confuse assistive technologies and negatively impact accessibility for screen reader users.",
            "severity": "High",
            "bad_example": "function JavaScript101() {\n  return (\n    <>\n      <h1>JavaScript Programming Guide</h1>\n      <p>An introduction to JavaScript programming and its applications.</p>\n\n      <h2>JavaScript Basics</h2>\n      <p>Understanding the basic concepts in JavaScript programming.</p>\n\n      <h3>Variables</h3>\n      <p>Explanation of what variables are and how to declare them in JavaScript.</p>\n\n      <h3 aria-hidden>Data Types</h3> // Noncompliant\n      <p>Overview of the different data types in JavaScript.</p>\n\n      <h3 /> // Noncompliant\n      <p>Understanding how to declare and use functions in JavaScript.</p>\n    </>\n  );\n}",
            "good_example": "function JavaScript101() {\n  return (\n    <>\n      <h1>JavaScript Programming Guide</h1>\n      <p>An introduction to JavaScript programming and its applications.</p>\n\n      <h2>JavaScript Basics</h2>\n      <p>Understanding the basic concepts in JavaScript programming.</p>\n\n      <h3>Variables</h3>\n      <p>Explanation of what variables are and how to declare them in JavaScript.</p>\n\n      <h3>Data Types</h3>\n      <p>Overview of the different data types in JavaScript.</p>\n\n      <h3>Functions</h3>\n      <p>Understanding how to declare and use functions in JavaScript.</p>\n    </>\n  );\n}",
            "tags": "maintainability, reliability, accessibility",
            "examples": [
                {
                    "snippet": "function JavaScript101() {\n  return (\n    <>\n      <h1>JavaScript Programming Guide</h1>\n      <p>An introduction to JavaScript programming and its applications.</p>\n\n      <h2>JavaScript Basics</h2>\n      <p>Understanding the basic concepts in JavaScript programming.</p>\n\n      <h3>Variables</h3>\n      <p>Explanation of what variables are and how to declare them in JavaScript.</p>\n\n      <h3 aria-hidden>Data Types</h3> // Noncompliant\n      <p>Overview of the different data types in JavaScript.</p>\n\n      <h3 /> // Noncompliant\n      <p>Understanding how to declare and use functions in JavaScript.</p>\n    </>\n  );\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function JavaScript101() {\n  return (\n    <>\n      <h1>JavaScript Programming Guide</h1>\n      <p>An introduction to JavaScript programming and its applications.</p>\n\n      <h2>JavaScript Basics</h2>\n      <p>Understanding the basic concepts in JavaScript programming.</p>\n\n      <h3>Variables</h3>\n      <p>Explanation of what variables are and how to declare them in JavaScript.</p>\n\n      <h3>Data Types</h3>\n      <p>Overview of the different data types in JavaScript.</p>\n\n      <h3>Functions</h3>\n      <p>Understanding how to declare and use functions in JavaScript.</p>\n    </>\n  );\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3a7b4041-0fe6-4905-ac07-04b691a11dce",
            "title": "Avoid using anchor tags as buttons",
            "rule": "Detect cases where <a> elements are used as buttons. Anchor tags should be used for navigation, while actions should be assigned to <button> elements to maintain accessibility and expected behavior.",
            "why_is_this_important": "Anchor tags (<a>) are intended for navigation, not actions. Using them as buttons can cause accessibility issues and unexpected behavior. Use <button> for actions to ensure proper functionality and accessibility.",
            "severity": "High",
            "bad_example": "const MyComponent = () => {\n    return <>\n        <a href=\"javascript:void(0)\" onClick={foo}>Perform action</a>\n        <a href=\"#\" onClick={foo}>Perform action</a>\n        <a onClick={foo}>Perform action</a>\n    </>;\n};",
            "good_example": "const MyComponent = () => {\n    return <>\n      <button onClick={foo}>Perform action</button>\n      <a href=\"#section\" onClick={foo}>Perform action</a>\n    </>;\n};",
            "tags": "maintainability, reliability, accessibility",
            "examples": [
                {
                    "snippet": "const MyComponent = () => {\n    return <>\n        <a href=\"javascript:void(0)\" onClick={foo}>Perform action</a>\n        <a href=\"#\" onClick={foo}>Perform action</a>\n        <a onClick={foo}>Perform action</a>\n    </>;\n};",
                    "isCorrect": false
                },
                {
                    "snippet": "const MyComponent = () => {\n    return <>\n      <button onClick={foo}>Perform action</button>\n      <a href=\"#section\" onClick={foo}>Perform action</a>\n    </>;\n};",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "da87d51a-955f-4322-bd25-4f7bd2a5cef2",
            "title": "Avoid building system commands from user input",
            "rule": "Check for occurrences where user input is directly used to construct system commands. This introduces a risk of command injection. Suggest using parameterized queries or safe wrappers instead.",
            "why_is_this_important": "Using user input to construct system commands can lead to security vulnerabilities, such as command injection. Always validate and sanitize inputs or avoid using them in system commands",
            "severity": "High",
            "bad_example": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nconst proc = spawn(\"/usr/bin/find\", [input]); // Sensitive",
            "good_example": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nif (allowed.includes(input)) {\n  const proc = spawn(\"/usr/bin/find\", [input]);\n}",
            "tags": "security, cwe, owasp",
            "examples": [
                {
                    "snippet": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nconst proc = spawn(\"/usr/bin/find\", [input]); // Sensitive",
                    "isCorrect": false
                },
                {
                    "snippet": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nif (allowed.includes(input)) {\n  const proc = spawn(\"/usr/bin/find\", [input]);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8d456f43-5f12-4dbc-b8ea-aa62f0f776a7",
            "title": "Prevent open redirect vulnerabilities in DOM updates",
            "rule": "Ensure that URLs used in redirection are properly validated and restricted to trusted domains. Open redirects can be exploited to redirect users to malicious sites.",
            "why_is_this_important": "Open redirects allow attackers to manipulate URLs and redirect users to malicious sites. Always validate and restrict redirection URLs to trusted domains.",
            "severity": "Critical",
            "bad_example": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\ndocument.location = redirectUrl; // Noncompliant\n",
            "good_example": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\n\nif (redirectUrl.startsWith(\"https://www.example.com/\")) {\n    document.location = redirectUrl;\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\ndocument.location = redirectUrl; // Noncompliant\n",
                    "isCorrect": false
                },
                {
                    "snippet": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\n\nif (redirectUrl.startsWith(\"https://www.example.com/\")) {\n    document.location = redirectUrl;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "163e2ccb-7186-4f88-8e0b-d4102aa26cc4",
            "title": "Avoid unprotected HTTP request redirections",
            "rule": "Check if HTTP request redirections are unvalidated. Allowing arbitrary redirections can expose users to phishing attacks. Recommend validating and restricting URLs.",
            "why_is_this_important": "Allowing unvalidated redirection URLs in HTTP responses can expose users to phishing attacks. Always validate redirection URLs and restrict them to trusted domains.",
            "severity": "Critical",
            "bad_example": "server.get('/redirect', (request, response) => {\n\n   response.redirect(request.query.url); // Noncompliant\n});",
            "good_example": "server.get('/redirect', (request, response) => {\n\n   if (request.query.url.startsWith(\"https://www.example.com/\")) {\n      response.redirect(request.query.url);\n   }\n});",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "server.get('/redirect', (request, response) => {\n\n   response.redirect(request.query.url); // Noncompliant\n});",
                    "isCorrect": false
                },
                {
                    "snippet": "server.get('/redirect', (request, response) => {\n\n   if (request.query.url.startsWith(\"https://www.example.com/\")) {\n      response.redirect(request.query.url);\n   }\n});",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d404681d-2afc-48dc-97eb-29ea36b23ef1",
            "title": "Server-side requests should not be vulnerable to forgery attacks",
            "rule": "Identify server-side requests that do not validate input sources. SSRF vulnerabilities allow attackers to make unauthorized requests on behalf of the server. Restrict and validate request sources.",
            "why_is_this_important": "Server-Side Request Forgery (SSRF) vulnerabilities allow attackers to coerce a server into making arbitrary requests. This can lead to unauthorized access or data leakage. Properly validate and restrict URLs used in server-side requests.",
            "severity": "Critical",
            "bad_example": "const axios = require('axios');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/example', async (req, res) => {\n    try {\n        await axios.get(req.query.url); // Noncompliant\n        res.send(\"OK\");\n    } catch (err) {\n        console.error(err);\n        res.send(\"ERROR\");\n    }\n})",
            "good_example": "const axios = require('axios');\nconst express = require('express');\n\nconst schemesList = [\"http:\", \"https:\"];\nconst domainsList = [\"trusted1.example.com\", \"trusted2.example.com\"];\n\napp.get('/example', async (req, res) => {\n    const url = (new URL(req.query.url));\n\n    if (schemesList.includes(url.protocol) && domainsList.includes(url.hosttitle)) {\n        try {\n            await axios.get(url);\n            res.send(\"OK\");\n        } catch (err) {\n            console.error(err);\n            res.send(\"ERROR\");\n        }\n    }else {\n        res.send(\"INVALID_URL\");\n    }\n})",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "const axios = require('axios');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/example', async (req, res) => {\n    try {\n        await axios.get(req.query.url); // Noncompliant\n        res.send(\"OK\");\n    } catch (err) {\n        console.error(err);\n        res.send(\"ERROR\");\n    }\n})",
                    "isCorrect": false
                },
                {
                    "snippet": "const axios = require('axios');\nconst express = require('express');\n\nconst schemesList = [\"http:\", \"https:\"];\nconst domainsList = [\"trusted1.example.com\", \"trusted2.example.com\"];\n\napp.get('/example', async (req, res) => {\n    const url = (new URL(req.query.url));\n\n    if (schemesList.includes(url.protocol) && domainsList.includes(url.hosttitle)) {\n        try {\n            await axios.get(url);\n            res.send(\"OK\");\n        } catch (err) {\n            console.error(err);\n            res.send(\"ERROR\");\n        }\n    }else {\n        res.send(\"INVALID_URL\");\n    }\n})",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "da8f1ddb-f433-4e66-94bb-224339e8e02b",
            "title": "Use appropriate tabIndex values",
            "rule": "Ensure tabIndex values are either 0 or -1. Positive tabIndex values disrupt the natural tab order and can create accessibility issues.",
            "why_is_this_important": "Using positive tabIndex values disrupts the natural tab order, confusing users who rely on keyboard navigation or assistive technologies. Stick to tabIndex values of 0 or -1 for predictable and accessible navigation.",
            "severity": "High",
            "bad_example": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"5\">foo</span> // Noncompliant\n            <span tabIndex=\"3\">bar</span> // Noncompliant\n            <span tabIndex=\"1\">baz</span> // Noncompliant\n            <span tabIndex=\"2\">qux</span> // Noncompliant\n        </div>\n    );\n}",
            "good_example": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"0\">foo</span>\n            <span tabIndex=\"-1\">bar</span>\n            <span tabIndex={0}>baz</span>\n            <span>qux</span>\n        </div>\n    );\n}",
            "tags": "maintainability, accessibility, reliability",
            "examples": [
                {
                    "snippet": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"5\">foo</span> // Noncompliant\n            <span tabIndex=\"3\">bar</span> // Noncompliant\n            <span tabIndex=\"1\">baz</span> // Noncompliant\n            <span tabIndex=\"2\">qux</span> // Noncompliant\n        </div>\n    );\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"0\">foo</span>\n            <span tabIndex=\"-1\">bar</span>\n            <span tabIndex={0}>baz</span>\n            <span>qux</span>\n        </div>\n    );\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "9677039b-81e4-4dea-9cb1-d75f93e6ef51",
            "title": "React children should not be passed as props",
            "rule": "Check if React children are passed as regular props instead of being nested inside components. Passing them incorrectly can cause conflicts and reduce clarity.",
            "why_is_this_important": "Passing React children through the children prop instead of nesting them can lead to conflicts and errors, especially if both approaches are used simultaneously. Always pass children as nested components for clarity.",
            "severity": "High",
            "bad_example": "<div children='Children' />\n<Foo children={<Bar />} />\n\nReact.createElement(\"div\", { children: 'Children' })",
            "good_example": "<div>Children</div>\n<Foo><Bar /></Foo>\n\nReact.createElement(\"div\", {}, 'Children');",
            "tags": "maintainability, reliability, react",
            "examples": [
                {
                    "snippet": "<div children='Children' />\n<Foo children={<Bar />} />\n\nReact.createElement(\"div\", { children: 'Children' })",
                    "isCorrect": false
                },
                {
                    "snippet": "<div>Children</div>\n<Foo><Bar /></Foo>\n\nReact.createElement(\"div\", {}, 'Children');",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6d2484fd-3844-464b-a20e-ac04b06d874c",
            "title": "Simplify else blocks with single if statements",
            "rule": "Detect unnecessary nesting where an if statement is the only statement inside an else block. Recommend using else-if instead for improved readability.",
            "why_is_this_important": "Using if statements as the only statement in an else block adds unnecessary nesting and reduces code readability. Replace them with else-if to make the logic clearer and easier to follow.",
            "severity": "Medium",
            "bad_example": "if (condition1) {\n    // ...\n} else {\n    if (condition2) {  // Noncompliant: 'if' statement is the only statement in the 'else' block\n        // ...\n    }\n}\n\n\nif (condition3) {\n    // ...\n} else {\n    if (condition4) { // Noncompliant: 'if' statement is the only statement in the 'else' block\n        // ...\n    } else {\n        // ...\n    }\n}",
            "good_example": "if (condition1) {\n    // ...\n} else if (condition2) {\n    // ...\n}\n\n\nif (condition3) {\n    // ...\n} else if (condition4) {\n    // ...\n} else {\n    // ...\n}",
            "tags": "maintainability",
            "examples": [
                {
                    "snippet": "if (condition1) {\n    // ...\n} else {\n    if (condition2) {  // Noncompliant: 'if' statement is the only statement in the 'else' block\n        // ...\n    }\n}\n\n\nif (condition3) {\n    // ...\n} else {\n    if (condition4) { // Noncompliant: 'if' statement is the only statement in the 'else' block\n        // ...\n    } else {\n        // ...\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "if (condition1) {\n    // ...\n} else if (condition2) {\n    // ...\n}\n\n\nif (condition3) {\n    // ...\n} else if (condition4) {\n    // ...\n} else {\n    // ...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "0a8c4825-fa07-47a3-890a-200b5ec9c858",
            "title": "Do not reassign imported variables",
            "rule": "Ensure that imported variables are not reassigned. This can cause runtime errors, especially in TypeScript. Modify object properties instead of reassigning variables.",
            "why_is_this_important": "Reassigning imported variables causes runtime errors and is prohibited in TypeScript. Modify properties on the imported object instead of reassigning the variable itself.",
            "severity": "Medium",
            "bad_example": "import { exportedObject } from 'module.js';\nexportedObject = 'hello world!';   // Noncompliant: TypeError: Assignment to constant variable.",
            "good_example": "import { exportedObject } from 'module.js';\nexportedObject.newAttribute = 'hello world!'; // exportedObject now contains newAttribute and can be seen from all other modules importing it\n",
            "tags": "maintainability",
            "examples": [
                {
                    "snippet": "import { exportedObject } from 'module.js';\nexportedObject = 'hello world!';   // Noncompliant: TypeError: Assignment to constant variable.",
                    "isCorrect": false
                },
                {
                    "snippet": "import { exportedObject } from 'module.js';\nexportedObject.newAttribute = 'hello world!'; // exportedObject now contains newAttribute and can be seen from all other modules importing it\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "2092d7f6-b302-4177-9547-7253b05ff842",
            "title": "Ensure React list keys are stable between renders",
            "rule": "Check if React list keys are stable and unique. Using dynamic values like Math.random() or Date.now() can cause rendering issues. Recommend using unique IDs.",
            "why_is_this_important": "To optimize the rendering of React list components, a unique identifier (UID) is required in the key attribute for each list item. This UID lets React identify the item throughout its lifetime. Using generated values like Math.random() or Date.now() is discouraged as their return value will differ between calls, causing the keys to not match up between renders, recreating the DOM. Also, this may cause bugs if values collide.",
            "severity": "High",
            "bad_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={Math.random()}> <!-- Noncompliant: Since the 'key' will be different on each render, React will update the DOM unnecessarily -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
            "good_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
            "tags": "maintainability, react",
            "examples": [
                {
                    "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={Math.random()}> <!-- Noncompliant: Since the 'key' will be different on each render, React will update the DOM unnecessarily -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6b52afb6-742f-4d2c-8eb9-e69df67634ac",
            "title": "React Context values should have stable identities",
            "rule": "Identify cases where React Context values are being reassigned dynamically. Unstable context values trigger unnecessary re-renders. Use memoization to stabilize them.",
            "why_is_this_important": "Passing dynamic values (like object literals) directly to React Context causes unnecessary re-renders and performance issues. Use memoization to ensure values remain stable.",
            "severity": "High",
            "bad_example": "function Component() {\n  return (\n    <SomeContext.Provider value={{foo: 'bar'}}> { /* Noncompliant: value is an object literal */ }\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}",
            "good_example": "function Component() {\n  const obj = useMemo(() => ({foo: 'bar'}), []); // value is cached by useMemo\n  return (\n    <SomeContext.Provider value={obj}> { /* Compliant */ }\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}",
            "tags": "maintainability, performance, react",
            "examples": [
                {
                    "snippet": "function Component() {\n  return (\n    <SomeContext.Provider value={{foo: 'bar'}}> { /* Noncompliant: value is an object literal */ }\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function Component() {\n  const obj = useMemo(() => ({foo: 'bar'}), []); // value is cached by useMemo\n  return (\n    <SomeContext.Provider value={obj}> { /* Compliant */ }\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "51ddc78d-53e4-4a99-b566-867df75116b3",
            "title": "Avoid using .bind() or arrow functions in JSX props",
            "rule": "Detect the use of .bind() or inline arrow functions inside JSX props. These create new functions on every render, impacting performance. Suggest moving function definitions outside the render method.",
            "why_is_this_important": "Using .bind() or arrow functions in JSX props creates new functions on every render, which negatively impacts performance and can trigger unnecessary re-renders. Use useCallback or predefine functions instead.",
            "severity": "High",
            "bad_example": "<Component onClick={this._handleClick.bind(this)}></Component>\n\n<Component onClick={() => handleClick()}></Component>",
            "good_example": "function handleClick() {\n    //...\n}\n\n<Component onClick={handleClick}></Component",
            "tags": "maintainability, performance, react",
            "examples": [
                {
                    "snippet": "<Component onClick={this._handleClick.bind(this)}></Component>\n\n<Component onClick={() => handleClick()}></Component>",
                    "isCorrect": false
                },
                {
                    "snippet": "function handleClick() {\n    //...\n}\n\n<Component onClick={handleClick}></Component",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "e04a8cc5-092b-4e2f-8f18-a79eabd8272b",
            "title": "Avoid array indexes as keys in React lists",
            "rule": "Ensure that React list items do not use array indexes as keys. This practice can cause reordering issues and unexpected behavior. Recommend using unique identifiers instead.",
            "why_is_this_important": "Using array indexes as keys can cause React to recreate the DOM when the order of items changes, negatively affecting performance and state management. Use unique identifiers instead.",
            "severity": "High",
            "bad_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post, index) =>\n        <li key={index}> <!-- Noncompliant: When 'posts' are reordered, React will need to recreate the list DOM -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
            "good_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
            "tags": "performance, maintainability, react",
            "examples": [
                {
                    "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post, index) =>\n        <li key={index}> <!-- Noncompliant: When 'posts' are reordered, React will need to recreate the list DOM -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a3a30f68-023f-4d9a-8fd7-cc5ebef963c3",
            "title": "Do not nest React components",
            "rule": "Check if React components are defined inside other components. Nested components are recreated on every render, causing unnecessary re-renders. Suggest moving them outside the parent component.",
            "why_is_this_important": "Nesting components within other components causes state to be lost on re-renders and can lead to unnecessary recreations. Move nested components outside the parent to improve maintainability and performance.",
            "severity": "High",
            "bad_example": "function Component() {\n  function NestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n    return <div />;\n  }\n\n  return (\n    <div>\n      <NestedComponent />\n    </div>\n  );\n\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n      return <div />;\n    }\n\n    return (\n      <div>\n        <UnstableNestedComponent />\n      </div>\n    );\n  }\n}",
            "good_example": "function OutsideComponent(props) {\n  return <div />;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <OutsideComponent />\n    </div>\n  );\n}",
            "tags": "maintainability, performance, react",
            "examples": [
                {
                    "snippet": "function Component() {\n  function NestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n    return <div />;\n  }\n\n  return (\n    <div>\n      <NestedComponent />\n    </div>\n  );\n\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n      return <div />;\n    }\n\n    return (\n      <div>\n        <UnstableNestedComponent />\n      </div>\n    );\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function OutsideComponent(props) {\n  return <div />;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <OutsideComponent />\n    </div>\n  );\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7b894f16-eaab-4edc-b48a-26d0684d1da1",
            "title": "Continue should not be used in loops",
            "rule": "Detect the use of 'continue' inside loops. This practice can make control flow harder to follow. Recommend restructuring the loop for better readability.",
            "why_is_this_important": "Using 'continue' in loops creates unstructured control flow, making the code harder to read and maintain. Replace it with clearer conditional logic to improve readability.",
            "severity": "Low",
            "bad_example": "  for (i = 0; i < 10; i++) {\n    if (i == 5) {\n      continue;  /* Noncompliant */\n    }\n    alert(\"i = \" + i);\n  }",
            "good_example": "  for (i = 0; i < 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert(\"i = \" + i);\n    }\n  }",
            "tags": "maintainability, reliability",
            "examples": [
                {
                    "snippet": "  for (i = 0; i < 10; i++) {\n    if (i == 5) {\n      continue;  /* Noncompliant */\n    }\n    alert(\"i = \" + i);\n  }",
                    "isCorrect": false
                },
                {
                    "snippet": "  for (i = 0; i < 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert(\"i = \" + i);\n    }\n  }",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "32e26bf9-ca82-40c1-b8d0-44e29f804170",
            "title": "React's isMounted should not be used",
            "rule": "Ensure that isMounted is not used in React components. This method is deprecated and can cause unreliable state updates. Suggest using cleanup functions or useRef instead.",
            "why_is_this_important": "The isMounted method is deprecated and hides warnings about improper state updates. Instead, use cleanup functions or other lifecycle methods to handle unmounted components safely.",
            "severity": "Medium",
            "bad_example": "class MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    if (this.isMounted()) { // Noncompliant: isMounted() hides the error\n      //...\n    }\n  }\n  render() {\n    //... calls dataHandler()\n  }\n};",
            "good_example": "class MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    //...\n  }\n  render() {\n    //...\n  }\n  componentWillUnmount() {\n    mydatastore.unsubscribe(this);\n  }\n}",
            "tags": "maintainability, reliability, react",
            "examples": [
                {
                    "snippet": "class MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    if (this.isMounted()) { // Noncompliant: isMounted() hides the error\n      //...\n    }\n  }\n  render() {\n    //... calls dataHandler()\n  }\n};",
                    "isCorrect": false
                },
                {
                    "snippet": "class MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    //...\n  }\n  render() {\n    //...\n  }\n  componentWillUnmount() {\n    mydatastore.unsubscribe(this);\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "f1737cbb-f52b-45dd-9430-43bab52091a8",
            "title": "Always use const and let",
            "rule": "Check for occurrences of var declarations. Using var leads to function scoping issues. Recommend using const for immutable values and let for mutable ones.",
            "why_is_this_important": "he var keyword creates variables with function scope, leading to bugs and unexpected behavior. Use const for variables that don't change and let for those that do, to ensure block scoping.",
            "severity": "Medium",
            "bad_example": "",
            "good_example": "",
            "tags": "google, maintainability",
            "examples": []
        },
        {
            "uuid": "97fe785f-d366-4712-9b42-961f1972fa97",
            "title": "One variable per declaration",
            "rule": "Ensure that multiple variables are not declared in a single statement. This practice reduces readability and can introduce subtle bugs. Recommend declaring variables separately.",
            "why_is_this_important": "Declaring multiple variables in a single statement reduces readability and can introduce subtle bugs. Declare each variable separately for clarity.",
            "severity": "Medium",
            "bad_example": "",
            "good_example": "",
            "tags": "google, maintainability",
            "examples": []
        },
        {
            "uuid": "178e5a15-e727-40ef-a796-a5a9d8a9a86f",
            "title": "Do not use the Array constructor",
            "rule": "Detect occurrences of the Array constructor. It behaves inconsistently depending on arguments. Recommend using array literals [] instead for clarity and predictability.",
            "why_is_this_important": "The Array constructor behaves inconsistently depending on the arguments provided. Use array literals [] instead, which are clearer and more predictable.",
            "severity": "Medium",
            "bad_example": "const a1 = new Array(x1, x2, x3);\nconst a2 = new Array(x1, x2);\nconst a3 = new Array(x1);\nconst a4 = new Array();",
            "good_example": "const a1 = [x1, x2, x3];\nconst a2 = [x1, x2];\nconst a3 = [x1];\nconst a4 = [];",
            "tags": "google, maintainability",
            "examples": [
                {
                    "snippet": "const a1 = new Array(x1, x2, x3);\nconst a2 = new Array(x1, x2);\nconst a3 = new Array(x1);\nconst a4 = new Array();",
                    "isCorrect": false
                },
                {
                    "snippet": "const a1 = [x1, x2, x3];\nconst a2 = [x1, x2];\nconst a3 = [x1];\nconst a4 = [];",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "04b1b7e8-0291-47a0-94a3-64f2495666c1",
            "title": "Avoid using Getters and Setters",
            "rule": "Check for the use of getters and setters. These can introduce unexpected side effects and have limited compiler support. Recommend using regular methods unless required by a framework.",
            "why_is_this_important": "Getters and setters can be difficult to reason about and have limited compiler support. They can introduce unexpected side effects and performance issues. Instead, use regular methods to define and modify properties unless working with frameworks that require them.",
            "severity": "Medium",
            "bad_example": "class Foo {\n  get next() { return this.nextId++; }\n}",
            "good_example": "",
            "tags": "google, maintainability",
            "examples": [
                {
                    "snippet": "class Foo {\n  get next() { return this.nextId++; }\n}",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "3d735d2d-45a5-4479-8806-05c5a23fd46a",
            "title": "Always use JSDoc for documentation",
            "rule": "Ensure that all classes, fields, and methods are documented with JSDoc. JSDoc improves code clarity, provides documentation for developers, and helps with IDE autocompletion.",
            "why_is_this_important": "JSDoc improves code clarity, provides documentation for developers, and helps with IDE autocompletion. All classes, fields, and methods should be properly documented using JSDoc.",
            "severity": "Medium",
            "bad_example": "",
            "good_example": "",
            "tags": "google, docs",
            "examples": []
        },
        {
            "uuid": "7888bc2b-08b3-49c3-b362-60479a87a2cc",
            "title": "Avoid using eval",
            "rule": "Detect the use of eval(). Eval allows execution of arbitrary code, leading to security vulnerabilities such as code injection. Recommend safer alternatives like function execution.",
            "why_is_this_important": "Using eval to execute code can lead to security vulnerabilities and is not allowed in environments with Content Security Policies. Avoid eval and use safer alternatives.",
            "severity": "Critical",
            "bad_example": "const userInput = 'alert(\"Hacked!\")';\neval(userInput);",
            "good_example": "const userInput = 'alert(\"Hacked!\")';\n// Avoid eval usage; parse or sanitize input appropriately\nconsole.log('Safe execution:', userInput);",
            "tags": "google, maintainability",
            "examples": [
                {
                    "snippet": "const userInput = 'alert(\"Hacked!\")';\neval(userInput);",
                    "isCorrect": false
                },
                {
                    "snippet": "const userInput = 'alert(\"Hacked!\")';\n// Avoid eval usage; parse or sanitize input appropriately\nconsole.log('Safe execution:', userInput);",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7de6bc14-d456-4bf8-9897-b54bf21565c3",
            "title": "Enforce Async/Await for asynchronous code",
            "rule": "Check for the use of eval() to handle asynchronous execution. Eval leads to security vulnerabilities. Recommend using Async/Await or Promises instead.",
            "why_is_this_important": "Using eval() executes arbitrary code, leading to security vulnerabilities like code injection. Always use Async/Await or Promises instead of dynamic execution methods like eval().",
            "severity": "Medium",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability",
            "examples": []
        },
        {
            "uuid": "4d2ea914-b5c0-43b7-be59-be147bf4ac9d",
            "title": "Proper memory management in event listeners",
            "rule": "Ensure that event listeners are removed when no longer needed. Not doing so can lead to memory leaks and unnecessary resource consumption.",
            "why_is_this_important": "Event listeners that are not removed properly can cause memory leaks. Always remove listeners when they are no longer needed to avoid unnecessary resource consumption.",
            "severity": "Medium",
            "bad_example": "",
            "good_example": "",
            "tags": "performance",
            "examples": []
        },
        {
            "uuid": "0434f77e-1c93-428a-a00c-e999f3e3f6e3",
            "title": "Do not use the 'with' statement",
            "rule": "Detect occurrences of the 'with' statement. This construct is banned in strict mode due to unpredictable behavior and makes debugging harder.",
            "why_is_this_important": "The 'with' statement makes code harder to understand and debug. It has been banned in strict mode since ES5 due to its unpredictable behavior.",
            "severity": "High",
            "bad_example": "",
            "good_example": "",
            "tags": "google, maintainability",
            "examples": []
        },
        {
            "uuid": "54ce13df-f5a4-42ab-8ce7-b746ce17e22a",
            "title": "Avoid console statements in production",
            "rule": "Ensure that console statements are removed in production code. Console logs can expose sensitive data and impact performance.",
            "why_is_this_important": "Using console logging in production can expose sensitive data and negatively impact performance. Always remove or disable debug logs before deployment.",
            "severity": "Medium",
            "bad_example": "var myObj = getData();\nconsole.log(myObj); // bad\nconsole.debug(\"myObj:\", myObj); // bad",
            "good_example": "",
            "tags": "maintainability",
            "examples": [
                {
                    "snippet": "var myObj = getData();\nconsole.log(myObj); // bad\nconsole.debug(\"myObj:\", myObj); // bad",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "cc05a887-0d44-4b39-bb26-9298853fbf34",
            "title": "File titles must be lowercase with underscores or dashes",
            "rule": "Check if file titles follow the lowercase naming convention with underscores or dashes. This improves cross-platform compatibility and consistency.",
            "why_is_this_important": "Inconsistent file naming makes file imports harder to track and can lead to cross-platform compatibility issues. Always use lowercase with underscores or dashes.",
            "severity": "Low",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, google",
            "examples": []
        },
        {
            "uuid": "abaabd57-62d2-44bd-b1ba-84c75b505ca5",
            "title": "Limit lines to 80 characters",
            "rule": "Ensure that lines do not exceed 80 characters. Long lines reduce readability, especially on smaller screens or during code reviews.",
            "why_is_this_important": "Long lines make code harder to read, especially on smaller screens or during code reviews. Keeping lines within 80 characters improves readability and maintainability.",
            "severity": "Low",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, google",
            "examples": []
        },
        {
            "uuid": "a4f18b7f-6cca-408d-9f07-06ece8630e6c",
            "title": "Avoid default exports",
            "rule": "Detect the use of default exports. Named exports provide better clarity, maintainability, and prevent issues when refactoring.",
            "why_is_this_important": "Default exports make it harder to track imported module titles, leading to inconsistencies. Named exports provide better clarity and maintainability.",
            "severity": "Low",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, google",
            "examples": []
        },
        {
            "uuid": "2a4fa850-9656-47fe-adff-d11e1c5d14f3",
            "title": "Always use strict equality checks",
            "rule": "Ensure that strict equality (===) is used instead of loose equality (==). Loose equality can lead to unexpected type coercion and logical errors.",
            "why_is_this_important": "Loose equality (==) can cause unexpected behavior due to type coercion. Always use strict equality (===) to prevent logical errors.",
            "severity": "Medium",
            "bad_example": "if (userInput == 0) {\n  console.log('This might cause type coercion vulnerabilities');\n}",
            "good_example": "if (userInput === 0) {\n  console.log('This avoids type coercion issues');\n}",
            "tags": "maintainability, google",
            "examples": [
                {
                    "snippet": "if (userInput == 0) {\n  console.log('This might cause type coercion vulnerabilities');\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "if (userInput === 0) {\n  console.log('This avoids type coercion issues');\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "08d4da8d-d35f-4901-85c7-23284097e004",
            "title": "Always sanitize user inputs",
            "rule": "Check if user inputs are sanitized before being used in rendering or database queries. Unsanitized inputs can lead to injection vulnerabilities like XSS or SQL injection.",
            "why_is_this_important": "Unsanitized inputs can lead to injection vulnerabilities, such as XSS or SQL injection, in cases where inputs are directly used in rendering or database queries.",
            "severity": "Critical",
            "bad_example": "const userInput = '<script>alert(\"Hacked!\")</script>';\ndocument.innerHTML = userInput; // Vulnerable to XSS",
            "good_example": "const userInput = '<script>alert(\"Hacked!\")</script>';\nconst sanitizedInput = userInput.replace(/</g, '&lt;').replace(/>/g, '&gt;');\ndocument.innerHTML = sanitizedInput; // Safe rendering\n",
            "tags": "security, google, owasp",
            "examples": [
                {
                    "snippet": "const userInput = '<script>alert(\"Hacked!\")</script>';\ndocument.innerHTML = userInput; // Vulnerable to XSS",
                    "isCorrect": false
                },
                {
                    "snippet": "const userInput = '<script>alert(\"Hacked!\")</script>';\nconst sanitizedInput = userInput.replace(/</g, '&lt;').replace(/>/g, '&gt;');\ndocument.innerHTML = sanitizedInput; // Safe rendering\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "30b9eda5-6b10-4c01-9245-1361c2b6cc73",
            "title": "Always validate JSON parsing",
            "rule": "Ensure that JSON data is validated before parsing. Parsing untrusted JSON without validation can result in runtime errors or vulnerabilities.",
            "why_is_this_important": "Parsing untrusted JSON without validation can result in runtime errors or vulnerabilities. Always validate the structure of parsed JSON to ensure it meets expected requirements.",
            "severity": "Medium",
            "bad_example": "const data = JSON.parse(userInput); // No validation",
            "good_example": "try {\n  const data = JSON.parse(userInput);\n  if (typeof data !== 'object' || Array.isArray(data)) {\n    throw new Error('Invalid JSON structure');\n  }\n} catch (err) {\n  console.error('JSON parsing error:', err);\n}\n",
            "tags": "security, google, owasp",
            "examples": [
                {
                    "snippet": "const data = JSON.parse(userInput); // No validation",
                    "isCorrect": false
                },
                {
                    "snippet": "try {\n  const data = JSON.parse(userInput);\n  if (typeof data !== 'object' || Array.isArray(data)) {\n    throw new Error('Invalid JSON structure');\n  }\n} catch (err) {\n  console.error('JSON parsing error:', err);\n}\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "af8bb4dd-720e-4b9d-99c5-1776fb22e68f",
            "title": "Enable CSRF prevention",
            "rule": "Ensure that CSRF protection is enforced. Disabling CSRF protection allows malicious sites to execute unauthorized actions on behalf of authenticated users.",
            "why_is_this_important": "Disabling CSRF protection allows malicious sites to execute unauthorized actions on behalf of authenticated users. Always enforce CSRF protection.",
            "severity": "High",
            "bad_example": "new ApolloServer({\n  csrfPrevention: false,\n});",
            "good_example": "new ApolloServer({\n  csrfPrevention: true,\n});",
            "tags": "security, owasp",
            "examples": [
                {
                    "snippet": "new ApolloServer({\n  csrfPrevention: false,\n});",
                    "isCorrect": false
                },
                {
                    "snippet": "new ApolloServer({\n  csrfPrevention: true,\n});",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b259d4ab-18ae-4a27-8237-3dab1e783d6c",
            "title": "Use graphql-upload with caution",
            "rule": "Check for the use of graphql-upload. This library enables file uploads using multipart requests, which can be exploited for CSRF attacks if not properly secured.",
            "why_is_this_important": "The graphql-upload library enables file uploads using multipart requests, which can be exploited for CSRF attacks if not properly secured.",
            "severity": "Medium",
            "bad_example": "app.use(graphqlUploadExpress());",
            "good_example": "app.use(graphqlUploadExpress({\n  maxFileSize: 1000000,\n  maxFiles: 10,\n})); // Ensure CSRF protection is enabled elsewhere\n",
            "tags": "security, owasp",
            "examples": [
                {
                    "snippet": "app.use(graphqlUploadExpress());",
                    "isCorrect": false
                },
                {
                    "snippet": "app.use(graphqlUploadExpress({\n  maxFileSize: 1000000,\n  maxFiles: 10,\n})); // Ensure CSRF protection is enabled elsewhere\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a24e2266-b67f-4066-93ea-e77fa1cce655",
            "title": "Avoid weak or missing CORS policies",
            "rule": "Ensure that CORS policies are properly defined. Weak or missing CORS policies may allow unauthorized domains to access your resources, leading to security vulnerabilities.",
            "why_is_this_important": "A weak or missing CORS policy may allow unauthorized domains to access your resources. Always define strict CORS rules to control access.",
            "severity": "Medium",
            "bad_example": "new ApolloServer({});",
            "good_example": "new ApolloServer({\n  cors: {\n    origin: ['https://trusted.com'],\n  },\n});",
            "tags": "security, owasp",
            "examples": [
                {
                    "snippet": "new ApolloServer({});",
                    "isCorrect": false
                },
                {
                    "snippet": "new ApolloServer({\n  cors: {\n    origin: ['https://trusted.com'],\n  },\n});",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8146b323-7825-4d87-83a8-154ca8bc668b",
            "title": "Avoid excessive precision in numeric literals",
            "rule": "Detect floating-point numbers with excessive precision. Overly precise numeric literals can cause rounding errors and unexpected behavior in calculations.",
            "why_is_this_important": "Floating-point numbers have limited precision. Excessively precise numeric literals can lead to rounding errors and unexpected behavior in calculations.",
            "severity": "Medium",
            "bad_example": "var c = 999999999999999999999; // Not good, exceeds precision limits\nvar z = 1.12345678901234567;  // Too precise, may lose accuracy",
            "good_example": "var a = 9;                     // Ok\nvar b = 999999999999999;       // Ok, within safe limits\nvar w = 1.12e-4;               // Ok\nvar y = 1.1234567890123;       // Ok, precise but within limits",
            "tags": "maintainability, performance",
            "examples": [
                {
                    "snippet": "var c = 999999999999999999999; // Not good, exceeds precision limits\nvar z = 1.12345678901234567;  // Too precise, may lose accuracy",
                    "isCorrect": false
                },
                {
                    "snippet": "var a = 9;                     // Ok\nvar b = 999999999999999;       // Ok, within safe limits\nvar w = 1.12e-4;               // Ok\nvar y = 1.1234567890123;       // Ok, precise but within limits",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "40cd4c5d-5ac3-4534-8ff6-e5da5635375e",
            "title": "Do not use the Object constructor",
            "rule": "Ensure that the Object constructor is not used. Object literals are clearer, more predictable, and improve readability.",
            "why_is_this_important": "The Object constructor is less readable and can lead to unexpected behavior. Object literals are safer and clearer.",
            "severity": "Medium",
            "bad_example": "const foo = new Object();",
            "good_example": "const foo = {};\n",
            "tags": "maintainability, performance, google",
            "examples": [
                {
                    "snippet": "const foo = new Object();",
                    "isCorrect": false
                },
                {
                    "snippet": "const foo = {};\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "18ae2a27-4f03-457b-bac9-293099232dde",
            "title": "Avoid the 'any' type",
            "rule": "Detect the use of the 'any' type in TypeScript. Using 'any' disables type checking and can lead to runtime errors. Recommend using specific types or generics instead.",
            "why_is_this_important": "Using 'any' disables type checking and can lead to runtime errors. Always use specific types or generics to ensure type safety.",
            "severity": "High",
            "bad_example": "let foo: any = \"bar\";",
            "good_example": "let foo: string = \"bar\";",
            "tags": "google, maintainability",
            "examples": [
                {
                    "snippet": "let foo: any = \"bar\";",
                    "isCorrect": false
                },
                {
                    "snippet": "let foo: string = \"bar\";",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ebb36fe3-4268-4d41-9b6d-3a8f382b60e4",
            "title": "Prefer interfaces over type aliases",
            "rule": "Check if type aliases are used instead of interfaces. Interfaces provide better extensibility and readability when defining object shapes.",
            "why_is_this_important": "Interfaces provide better extensibility and readability compared to type aliases. Use interfaces for defining object shapes when possible.",
            "severity": "Medium",
            "bad_example": "type User = {\n  title: string;\n  age: number;\n};",
            "good_example": "interface User {\n  title: string;\n  age: number;\n}\n",
            "tags": "maintainability, google",
            "examples": [
                {
                    "snippet": "type User = {\n  title: string;\n  age: number;\n};",
                    "isCorrect": false
                },
                {
                    "snippet": "interface User {\n  title: string;\n  age: number;\n}\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ee851f62-8965-42f4-9169-c7698762fae6",
            "title": "Avoid Non-Numeric Properties on Arrays",
            "rule": "Ensure that arrays do not contain non-numeric properties. This practice can lead to unexpected behavior. Use Maps or Objects instead.",
            "why_is_this_important": "Adding non-numeric properties to arrays is error-prone and goes against the intended use of arrays. Use Map or Object instead to ensure predictable behavior.",
            "severity": "Medium",
            "bad_example": "const arr = [];\narr['key'] = 'value'; // Bad practice",
            "good_example": "const map = new Map<string, string>();\nmap.set('key', 'value');",
            "tags": "google, maintainability, performance",
            "examples": [
                {
                    "snippet": "const arr = [];\narr['key'] = 'value'; // Bad practice",
                    "isCorrect": false
                },
                {
                    "snippet": "const map = new Map<string, string>();\nmap.set('key', 'value');",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8a38af86-2e9f-4fe1-9c9d-6c75f62b3563",
            "title": "Mark Properties as readonly If Not Reassigned",
            "rule": "Check if properties that are never reassigned are marked as readonly. This improves code clarity and prevents unintended reassignment.",
            "why_is_this_important": "Marking properties as readonly improves code clarity and prevents unintended reassignment.",
            "severity": "Medium",
            "bad_example": "class User {\n  title: string = \"John\";\n}",
            "good_example": "class User {\n  readonly title: string = \"John\";\n}\n",
            "tags": "google, maintainability",
            "examples": [
                {
                    "snippet": "class User {\n  title: string = \"John\";\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "class User {\n  readonly title: string = \"John\";\n}\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7b302d88-2166-4652-8c58-deda6a6d4cd7",
            "title": "Always Use isFinite to Validate Numbers",
            "rule": "Ensure that isFinite is used to validate numbers. Without this, NaN or Infinity can cause unexpected behavior and runtime errors.",
            "why_is_this_important": "Validating numbers without isFinite can lead to unexpected behavior with NaN or Infinity, which can cause runtime errors.",
            "severity": "Medium",
            "bad_example": "const value = Number(\"Not a Number\");\nif (value) {\n  console.log(\"Valid number\"); // Will not catch NaN or Infinity\n}",
            "good_example": "const value = Number(\"Not a Number\");\nif (isFinite(value)) {\n  console.log(\"Valid number\");\n}\n",
            "tags": "google, security",
            "examples": [
                {
                    "snippet": "const value = Number(\"Not a Number\");\nif (value) {\n  console.log(\"Valid number\"); // Will not catch NaN or Infinity\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "const value = Number(\"Not a Number\");\nif (isFinite(value)) {\n  console.log(\"Valid number\");\n}\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d180d23b-5c28-4e77-946a-821578e81e6d",
            "title": "Avoid unsafe type assertions",
            "rule": "Detect cases of unsafe type assertions. These do not perform runtime checks and can lead to unexpected runtime errors. Recommend using proper type guards instead.",
            "why_is_this_important": "Unsafe type assertions do not perform runtime checks, leading to potential runtime errors if the assertion is incorrect. Use proper type checks instead.",
            "severity": "High",
            "bad_example": "const element = document.getElementById(\"myId\") as HTMLInputElement;\nelement.value = \"Hello\"; // Unsafe if the element is not an input",
            "good_example": "const element = document.getElementById(\"myId\");\nif (element instanceof HTMLInputElement) {\n  element.value = \"Hello\";\n}\n",
            "tags": "google, maintainability, security",
            "examples": [
                {
                    "snippet": "const element = document.getElementById(\"myId\") as HTMLInputElement;\nelement.value = \"Hello\"; // Unsafe if the element is not an input",
                    "isCorrect": false
                },
                {
                    "snippet": "const element = document.getElementById(\"myId\");\nif (element instanceof HTMLInputElement) {\n  element.value = \"Hello\";\n}\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b0276f98-d47a-4c59-bfe8-4ab3015e794a",
            "title": "Use destructuring for function parameters",
            "rule": "Ensure that destructuring is used in function parameters where applicable. This improves readability by clearly showing accessed properties and default values.",
            "why_is_this_important": " Destructuring makes code more readable by clearly showing which properties are being accessed and their defaults.",
            "severity": "Medium",
            "bad_example": "function configure(options: { key?: string, value?: number }) {\n  const key = options.key || \"defaultKey\";\n  const value = options.value || 0;\n}",
            "good_example": "function configure({ key = \"defaultKey\", value = 0 }: { key?: string; value?: number }) {}",
            "tags": "google, maintainability",
            "examples": [
                {
                    "snippet": "function configure(options: { key?: string, value?: number }) {\n  const key = options.key || \"defaultKey\";\n  const value = options.value || 0;\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function configure({ key = \"defaultKey\", value = 0 }: { key?: string; value?: number }) {}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7db791c3-3e62-4227-a5a8-2fa64267cd4a",
            "title": "Use Template Literals Instead of String Concatenation",
            "rule": "Check for cases of string concatenation using +. Template literals improve readability and are less error-prone.",
            "why_is_this_important": "Destructuring improves readability by clearly defining which properties are accessed and their default values.",
            "severity": "Medium",
            "bad_example": "const message = \"Hello, \" + title + \"!\"\n",
            "good_example": "const message = `Hello, ${title}!`;\n",
            "tags": "google, maintainability",
            "examples": [
                {
                    "snippet": "const message = \"Hello, \" + title + \"!\"\n",
                    "isCorrect": false
                },
                {
                    "snippet": "const message = `Hello, ${title}!`;\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "16c49f48-5d5a-4bdd-97a4-6a9cfd7fbb44",
            "title": "Avoid empty catch blocks",
            "rule": "Ensure that catch blocks do not remain empty. Empty catch blocks hide errors, making debugging difficult. Recommend logging or handling errors properly.",
            "why_is_this_important": "Empty catch blocks hide errors and make debugging difficult. Always log or handle errors properly to prevent silent failures.",
            "severity": "High",
            "bad_example": "try {\n  doSomething();\n} catch (e) {\n  // Ignored\n}",
            "good_example": "try {\n  doSomething();\n} catch (e) {\n  console.error(\"Error occurred:\", e);\n}\n",
            "tags": "maintainability, security",
            "examples": [
                {
                    "snippet": "try {\n  doSomething();\n} catch (e) {\n  // Ignored\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "try {\n  doSomething();\n} catch (e) {\n  console.error(\"Error occurred:\", e);\n}\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8e399cb6-c9ec-4d05-9143-a2a28e349f80",
            "title": "Avoid modifying built-in prototypes",
            "rule": "Detect modifications to built-in prototypes. Modifying built-in objects can lead to compatibility issues and unexpected behavior. Recommend creating helper functions instead.",
            "why_is_this_important": "Modifying built-in prototypes can lead to compatibility issues and unexpected behavior, especially when working with third-party libraries. Create helper functions instead.",
            "severity": "Critical",
            "bad_example": "String.prototype.toCustomCase = function () {\n  return this.toUpperCase();\n};",
            "good_example": "function toCustomCase(value: string): string {\n  return value.toUpperCase();\n}",
            "tags": "google, security, maintainability",
            "examples": [
                {
                    "snippet": "String.prototype.toCustomCase = function () {\n  return this.toUpperCase();\n};",
                    "isCorrect": false
                },
                {
                    "snippet": "function toCustomCase(value: string): string {\n  return value.toUpperCase();\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7fdc65b8-2627-4328-97f0-88f31899f663",
            "title": "Interactive DOM elements should not have non-interactive ARIA roles",
            "rule": "Ensure that interactive DOM elements have appropriate ARIA roles. Incorrect roles can mislead assistive technologies, affecting accessibility.",
            "why_is_this_important": "Assigning non-interactive ARIA roles to interactive elements can mislead assistive technologies, causing accessibility issues. Always ensure elements have appropriate roles.",
            "severity": "High",
            "bad_example": "function myButton() {\n    return <button role=\"article\">Click me!</button>; // Noncompliant; \"button\" is interactive, but \"article\" isn't\n}",
            "good_example": "function myButton() {\n    return <button role=\"button\">Click me!</button>;\n}",
            "tags": "react, maintainability",
            "examples": [
                {
                    "snippet": "function myButton() {\n    return <button role=\"article\">Click me!</button>; // Noncompliant; \"button\" is interactive, but \"article\" isn't\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function myButton() {\n    return <button role=\"button\">Click me!</button>;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fe2f45b6-4e78-453d-94c8-c714359427b0",
            "title": "DOM elements should use the autocomplete attribute correctly",
            "rule": "Check for missing or incorrect autocomplete attributes. Proper use of autocomplete improves accessibility and usability, especially for screen readers.",
            "why_is_this_important": "Missing or incorrect autocomplete values hinder accessibility and usability, especially for screen readers. Ensure valid and meaningful autocomplete values are applied.",
            "severity": "Low",
            "bad_example": "function MyInput() {\n    return <input type=\"text\" autocomplete=\"foo\" />; // Noncompliant\n}",
            "good_example": "function MyInput() {\n    return <input type=\"text\" autocomplete=\"title\" />;\n}",
            "tags": "react, maintainability",
            "examples": [
                {
                    "snippet": "function MyInput() {\n    return <input type=\"text\" autocomplete=\"foo\" />; // Noncompliant\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function MyInput() {\n    return <input type=\"text\" autocomplete=\"title\" />;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "2ae3325f-b8f4-46ea-9c2b-83f19a81c290",
            "title": "String references should not be used",
            "rule": "Ensure that string refs are not used in React. String refs are deprecated, make components harder to maintain, and reduce composability. Recommend using function-based refs instead.",
            "why_is_this_important": "Using string refs in React is deprecated and makes the component slower, harder to maintain, and less composable. Use function-based refs instead.",
            "severity": "Medium",
            "bad_example": "const Hello = createReactClass({\n  componentDidMount() {\n    const component = this.refs.hello; // Noncompliant\n    // ...\n  },\n  render() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});",
            "good_example": "const Hello = createReactClass({\n  componentDidMount() {\n    const component = this.hello;\n    // ...\n  },\n  render() {\n    return <div ref={(c) => { this.hello = c; }}>Hello, world.</div>;\n  }\n});",
            "tags": "react, maintainability",
            "examples": [
                {
                    "snippet": "const Hello = createReactClass({\n  componentDidMount() {\n    const component = this.refs.hello; // Noncompliant\n    // ...\n  },\n  render() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});",
                    "isCorrect": false
                },
                {
                    "snippet": "const Hello = createReactClass({\n  componentDidMount() {\n    const component = this.hello;\n    // ...\n  },\n  render() {\n    return <div ref={(c) => { this.hello = c; }}>Hello, world.</div>;\n  }\n});",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a30c4316-9e08-4e77-a975-666f262d28e0",
            "title": "\"this\" should not be used in functional components\n",
            "rule": "Ensure that 'this' is not used in functional components. Functional components do not have a 'this' context. Use props and destructuring for data access instead.",
            "why_is_this_important": "Functional components do not have a 'this' context. Using 'this' leads to runtime errors. Instead, use props and destructuring for data access.",
            "severity": "High",
            "bad_example": "function MyComponent(props){\n    const foo = this.props.bar; // Noncompliant: remove 'this'\n    return (\n        <div>{foo}</div>\n    );\n}",
            "good_example": "function MyComponent({bar}){\n    const foo = bar;\n    return (\n        <div>{foo}</div>\n    );\n}",
            "tags": "react, maintainability",
            "examples": [
                {
                    "snippet": "function MyComponent(props){\n    const foo = this.props.bar; // Noncompliant: remove 'this'\n    return (\n        <div>{foo}</div>\n    );\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function MyComponent({bar}){\n    const foo = bar;\n    return (\n        <div>{foo}</div>\n    );\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "93d12f34-5178-4299-ae39-9114b081eba0",
            "title": "React \"render\" functions should return a value\n",
            "rule": "Ensure that React class components' render functions return a value. Forgetting a return statement results in missing UI elements and potential bugs.",
            "why_is_this_important": "React class components require the render function to return a value. Forgetting a return statement results in missing UI elements and potential bugs.",
            "severity": "High",
            "bad_example": "const React = require('react');\nclass MyComponent extends React.Component {\n  render() {\n    <div>Contents</div>; // Noncompliant: The render function returns nothing\n  }\n}",
            "good_example": "const React = require('react');\nclass MyComponent extends React.Component {\n  render() {\n    return <div>Contents</div>;\n  }\n}",
            "tags": "react, reliability",
            "examples": [
                {
                    "snippet": "const React = require('react');\nclass MyComponent extends React.Component {\n  render() {\n    <div>Contents</div>; // Noncompliant: The render function returns nothing\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "const React = require('react');\nclass MyComponent extends React.Component {\n  render() {\n    return <div>Contents</div>;\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "072c0f3d-b363-4417-aec5-cc1e82c9ee11",
            "title": "Ensure JSX list components have a key property",
            "rule": "Check that JSX list components have unique key properties. Missing keys can cause unnecessary re-renders and lead to state inconsistencies.",
            "why_is_this_important": "React uses keys to optimize list rendering. Missing keys cause unnecessary re-renders and can lead to state inconsistencies.",
            "severity": "High",
            "bad_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li> <!-- Noncompliant: When 'posts' are reordered, React will need to recreate the list DOM -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
            "good_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}> <!-- Compliant: id will always be the same even if 'posts' order changes -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
            "tags": "react, performance",
            "examples": [
                {
                    "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li> <!-- Noncompliant: When 'posts' are reordered, React will need to recreate the list DOM -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}> <!-- Compliant: id will always be the same even if 'posts' order changes -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
                    "isCorrect": true
                }
            ]
        }
    ],
    "PYTHON": [
        {
            "uuid": "463dde77-7ab9-458b-84f1-8f4bb863c3b1",
            "title": "Use Module Imports Instead of Importing Specific Classes or Functions",
            "rule": "Check if the code imports individual classes or functions instead of the entire module. Directly importing specific classes or functions can clutter the titlespace and increase naming conflicts. Recommend importing the module and referencing items explicitly.",
            "why_is_this_important": "Importing individual classes or functions directly can clutter the titlespace, making it harder to track where objects come from. This increases the risk of naming conflicts and reduces code clarity. Instead, import the module and reference items explicitly.",
            "severity": "Low",
            "bad_example": "from math import sqrt\nresult = sqrt(16)",
            "good_example": "import math\nresult = math.sqrt(16)",
            "tags": "maintainability, clean-code, clarity, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "from math import sqrt\nresult = sqrt(16)",
                    "isCorrect": false
                },
                {
                    "snippet": "import math\nresult = math.sqrt(16)",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fd9b9ad0-347c-48bd-b178-1e4b40dafbcf",
            "title": "Avoid Mutable Objects as Default Arguments",
            "rule": "Identify function definitions where a mutable object (e.g., list, dictionary, set) is used as a default argument. This can cause shared state across function calls, leading to unintended behavior. Suggest using `None` as a default and initializing the object inside the function.",
            "why_is_this_important": "Using mutable objects (like lists or dictionaries) as default arguments can cause unexpected behavior. Since Python reuses the same object across multiple function calls, changes persist between calls, leading to bugs that are difficult to debug.",
            "severity": "High",
            "bad_example": "def append_to_list(value, my_list=[]):\n    my_list.append(value)\n    return my_list",
            "good_example": "def append_to_list(value, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(value)\n    return my_list",
            "tags": "performance, clean-code, debugging",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def append_to_list(value, my_list=[]):\n    my_list.append(value)\n    return my_list",
                    "isCorrect": false
                },
                {
                    "snippet": "def append_to_list(value, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(value)\n    return my_list",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b31b7578-5e8a-4f9b-9560-27f2d895d47f",
            "title": "Avoid Generic `except:` Blocks",
            "rule": "Detect `except:` blocks that catch all exceptions indiscriminately. Using a broad `except:` can hide real issues and prevent necessary errors like `KeyboardInterrupt`. Recommend catching specific exceptions instead.",
            "why_is_this_important": "Catching all exceptions with a broad `except:` block hides real issues, including unexpected errors. It can also prevent important exceptions like `KeyboardInterrupt` from stopping the program properly, making debugging more difficult. Always catch specific exceptions instead.",
            "severity": "High",
            "bad_example": "try:\n    result = 10 / 0\nexcept:\n    print('An error occurred')",
            "good_example": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')",
            "tags": "debugging, security, error-handling, owasp, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "try:\n    result = 10 / 0\nexcept:\n    print('An error occurred')",
                    "isCorrect": false
                },
                {
                    "snippet": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "0ef6c30f-749f-4205-b0a4-7914ba7ad48b",
            "title": "Always Use `with` for Managing Resources",
            "rule": "Ensure that resources such as files, sockets, or database connections are managed using the `with` statement. Code that explicitly calls `.close()` without `with` should be refactored to use context managers for automatic resource cleanup.",
            "why_is_this_important": "Forgetting to close resources like files or sockets can lead to memory leaks or unexpected behavior. The `with` statement ensures resources are properly released, even if an error occurs.",
            "severity": "Medium",
            "bad_example": "file = open('test.txt', 'r')\ndata = file.read()\nfile.close()",
            "good_example": "with open('test.txt', 'r') as file:\n    data = file.read()",
            "tags": "maintainability, performance, resource-management, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "file = open('test.txt', 'r')\ndata = file.read()\nfile.close()",
                    "isCorrect": false
                },
                {
                    "snippet": "with open('test.txt', 'r') as file:\n    data = file.read()",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8faa2b6e-0c69-4699-94c2-e757aac4f71e",
            "title": "Use Absolute Imports Instead of Relative Imports",
            "rule": "Detect relative imports (e.g., `from .module import x`). Relative imports can break if the project structure changes. Recommend using absolute imports (`from package.module import x`) for better clarity and maintainability.",
            "why_is_this_important": "Relative imports can make the code harder to understand and maintain, especially in large projects. They can also break when the project structure changes. Absolute imports make dependencies clearer and more reliable.",
            "severity": "Medium",
            "bad_example": "from .module import MyClass",
            "good_example": "from project.module import MyClass",
            "tags": "maintainability, clean-code, readability, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "from .module import MyClass",
                    "isCorrect": false
                },
                {
                    "snippet": "from project.module import MyClass",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "136deba4-3bb8-455e-bdab-425fb29a155f",
            "title": "Use Type Annotations for Better Readability",
            "rule": "Check if function signatures include type annotations. Type hints improve readability and help catch type-related errors early. Recommend adding type annotations where missing.",
            "why_is_this_important": "Type annotations improve code clarity, making it easier to understand function inputs and outputs. They also help catch type-related errors early, reducing debugging time.",
            "severity": "Medium",
            "bad_example": "def add(a, b):\n    return a + b",
            "good_example": "def add(a: int, b: int) -> int:\n    return a + b",
            "tags": "maintainability, clean-code, clarity, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def add(a, b):\n    return a + b",
                    "isCorrect": false
                },
                {
                    "snippet": "def add(a: int, b: int) -> int:\n    return a + b",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "52edc4de-b503-4e80-8087-acb8aa289d54",
            "title": "Document Exceptions in Function Docstrings",
            "rule": "Identify functions that raise exceptions but do not document them in docstrings. Missing exception documentation makes it difficult to understand failure cases. Suggest adding an `:raises` section in the docstring.",
            "why_is_this_important": "If a function raises exceptions but doesn't document them, it can be unclear what errors to expect. This makes it harder to use the function safely and handle potential failures correctly.",
            "severity": "High",
            "bad_example": "def fetch_data():\n    if error:\n        raise ValueError('Invalid data')",
            "good_example": "def fetch_data():\n    \"\"\"\n    Fetches data from the database.\n\n    Raises:\n        ValueError: If the data is invalid.\n    \"\"\"\n    if error:\n        raise ValueError(\"Invalid data\")",
            "tags": "maintainability, clarity, documentation, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def fetch_data():\n    if error:\n        raise ValueError('Invalid data')",
                    "isCorrect": false
                },
                {
                    "snippet": "def fetch_data():\n    \"\"\"\n    Fetches data from the database.\n\n    Raises:\n        ValueError: If the data is invalid.\n    \"\"\"\n    if error:\n        raise ValueError(\"Invalid data\")",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "2b53473b-a9c5-4c7a-a681-b14d642364db",
            "title": "Keep Lines Under 80 Characters for Readability",
            "rule": "Check if lines exceed 80 characters (excluding comments and docstrings). Long lines reduce readability. Recommend breaking lines or using line continuations for better formatting.",
            "why_is_this_important": "Long lines can make code harder to read, especially on smaller screens or in side-by-side comparisons. Keeping lines short improves readability and maintainability.",
            "severity": "Low",
            "bad_example": "result = [mapping_expr for value in iterable if condition(value)]",
            "good_example": "result = [\n    mapping_expr\n    for value in iterable\n    if condition(value)\n]",
            "tags": "readability, clean-code, maintainability, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "result = [mapping_expr for value in iterable if condition(value)]",
                    "isCorrect": false
                },
                {
                    "snippet": "result = [\n    mapping_expr\n    for value in iterable\n    if condition(value)\n]",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "9925f859-7b11-4a1d-ac12-1455e0cdc749",
            "title": "Prefer f-strings for String Formatting",
            "rule": "Detect string formatting using `.format()` or `%`. These methods are less readable and slower than f-strings. Recommend converting string formatting to f-strings for better readability and performance.",
            "why_is_this_important": "Using `.format()` or `%` for string formatting can be less readable and more error-prone. f-strings are faster, more concise, and improve code clarity.",
            "severity": "Medium",
            "bad_example": "Hello, {}'.format(title)",
            "good_example": "f'Hello, {title}'",
            "tags": "readability, clean-code, performance, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "Hello, {}'.format(title)",
                    "isCorrect": false
                },
                {
                    "snippet": "f'Hello, {title}'",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "66903ede-9f31-4ce3-913f-fd02a31c8c65",
            "title": "Don’t Use `assert` for Data Validation",
            "rule": "Ensure that `assert` is not used for validating user input or critical checks. Assertions can be disabled in optimized mode (`python -O`). Recommend using explicit validation with `if` conditions and raising proper exceptions.",
            "why_is_this_important": "Assertions can be disabled in production, meaning critical checks might not run. Use explicit validation with exceptions to ensure errors are handled properly.",
            "severity": "Critical",
            "bad_example": "assert x > 0, 'x must be positive'",
            "good_example": "if x <= 0:\n    raise ValueError('x must be positive')",
            "tags": "security, debugging, owasp, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "assert x > 0, 'x must be positive'",
                    "isCorrect": false
                },
                {
                    "snippet": "if x <= 0:\n    raise ValueError('x must be positive')",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7160cdf8-b8a3-450e-a478-2ab7fe0aa363",
            "title": "Use `is` When Comparing with `None`",
            "rule": "Identify occurrences where `== None` or `!= None` is used. Using `is None` and `is not None` is more reliable because it checks identity instead of equality, preventing potential issues with overloaded `__eq__` methods.",
            "why_is_this_important": "Using `==` to check for `None` can fail if an object overrides equality (`__eq__`). The correct way to check for `None` is with `is`, which is more reliable.",
            "severity": "Medium",
            "bad_example": "if value == None:",
            "good_example": "if value is None:",
            "tags": "maintainability, clean-code, clarity, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "if value == None:",
                    "isCorrect": false
                },
                {
                    "snippet": "if value is None:",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "047de581-d842-41e9-8e60-b1aa7ceb3bb3",
            "title": "Remove Unnecessary Trailing Whitespace",
            "rule": "Detect lines with trailing whitespace. Trailing spaces add unnecessary noise to version control diffs. Recommend removing them to keep the codebase clean.",
            "why_is_this_important": "Trailing whitespace adds noise to version control diffs and makes the codebase look untidy. Keeping code clean improves maintainability.",
            "severity": "Low",
            "bad_example": "x = 42",
            "good_example": "x = 42",
            "tags": "clean-code, readability, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "x = 42",
                    "isCorrect": false
                },
                {
                    "snippet": "x = 42",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "dba6cbe1-2bca-4b8c-9edc-8be04349a3b0",
            "title": "Explicitly Close Resources in `finally` Blocks",
            "rule": "Check if resources such as files or database connections are properly closed in a `finally` block. This ensures resources are always released, even if an exception occurs.",
            "why_is_this_important": "Failing to close files, sockets, or other resources can cause memory leaks and unexpected behavior. Placing cleanup code in a `finally` block ensures resources are always released, even if an error occurs.",
            "severity": "High",
            "bad_example": "file = open('test.txt')\ndata = file.read()",
            "good_example": "try:\n    file = open('test.txt')\n    data = file.read()\nfinally:\n    file.close()",
            "tags": "maintainability, resource-management, reliability, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "file = open('test.txt')\ndata = file.read()",
                    "isCorrect": false
                },
                {
                    "snippet": "try:\n    file = open('test.txt')\n    data = file.read()\nfinally:\n    file.close()",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "07ff5369-d341-4f68-bbbb-218c9d66b994",
            "title": "Keep `try` Blocks Small and Focused",
            "rule": "Detect `try` blocks that contain excessive code. Large `try` blocks make it harder to debug errors. Recommend narrowing the scope of the `try` block to only the necessary code.",
            "why_is_this_important": "Large `try` blocks make it harder to pinpoint what caused an exception. Keeping them small ensures that only the necessary code is monitored for errors.",
            "severity": "Medium",
            "bad_example": "try:\n    x = 10\n    y = x / 0\n    print(y)\nexcept ZeroDivisionError:\n    print('Error')",
            "good_example": "x = 10\ntry:\n    y = x / 0\nexcept ZeroDivisionError:\n    print('Error')",
            "tags": "debugging, error-handling, clarity, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "try:\n    x = 10\n    y = x / 0\n    print(y)\nexcept ZeroDivisionError:\n    print('Error')",
                    "isCorrect": false
                },
                {
                    "snippet": "x = 10\ntry:\n    y = x / 0\nexcept ZeroDivisionError:\n    print('Error')",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "25ba8302-60a5-46e3-bb60-c9acc794a415",
            "title": "Avoid Using Mutable Global Variables",
            "rule": "Identify global variables that are mutable (e.g., lists, dictionaries). Global mutable state can cause unpredictable behavior. Recommend using local variables or encapsulating state in a class.",
            "why_is_this_important": "Global mutable state can lead to unpredictable behavior, making debugging and testing more difficult. Functions should use local variables or class attributes instead.",
            "severity": "High",
            "bad_example": "global_state = {}\n\ndef update_state(key, value):\n    global global_state\n    global_state[key] = value",
            "good_example": "class GlobalState:\n    def __init__(self):\n        self.state = {}\n\n    def update_state(self, key, value):\n        self.state[key] = value\n\nglobal_state = GlobalState()\nglobal_state.update_state(\"key\", \"\n",
            "tags": "maintainability, debugging, clean-code, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "global_state = {}\n\ndef update_state(key, value):\n    global global_state\n    global_state[key] = value",
                    "isCorrect": false
                },
                {
                    "snippet": "class GlobalState:\n    def __init__(self):\n        self.state = {}\n\n    def update_state(self, key, value):\n        self.state[key] = value\n\nglobal_state = GlobalState()\nglobal_state.update_state(\"key\", \"\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "5da88434-3f09-4aa8-a526-985ebcda0fc9",
            "title": "Use Comprehensions for Simple Cases Only",
            "rule": "Ensure that list, set, or dictionary comprehensions are not overly complex. If a comprehension includes multiple conditions or nested loops, recommend refactoring to a regular loop for better readability.",
            "why_is_this_important": "Overly complex comprehensions can reduce readability and maintainability of the code. If a comprehension has multiple conditions or nested loops, consider using a regular loop for better clarity.",
            "severity": "Medium",
            "bad_example": "result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]",
            "good_example": "result = []\nfor x in range(10):\n    for y in range(5):\n        if x * y > 10:\n            result.append((x, y))\n",
            "tags": "readability, clean-code, performance, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]",
                    "isCorrect": false
                },
                {
                    "snippet": "result = []\nfor x in range(10):\n    for y in range(5):\n        if x * y > 10:\n            result.append((x, y))\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "376a35b7-e84a-44b7-af28-387ab7751c8d",
            "title": "Use `finally` for Resource Cleanup",
            "rule": "Detect code where resources (files, sockets, etc.) are not closed in a `finally` block. Using `finally` ensures that resources are released, even if an exception is raised.",
            "why_is_this_important": "Failing to close resources like files or sockets can lead to resource leaks and undefined behavior. Using `finally` ensures resources are released even if an error occurs.",
            "severity": "High",
            "bad_example": "file = open(\"test.txt\")\ndata = file.read()",
            "good_example": "try:\n    file = open(\"test.txt\")\n    data = file.read()\nfinally:\n    file.close()\n",
            "tags": "performance, reliability, resource-management, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "file = open(\"test.txt\")\ndata = file.read()",
                    "isCorrect": false
                },
                {
                    "snippet": "try:\n    file = open(\"test.txt\")\n    data = file.read()\nfinally:\n    file.close()\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "704d205a-4831-49b1-89a3-779912d58c7f",
            "title": "Avoid Overuse of Lambda Functions",
            "rule": "Identify lambda functions that are too complex. Lambdas should be simple and concise. If a lambda contains multiple expressions, recommend converting it to a titled function for better readability.",
            "why_is_this_important": "Lambdas are useful for short, simple functions, but complex ones can be harder to read and debug. Use titled functions when more clarity is needed.",
            "severity": "Medium",
            "bad_example": "items.sort(key=lambda x: x[0] * x[1] - x[2] ** 2)",
            "good_example": "def custom_sort_key(item):\n    return item[0] * item[1] - item[2] ** 2\n\nitems.sort(key=custom_sort_key)",
            "tags": "debugging, clean-code, readability, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "items.sort(key=lambda x: x[0] * x[1] - x[2] ** 2)",
                    "isCorrect": false
                },
                {
                    "snippet": "def custom_sort_key(item):\n    return item[0] * item[1] - item[2] ** 2\n\nitems.sort(key=custom_sort_key)",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "33c9776e-1324-44fb-9582-83d2238e1b8d",
            "title": "Avoid Default Mutable Arguments",
            "rule": "Detect function definitions that use mutable objects (lists, dictionaries) as default arguments. This can lead to unintended shared state. Recommend using `None` as the default and initializing the object inside the function.",
            "why_is_this_important": "Using mutable objects as default arguments can lead to unexpected behavior since the same object is shared across function calls. Use `None` as a default and initialize the object inside the function.",
            "severity": "High",
            "bad_example": "def add_item_to_list(item, my_list=[]):\n    my_list.append(item)\n    return my_list\n",
            "good_example": "def add_item_to_list(item, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(item)\n    return my_list\n",
            "tags": "maintainability, debugging, clean-code, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def add_item_to_list(item, my_list=[]):\n    my_list.append(item)\n    return my_list\n",
                    "isCorrect": false
                },
                {
                    "snippet": "def add_item_to_list(item, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(item)\n    return my_list\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a3a2f891-01a7-42e7-9f8d-7792ca460024",
            "title": "Avoid Semicolons",
            "rule": "Check if semicolons are used at the end of statements in Python code. Semicolons are unnecessary and may cause readability issues or errors when multiple statements are placed on one line. Recommend using new lines instead.",
            "why_is_this_important": "Semicolons are unnecessary in Python and can create visual clutter. They may also lead to errors when combining multiple statements on one line. Use new lines instead.",
            "severity": "Medium",
            "bad_example": "x = 1; y = 2; print(x + y)",
            "good_example": "x = 1\ny = 2\nprint(x + y)\n",
            "tags": "readability, clean-code, clarity, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "x = 1; y = 2; print(x + y)",
                    "isCorrect": false
                },
                {
                    "snippet": "x = 1\ny = 2\nprint(x + y)\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a53d2421-7969-428c-a5ab-3991d0d58446",
            "title": "Use Type Annotations for Public APIs",
            "rule": "Ensure that functions in public APIs include type annotations. Type annotations improve code clarity and help catch type-related errors early. Recommend adding them where missing.",
            "why_is_this_important": "Type annotations improve the maintainability and readability of code and help catch type-related errors during development.",
            "severity": "Medium",
            "bad_example": "def add(a, b):\n    return a + b",
            "good_example": "def add(a: int, b: int) -> int:\n    return a + b",
            "tags": "debugging, clean-code, clarity, google",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def add(a, b):\n    return a + b",
                    "isCorrect": false
                },
                {
                    "snippet": "def add(a: int, b: int) -> int:\n    return a + b",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "f3e395c0-36de-4959-bf30-46db154ee103",
            "title": "Call `model.eval()` or `model.train()` After Loading a PyTorch Model",
            "rule": "Verify that after loading a PyTorch model, either `model.eval()` or `model.train()` is called. Failing to do so can result in incorrect behavior, especially for layers like dropout and batch normalization.",
            "why_is_this_important": "When loading a model’s state in PyTorch, failing to set it to training (`train()`) or evaluation (`eval()`) mode can lead to incorrect behavior.",
            "severity": "High",
            "bad_example": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth')) # Noncompliant: model.train() or model.eval() was not called.",
            "good_example": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth'))\nmodel.eval()",
            "tags": "data-science, maintainability, clarity",
            "language": "Python",
            "examples": [
                {
                    "snippet": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth')) # Noncompliant: model.train() or model.eval() was not called.",
                    "isCorrect": false
                },
                {
                    "snippet": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth'))\nmodel.eval()",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4d38958d-7ad0-46d2-8981-eb6d2501b1c2",
            "title": "Prefer `str.replace()` Over `re.sub()` for Simple Cases",
            "rule": "Detect uses of `re.sub()` where regular expressions are not needed. For simple string replacements, `str.replace()` is more efficient and should be used instead.",
            "why_is_this_important": "Using `re.sub()` when no regex features are needed is inefficient. `str.replace()` is faster and should be used for simple string replacements.",
            "severity": "Critical",
            "bad_example": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant",
            "good_example": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")",
            "tags": "performance, efficiency",
            "language": "Python",
            "examples": [
                {
                    "snippet": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "f62bb5e2-d2f3-4969-9dff-8cfadf1d0982",
            "title": "Ensure Function Arguments Match Expected Parameters",
            "rule": "Identify function calls where the number of arguments passed does not match the expected parameters. This often results in a `TypeError`. Suggest reviewing function signatures.",
            "why_is_this_important": "Passing too few or too many arguments to a function causes `TypeError`. This often indicates a mistake in function calls.",
            "severity": "High",
            "bad_example": "",
            "good_example": "",
            "tags": "security, debugging, error-handling",
            "language": "Python",
            "examples": []
        },
        {
            "uuid": "33c45a80-cbfa-4b16-a90f-074b81e06bb3",
            "title": "Prevent Memory Allocation Vulnerabilities",
            "rule": "Check if memory allocation sizes are derived from untrusted input. Attackers may exploit this to crash the program or consume excessive resources. Recommend validating and limiting allocation sizes.",
            "why_is_this_important": "If memory allocation size is determined by untrusted input, attackers can exploit it to crash the program or cause excessive resource usage.",
            "severity": "High",
            "bad_example": "def example():\n    limit = int(request.args.get('limit'))\n\n    data = '#' * limit  # Noncompliant",
            "good_example": "def example():\n    limit = int(request.args.get('limit'))\n    restricted_limit = min(10, limit)\n\n    data = '#' * restricted_limit",
            "tags": "security, owasp",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def example():\n    limit = int(request.args.get('limit'))\n\n    data = '#' * limit  # Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "def example():\n    limit = int(request.args.get('limit'))\n    restricted_limit = min(10, limit)\n\n    data = '#' * restricted_limit",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "2a38dfe5-0510-4ca5-aac1-a0ba185a3221",
            "title": "Ensure `__init__` Does Not Return a Value",
            "rule": "Verify that `__init__` methods always return `None`. Returning any other value causes a `TypeError` and prevents correct object instantiation.",
            "why_is_this_important": "Python’s `__init__` method should always return `None`. Returning anything else will raise a `TypeError` and break object instantiation.",
            "severity": "High",
            "bad_example": "class MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant: a TypeError will be raised",
            "good_example": "class MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'",
            "tags": "maintainability, clean-code",
            "language": "Python",
            "examples": [
                {
                    "snippet": "class MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant: a TypeError will be raised",
                    "isCorrect": false
                },
                {
                    "snippet": "class MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ae5f66f6-5021-40f2-9402-24e417a7e42e",
            "title": "Write One Statement Per Line for Clarity",
            "rule": "Detect multiple statements on the same line, separated by semicolons. This reduces readability and debugging efficiency. Recommend placing each statement on its own line.",
            "why_is_this_important": "Placing multiple statements on the same line makes code harder to read and debug. Keeping one statement per line improves clarity.",
            "severity": "Medium",
            "bad_example": "if (True): print(\"hello\") # Noncompliant",
            "good_example": "if (True):\n    print(\"hello\")",
            "tags": "readability, clean-code",
            "language": "Python",
            "examples": [
                {
                    "snippet": "if (True): print(\"hello\") # Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "if (True):\n    print(\"hello\")",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "f6c30567-b81b-442f-bc57-e35dbcb2f171",
            "title": "Re-raise `SystemExit` and `KeyboardInterrupt`",
            "rule": "Ensure that `SystemExit` and `KeyboardInterrupt` are not caught without being re-raised. Preventing Python from exiting can cause unintended behavior.",
            "why_is_this_important": "Catching and not re-raising `SystemExit` or `KeyboardInterrupt` prevents Python from exiting properly, leading to unexpected behavior.",
            "severity": "Critical",
            "bad_example": "try:\n    ...\nexcept SystemExit:  # Noncompliant: the SystemExit exception is not re-raised.\n    pass\n\ntry:\n    ...\nexcept BaseException:  # Noncompliant: BaseExceptions encompass SystemExit exceptions and should be re-raised.\n    pass\n\ntry:\n    ...\nexcept:  # Noncompliant: exceptions caught by this statement should be re-raised or a more specific exception should be caught.\n    pass",
            "good_example": "try:\n    ...\nexcept SystemExit as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept BaseException as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept FileNotFoundError:\n    ... # Handle a more specific exception",
            "tags": "error-handling, owasp",
            "language": "Python",
            "examples": [
                {
                    "snippet": "try:\n    ...\nexcept SystemExit:  # Noncompliant: the SystemExit exception is not re-raised.\n    pass\n\ntry:\n    ...\nexcept BaseException:  # Noncompliant: BaseExceptions encompass SystemExit exceptions and should be re-raised.\n    pass\n\ntry:\n    ...\nexcept:  # Noncompliant: exceptions caught by this statement should be re-raised or a more specific exception should be caught.\n    pass",
                    "isCorrect": false
                },
                {
                    "snippet": "try:\n    ...\nexcept SystemExit as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept BaseException as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept FileNotFoundError:\n    ... # Handle a more specific exception",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "f208a7fa-fb12-4b71-ba3f-8d10b746fd0b",
            "title": "Only Catch Exceptions That Derive from `BaseException`",
            "rule": "Detect exception handling blocks that catch objects not derived from `BaseException`. This causes a `TypeError` and should be avoided.",
            "why_is_this_important": "Catching objects that don’t inherit from `BaseException` causes a `TypeError`. Only valid exception classes should be caught.",
            "severity": "Critical",
            "bad_example": "class CustomException(object):\n    \"\"\"An Invalid exception class.\"\"\"\n    pass\n\ntry:\n    ...\nexcept CustomException:  # Noncompliant: this custom exception does not derive from BaseException or Exception.\n    print(\"exception\")\n\ntry:\n    ...\nexcept [TypeError, ValueError]:  # Noncompliant: list of exceptions, only tuples are valid.\n    print(\"exception\")",
            "good_example": "class CustomException(Exception):\n    pass\n\ntry:\n    ...\nexcept CustomException:\n    print(\"exception\")\n\ntry:\n    ...\nexcept (TypeError, ValueError):\n    print(\"exception\")",
            "tags": "error-handling, debugging, owasp",
            "language": "Python",
            "examples": [
                {
                    "snippet": "class CustomException(object):\n    \"\"\"An Invalid exception class.\"\"\"\n    pass\n\ntry:\n    ...\nexcept CustomException:  # Noncompliant: this custom exception does not derive from BaseException or Exception.\n    print(\"exception\")\n\ntry:\n    ...\nexcept [TypeError, ValueError]:  # Noncompliant: list of exceptions, only tuples are valid.\n    print(\"exception\")",
                    "isCorrect": false
                },
                {
                    "snippet": "class CustomException(Exception):\n    pass\n\ntry:\n    ...\nexcept CustomException:\n    print(\"exception\")\n\ntry:\n    ...\nexcept (TypeError, ValueError):\n    print(\"exception\")",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "adb93e61-1f79-4af7-8384-68c5a74a1602",
            "title": "Don’t Create Exceptions Without Raising Them",
            "rule": "Identify instances where an exception object is created but never raised. This is likely an oversight and should either be removed or properly raised.",
            "why_is_this_important": "Creating an exception without raising it does nothing and is likely an oversight. It should be removed or properly raised.",
            "severity": "Critical",
            "bad_example": "def func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x < 0:\n        ValueError  # Noncompliant\n    return x + 42",
            "good_example": "def func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x < 0:\n        raise ValueError\n    return x + 42",
            "tags": "error-handling, debugging",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x < 0:\n        ValueError  # Noncompliant\n    return x + 42",
                    "isCorrect": false
                },
                {
                    "snippet": "def func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x < 0:\n        raise ValueError\n    return x + 42",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3b33ae8f-3fae-4771-b778-8b812cbef3bc",
            "title": "Avoid Using Boolean Expressions in `except` Statements",
            "rule": "Detect `except` clauses that use `or` or `and` to catch multiple exceptions. This does not work as intended. Recommend using a tuple of exceptions instead.",
            "why_is_this_important": "Using `or`/`and` with exceptions in `except` blocks doesn’t work as expected and can lead to unintended behavior. Use tuples instead.",
            "severity": "Critical",
            "bad_example": "try:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"Catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError",
            "good_example": "try:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching ValueError and TypeError\")",
            "tags": "error-handling, debugging",
            "language": "Python",
            "examples": [
                {
                    "snippet": "try:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"Catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError",
                    "isCorrect": false
                },
                {
                    "snippet": "try:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching ValueError and TypeError\")",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "622ba238-8a74-4e12-85cf-8d128aefa564",
            "title": "Ensure `__all__` Contains Only Defined Names",
            "rule": "Check if the `__all__` list in a module contains titles that are not defined. Listing undefined titles can cause `ImportError` when performing wildcard imports.",
            "why_is_this_important": "The `__all__` variable should only list valid module attributes. Listing undefined titles can cause `ImportError` when using wildcard imports.",
            "severity": "High",
            "bad_example": "from mymodule import my_func\n\n__all__ = [\"unknown_func\"]  # Noncompliant: \"unknown_func\" is undefined",
            "good_example": "from mymodule import my_func\n\n__all__ = [\"my_func\"]",
            "tags": "reliability, maintainability",
            "language": "Python",
            "examples": [
                {
                    "snippet": "from mymodule import my_func\n\n__all__ = [\"unknown_func\"]  # Noncompliant: \"unknown_func\" is undefined",
                    "isCorrect": false
                },
                {
                    "snippet": "from mymodule import my_func\n\n__all__ = [\"my_func\"]",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4e382ca3-55cf-45fa-bc17-d21570b92da0",
            "title": "Ensure Special Methods Have the Correct Parameters",
            "rule": "Verify that special methods (e.g., `__eq__`, `__len__`) have the correct number of parameters. Incorrect parameters can cause runtime errors or unexpected behavior.",
            "why_is_this_important": "Magic methods (like `__eq__`, `__len__`, etc.) must have the right number of parameters. Otherwise, they won’t work as expected and may cause runtime errors.",
            "severity": "High",
            "bad_example": "class A:\n    def __mul__(self, other, unexpected):  # Noncompliant: too many parameters\n        return 42\n\n    def __add__(self):  # Noncompliant: missing one parameter\n        return 42\n\nA() * 3  # TypeError: __mul__() missing 1 required positional argument: 'unexpected'\nA() + 3  # TypeError: __add__() takes 1 positional argument but 2 were given",
            "good_example": "class A:\n    def __mul__(self, other):\n        return 42\n\n    def __add__(self, other):\n        return 42\n\nA() * 3\nA() + 3",
            "tags": "reliability, maintainability",
            "language": "Python",
            "examples": [
                {
                    "snippet": "class A:\n    def __mul__(self, other, unexpected):  # Noncompliant: too many parameters\n        return 42\n\n    def __add__(self):  # Noncompliant: missing one parameter\n        return 42\n\nA() * 3  # TypeError: __mul__() missing 1 required positional argument: 'unexpected'\nA() + 3  # TypeError: __add__() takes 1 positional argument but 2 were given",
                    "isCorrect": false
                },
                {
                    "snippet": "class A:\n    def __mul__(self, other):\n        return 42\n\n    def __add__(self, other):\n        return 42\n\nA() * 3\nA() + 3",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "9d21a8a4-ec0d-48f9-96c1-859547d4552e",
            "title": "Ensure Functions Use `return` Consistently",
            "rule": "Detect functions that mix `return` statements with values and those without. Inconsistent return usage can lead to unpredictable behavior.",
            "why_is_this_important": "Mixing `return` statements that return values with those that don’t can lead to confusing, unpredictable behavior.",
            "severity": "High",
            "bad_example": "def foo(a): # Noncompliant, function will return \"true\" or None\n  if a == 1:\n    return True\n  return",
            "good_example": "def foo(a):\n  if a == 1:\n    return True\n  return False",
            "tags": "reliability, clean-code",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def foo(a): # Noncompliant, function will return \"true\" or None\n  if a == 1:\n    return True\n  return",
                    "isCorrect": false
                },
                {
                    "snippet": "def foo(a):\n  if a == 1:\n    return True\n  return False",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d985b3c6-83df-441a-8b5e-346a185bb680",
            "title": "Avoid Functions That Always Return the Same Value",
            "rule": "Identify functions that return the same value regardless of input. This may indicate poor design or a logic error.",
            "why_is_this_important": "If a function always returns the same value regardless of input, it may indicate poor design or a logic error.",
            "severity": "High",
            "bad_example": "def foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b",
            "good_example": "",
            "tags": "reliability, clean-code",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "e90fdcbf-6727-4635-bbfa-12999ac70765",
            "title": "Ensure All Used Variables, Classes, and Functions Are Defined",
            "rule": "Check for variables, functions, or classes that are used but not defined. This results in `NameError` and should be fixed by ensuring all symbols are properly declared.",
            "why_is_this_important": "Using undefined variables, functions, or classes leads to `NameError` and prevents code from running.",
            "severity": "Medium",
            "bad_example": "my_var # Noncompliant (variable is never defined)\n\ndef noncompliant():\n    foo()  # Noncompliant\n    MyClass()  # Noncompliant",
            "good_example": "from mod import my_var\n\nmy_var\n\ndef compliant():\n    foo = sum\n    foo()\n\n    class MyClass:\n        pass\n    MyClass()",
            "tags": "security, debugging, owasp",
            "language": "Python",
            "examples": [
                {
                    "snippet": "my_var # Noncompliant (variable is never defined)\n\ndef noncompliant():\n    foo()  # Noncompliant\n    MyClass()  # Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "from mod import my_var\n\nmy_var\n\ndef compliant():\n    foo = sum\n    foo()\n\n    class MyClass:\n        pass\n    MyClass()",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "1c0c835c-c8d7-43eb-ac3f-24cc10fe0b74",
            "title": "Avoid Confusing Implicit String Concatenation",
            "rule": "Detect missing commas in lists, tuples, or dictionaries that unintentionally concatenate strings. This can lead to unexpected behavior and hard-to-find bugs.",
            "why_is_this_important": "Accidental string concatenation can happen when missing commas in lists, tuples, or dictionaries, leading to unexpected bugs.",
            "severity": "High",
            "bad_example": "def func():\n    return \"item1\" \"item2\"  # Noncompliant: a comma is missing to return a tuple.\n\n[\"1\"  # Noncompliant: a comma is missing.\n \"2\",\n \"a very\"  # Noncompliant: a \"+\" is missing.\n \"long string\"]",
            "good_example": "def func():\n    return \"item1\", \"item2\"\n\n[\"1\",\n \"2\",\n \"a very\" +\n \"long string\"]",
            "tags": "security, clarity, debugging",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def func():\n    return \"item1\" \"item2\"  # Noncompliant: a comma is missing to return a tuple.\n\n[\"1\"  # Noncompliant: a comma is missing.\n \"2\",\n \"a very\"  # Noncompliant: a \"+\" is missing.\n \"long string\"]",
                    "isCorrect": false
                },
                {
                    "snippet": "def func():\n    return \"item1\", \"item2\"\n\n[\"1\",\n \"2\",\n \"a very\" +\n \"long string\"]",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a03dc1d3-7b94-42e6-8b43-7a5860c09d18",
            "title": "Avoid Redundant `None` Comparisons",
            "rule": "Identify cases where `x is None` or `x is not None` is used redundantly when `x` is always or never `None`. This may indicate a deeper logic issue.",
            "why_is_this_important": "Checking `x is None` when `x` is always `None` (or never `None`) is unnecessary and may indicate a deeper logic issue.",
            "severity": "Critical",
            "bad_example": "def foo():\n    my_var = None\n    if my_var == None:  # Noncompliant: always True.\n        ...",
            "good_example": "def foo(my_var):\n    if my_var == None:\n        ...",
            "tags": "debugging, clarity",
            "language": "Python",
            "examples": [
                {
                    "snippet": "def foo():\n    my_var = None\n    if my_var == None:  # Noncompliant: always True.\n        ...",
                    "isCorrect": false
                },
                {
                    "snippet": "def foo(my_var):\n    if my_var == None:\n        ...",
                    "isCorrect": true
                }
            ]
        }
    ],
    "JAVA": [
        {
            "uuid": "bdd904ec-0cbc-4ad7-909f-87222cc57705",
            "title": "Avoid Wildcard Imports",
            "rule": "Ensure that imports are explicitly listed and avoid using wildcard imports (`import package.*;`).",
            "why_is_this_important": "Wildcard imports (`import package.*;`) can lead to ambiguity, increase compilation time, and introduce unintended dependencies. Explicit imports improve readability and maintainability.",
            "severity": "Medium",
            "bad_example": "import java.util.*;",
            "good_example": "import java.util.List;\nimport java.util.Map;",
            "tags": "maintainability, google",
            "examples": [
                {
                    "snippet": "import java.util.*;",
                    "isCorrect": false
                },
                {
                    "snippet": "import java.util.List;\nimport java.util.Map;",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d1829290-d3c9-405a-a1f7-1d1bb138e044",
            "title": "Always Use Braces for Single Statements",
            "rule": "Ensure that all control structures (if, for, while) use braces `{}` even for single statements.",
            "why_is_this_important": "Omitting braces in control structures (if, for, while) can cause logical errors when modifying the code later. Always using braces improves code clarity and prevents unintended execution flows.",
            "severity": "High",
            "bad_example": "if (condition) doSomething();",
            "good_example": "if (condition) {\n    doSomething();\n}",
            "tags": "maintainability, google",
            "examples": [
                {
                    "snippet": "if (condition) doSomething();",
                    "isCorrect": false
                },
                {
                    "snippet": "if (condition) {\n    doSomething();\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ffc51d92-643e-4730-8b43-2e1e198f2578",
            "title": "Limit Line Length to 100 Characters",
            "rule": "Ensure that no line exceeds 100 characters in length to maintain readability.",
            "why_is_this_important": "Lines longer than 100 characters reduce readability, make code harder to review, and complicate side-by-side comparisons in version control.",
            "severity": "Low",
            "bad_example": "String longString = \"This is an example of a very long line of code that exceeds 100 characters\";",
            "good_example": "String longString = \"This is an example of a very long line of code \" +\n                  \"that is split into multiple lines.\";",
            "tags": "maintainability, google",
            "examples": [
                {
                    "snippet": "String longString = \"This is an example of a very long line of code that exceeds 100 characters\";",
                    "isCorrect": false
                },
                {
                    "snippet": "String longString = \"This is an example of a very long line of code \" +\n                  \"that is split into multiple lines.\";",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fbe41506-e466-425b-b09a-1139b11ecdaa",
            "title": "Use @Override for Method Overrides",
            "rule": "Ensure that all overridden methods explicitly use the `@Override` annotation.",
            "why_is_this_important": "Omitting `@Override` when overriding methods can lead to accidental method overloading instead of overriding, causing subtle bugs.",
            "severity": "Medium",
            "bad_example": "public void equals(Object obj) {\n    // Incorrect override\n}",
            "good_example": "@Override\npublic void equals(Object obj) {\n    // Correct override\n}",
            "tags": "maintainability, performance, google",
            "examples": [
                {
                    "snippet": "public void equals(Object obj) {\n    // Incorrect override\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "@Override\npublic void equals(Object obj) {\n    // Correct override\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6bc52828-f4d8-4b1f-a68a-dc924ae74c78",
            "title": "Do Not Ignore Caught Exceptions",
            "rule": "Ensure that all caught exceptions are either logged or handled properly. Empty catch blocks are not allowed.",
            "why_is_this_important": "Ignoring exceptions by leaving catch blocks empty can suppress important errors, making debugging difficult and potentially leading to unexpected failures.",
            "severity": "High",
            "bad_example": "try {\n    someMethod();\n} catch (Exception e) {\n    // Do nothing\n}",
            "good_example": "try {\n    someMethod();\n} catch (Exception e) {\n    log.error(\"Exception occurred\", e);\n}",
            "tags": "debugging, reliability, google",
            "examples": [
                {
                    "snippet": "try {\n    someMethod();\n} catch (Exception e) {\n    // Do nothing\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "try {\n    someMethod();\n} catch (Exception e) {\n    log.error(\"Exception occurred\", e);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "0acdd67c-efe7-4df9-98df-5e06424fd7ba",
            "title": "Declare Variables Separately",
            "rule": "Ensure that each variable is declared separately instead of using multiple declarations in one statement.",
            "why_is_this_important": "Declaring multiple variables in one statement reduces readability and increases the risk of errors, especially when initializing complex objects.",
            "severity": "Low",
            "bad_example": "int a, b, c;",
            "good_example": "int a;\nint b;\nint c;",
            "tags": "maintainability, google",
            "examples": [
                {
                    "snippet": "int a, b, c;",
                    "isCorrect": false
                },
                {
                    "snippet": "int a;\nint b;\nint c;",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "313a5858-e91e-4762-b9c8-83f0964475ce",
            "title": "Use `final` for Constants",
            "rule": "Ensure that constants are declared with the `final` keyword to prevent modification.",
            "why_is_this_important": "Constants should be declared with `final` to prevent unintended modifications, ensuring immutability and safer code.",
            "severity": "High",
            "bad_example": "static int MAX_VALUE = 100;",
            "good_example": "static final int MAX_VALUE = 100;",
            "tags": "maintainability, reliability, google",
            "examples": [
                {
                    "snippet": "static int MAX_VALUE = 100;",
                    "isCorrect": false
                },
                {
                    "snippet": "static final int MAX_VALUE = 100;",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8553655e-b82f-446b-bd72-80df6f3efe82",
            "title": "Maintain Consistent Annotation Placement",
            "rule": "Ensure that annotations are placed consistently before or after modifiers throughout the codebase.",
            "why_is_this_important": "Inconsistent annotation placement (before or after modifiers) reduces readability and can cause confusion when following coding conventions.",
            "severity": "Medium",
            "bad_example": "@Override public void someMethod() { ... }",
            "good_example": "@Override\npublic void someMethod() { ... }",
            "tags": "maintainability, google",
            "examples": [
                {
                    "snippet": "@Override public void someMethod() { ... }",
                    "isCorrect": false
                },
                {
                    "snippet": "@Override\npublic void someMethod() { ... }",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "269aa151-63d7-4235-aab0-20b8ed3f1a64",
            "title": "Avoid Empty Catch Blocks",
            "rule": "Ensure that catch blocks contain meaningful exception handling logic and do not remain empty.",
            "why_is_this_important": "Empty catch blocks swallow exceptions, making it difficult to diagnose issues. Instead, log the exception or handle it appropriately.",
            "severity": "High",
            "bad_example": "try {\n    process();\n} catch (IOException e) {}",
            "good_example": "try {\n    process();\n} catch (IOException e) {\n    log.error(\"Error processing\", e);\n}",
            "tags": "maintainability, reliability, google",
            "examples": [
                {
                    "snippet": "try {\n    process();\n} catch (IOException e) {}",
                    "isCorrect": false
                },
                {
                    "snippet": "try {\n    process();\n} catch (IOException e) {\n    log.error(\"Error processing\", e);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fde0e6b3-0acd-4274-8dd8-7337aab40922",
            "title": "Avoid Using `Object.finalize()`",
            "rule": "Ensure that the `finalize()` method is not used. Use try-with-resources or explicit cleanup methods instead.",
            "why_is_this_important": "Finalizers are deprecated, unreliable, and can cause performance issues. Use try-with-resources or explicit cleanup methods instead.",
            "severity": "High",
            "bad_example": "@Override\nprotected void finalize() {\n    // Cleanup logic\n}",
            "good_example": "// Use try-with-resources or explicit cleanup instead",
            "tags": "performance, reliability, google",
            "examples": [
                {
                    "snippet": "@Override\nprotected void finalize() {\n    // Cleanup logic\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "// Use try-with-resources or explicit cleanup instead",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4b36d8bc-40a2-4c83-8954-d1e4004429ad",
            "title": "Use Try-With-Resources for Resource Management",
            "rule": "Ensure that resources such as streams or file handlers are managed using try-with-resources to avoid leaks.",
            "why_is_this_important": "Failing to use try-with-resources can lead to resource leaks, as manually closing resources is error-prone and harder to maintain.",
            "severity": "Medium",
            "bad_example": "FileInputStream fis = new FileInputStream(\"file.txt\");\ntry {\n    // Read file\n} finally {\n    fis.close();\n}",
            "good_example": "try (FileInputStream fis = new FileInputStream(\"file.txt\")) {\n    // Read file\n}",
            "tags": "performance, security, google",
            "examples": [
                {
                    "snippet": "FileInputStream fis = new FileInputStream(\"file.txt\");\ntry {\n    // Read file\n} finally {\n    fis.close();\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "try (FileInputStream fis = new FileInputStream(\"file.txt\")) {\n    // Read file\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4288b1bb-5220-4c44-b0a8-3c7faa152a8c",
            "title": "Declare Variables Near Their First Use",
            "rule": "Ensure that variables are declared as close as possible to their first use to improve readability.",
            "why_is_this_important": "Declaring variables far from their usage reduces clarity and makes it harder to track their purpose, leading to maintainability issues.",
            "severity": "Low",
            "bad_example": "int result;\n// Many lines of code\nresult = computeResult();",
            "good_example": "int result = computeResult();",
            "tags": "maintainability, google",
            "examples": [
                {
                    "snippet": "int result;\n// Many lines of code\nresult = computeResult();",
                    "isCorrect": false
                },
                {
                    "snippet": "int result = computeResult();",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3d0cfe31-ffe7-4a84-ac78-33c873c11101",
            "title": "Properly Initialize Hash-Based Collections",
            "rule": "Ensure that `HashMap` and `HashSet` are initialized with appropriate capacity settings to optimize performance.",
            "why_is_this_important": "Hash-based collections (e.g., `HashMap`, `HashSet`) should be initialized with proper capacity settings to avoid unnecessary resizing and performance overhead.",
            "severity": "High",
            "bad_example": "private static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map<String, Integer> buildAMap() {\n    return new HashMap<>(KNOWN_CAPACITY); // Noncompliant\n}\n\npublic static Set<String> buildASet() {\n    return new HashSet<>(KNOWN_CAPACITY); // Noncompliant\n}",
            "good_example": "private static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map<String, Integer> buildABetterMap() {\n    return HashMap.newHashMap(KNOWN_CAPACITY);\n}\n\npublic static Set<String> buildABetterSet() {\n    return HashSet.newHashSet(KNOWN_CAPACITY);\n}\n\npublic static Set<String> buildABetterSet(float customLoadFactor) {\n    return new HashSet<>(KNOWN_CAPACITY, customLoadFactor);\n}",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "private static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map<String, Integer> buildAMap() {\n    return new HashMap<>(KNOWN_CAPACITY); // Noncompliant\n}\n\npublic static Set<String> buildASet() {\n    return new HashSet<>(KNOWN_CAPACITY); // Noncompliant\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "private static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map<String, Integer> buildABetterMap() {\n    return HashMap.newHashMap(KNOWN_CAPACITY);\n}\n\npublic static Set<String> buildABetterSet() {\n    return HashSet.newHashSet(KNOWN_CAPACITY);\n}\n\npublic static Set<String> buildABetterSet(float customLoadFactor) {\n    return new HashSet<>(KNOWN_CAPACITY, customLoadFactor);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "0f7998b5-3438-45b3-a07e-2d4fd6080c44",
            "title": "Use `String.replace()` Instead of `String.replaceAll()` for Simple Replacements",
            "rule": "Ensure that `String.replace()` is used when a simple string replacement is needed instead of `String.replaceAll()`.",
            "why_is_this_important": "`String.replaceAll()` compiles a regex pattern every time it is called, even if no regex is needed, leading to unnecessary performance overhead.",
            "severity": "Critical",
            "bad_example": "String init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replaceAll(\"Bob is\", \"It's\"); // Noncompliant\nchanged = changed.replaceAll(\"\\\\.\\\\.\\\\.\", \";\"); // Noncompliant",
            "good_example": "String init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replace(\"Bob is\", \"It's\");\nchanged = changed.replace(\"...\", \";\");",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "String init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replaceAll(\"Bob is\", \"It's\"); // Noncompliant\nchanged = changed.replaceAll(\"\\\\.\\\\.\\\\.\", \";\"); // Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "String init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replace(\"Bob is\", \"It's\");\nchanged = changed.replace(\"...\", \";\");",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "26aa5cc6-ada1-450e-b5e8-126adf0ee5fe",
            "title": "Ensure `ThreadLocal` Variables Are Properly Cleaned",
            "rule": "Ensure that `ThreadLocal` variables are cleaned using `.remove()` to avoid memory leaks.",
            "why_is_this_important": "Failing to clean up `ThreadLocal` variables can cause memory leaks in long-running applications, especially when using thread pools.",
            "severity": "High",
            "bad_example": "public class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal<UserSession> DELEGATE = new ThreadLocal<>();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n   public void incorrectCleanup() {\n     DELEGATE.set(null); // Noncompliant\n   }\n\n  // some other methods without a call to DELEGATE.remove()\n}",
            "good_example": "public class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal<UserSession> DELEGATE = new ThreadLocal<>();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n  public void unload() {\n    DELEGATE.remove(); // Compliant\n  }\n\n  // ...\n}",
            "tags": "performance, security, reliability",
            "examples": [
                {
                    "snippet": "public class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal<UserSession> DELEGATE = new ThreadLocal<>();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n   public void incorrectCleanup() {\n     DELEGATE.set(null); // Noncompliant\n   }\n\n  // some other methods without a call to DELEGATE.remove()\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal<UserSession> DELEGATE = new ThreadLocal<>();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n  public void unload() {\n    DELEGATE.remove(); // Compliant\n  }\n\n  // ...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6e49355d-dc48-483b-9d88-24ed9460b3d0",
            "title": "Override `read(byte[], int, int)` in InputStream Subclasses",
            "rule": "Ensure that the `read(byte[], int, int)` method is overridden in `InputStream` subclasses to improve efficiency.",
            "why_is_this_important": "The default implementation of `read(byte[], int, int)` calls `read()` for every byte, leading to poor performance. Overriding this method improves efficiency.",
            "severity": "",
            "bad_example": "public class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}",
            "good_example": "public class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "public class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "01f09fd9-8d0e-4368-a551-a9d49ab75c7a",
            "title": "Prefer Offset-Based String Methods",
            "rule": "Ensure that offset-based string methods are used instead of creating unnecessary substring instances.",
            "why_is_this_important": "Using `str.substring(beginIndex).indexOf(char1)` creates unnecessary temporary strings. Use index methods with an offset parameter instead to improve performance.",
            "severity": "Critical",
            "bad_example": "str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"",
            "good_example": "str.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"",
                    "isCorrect": false
                },
                {
                    "snippet": "str.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "10eb2d6f-233d-4234-9d72-3692d8023bac",
            "title": "Use `Arrays.stream()` for Primitive Arrays",
            "rule": "Ensure that `Arrays.stream(array)` is used instead of `Arrays.asList(T... a).stream()` for primitive arrays.",
            "why_is_this_important": "`Arrays.asList(T... a).stream()` boxes primitive types unnecessarily, while `Arrays.stream(array)` directly creates the appropriate primitive stream type, improving performance.",
            "severity": "High",
            "bad_example": "Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);",
            "good_example": "Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);",
                    "isCorrect": false
                },
                {
                    "snippet": "Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "097b066b-7bdf-446f-a169-d3dcb689c754",
            "title": "Use Factory Method Injection in `@Configuration` Classes",
            "rule": "Ensure that factory method injection is used in `@Configuration` classes instead of `@Autowired` field injection.",
            "why_is_this_important": "Using `@Autowired` field injection can lead to early initialization issues. Factory method injection ensures dependencies are resolved only when needed.",
            "severity": "Critical",
            "bad_example": "@Configuration\npublic class  FooConfiguration {\n\n  @Autowired private  DataSource dataSource ;  // Noncompliant\n\n  @Bean\n  public  MyService myService() {\n    return new  MyService(this .dataSource );\n  }\n}",
            "good_example": "@Configuration\npublic class  FooConfiguration {\n\n @Bean\n  public  MyService myService(DataSource dataSource) {\n    return new  MyService(dataSource);\n  }\n}",
            "tags": "performance, maintainability, spring",
            "examples": [
                {
                    "snippet": "@Configuration\npublic class  FooConfiguration {\n\n  @Autowired private  DataSource dataSource ;  // Noncompliant\n\n  @Bean\n  public  MyService myService() {\n    return new  MyService(this .dataSource );\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "@Configuration\npublic class  FooConfiguration {\n\n @Bean\n  public  MyService myService(DataSource dataSource) {\n    return new  MyService(dataSource);\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "56c5722a-12f6-4039-a064-c3f921be2a80",
            "title": "Combine Multiple Loops Over the Same Collection",
            "rule": "Ensure that multiple loops over the same collection are combined into a single loop to improve efficiency.",
            "why_is_this_important": "Iterating over the same collection multiple times in separate loops is inefficient. Combining them reduces execution time and improves performance.",
            "severity": "Low",
            "bad_example": "public void doSomethingToAList(List<String> strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}",
            "good_example": "public void doSomethingToAList(List<String> strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "public void doSomethingToAList(List<String> strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public void doSomethingToAList(List<String> strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "c75c3bab-468f-4e13-9068-6dc6f25fac31",
            "title": "Use `entrySet()` When Iterating Over Maps",
            "rule": "Ensure that `entrySet()` is used instead of iterating over `keySet()` and calling `get(key)`, to optimize performance.",
            "why_is_this_important": "Iterating over `keySet()` and then calling `get(key)` leads to unnecessary lookups. Using `entrySet()` retrieves both key and value in a single operation, improving efficiency.",
            "severity": "High",
            "bad_example": "public void doSomethingWithMap(Map<String,Object> map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}",
            "good_example": "public void doSomethingWithMap(Map<String,Object> map) {\n  for (Map.Entry<String,Object> entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "public void doSomethingWithMap(Map<String,Object> map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public void doSomethingWithMap(Map<String,Object> map) {\n  for (Map.Entry<String,Object> entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "446aeb41-fdb0-4ea1-8474-44e6d4e98239",
            "title": "Avoid Using `deleteOnExit()`",
            "rule": "Ensure that `File.deleteOnExit()` is not used, as it can cause memory and resource leaks.",
            "why_is_this_important": "`File.deleteOnExit()` only deletes files on a normal JVM shutdown, and memory associated with handlers is released only at the end of the process, which can cause resource leaks.",
            "severity": "High",
            "bad_example": "File file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant",
            "good_example": "",
            "tags": "performance, security",
            "examples": [
                {
                    "snippet": "File file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "33f537e3-9eb7-48fd-ae45-671e79fba2cb",
            "title": "Avoid Expensive Preconditions and Logging Arguments",
            "rule": "Ensure that logging arguments and preconditions do not require costly evaluations before method calls.",
            "why_is_this_important": "Preconditions and logging arguments should not require costly evaluations. Using precomputed values prevents unnecessary performance overhead, especially for logging.",
            "severity": "High",
            "bad_example": "logger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a > 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a > 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant",
            "good_example": "logger.log(Level.DEBUG, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\nlogger.log(Level.SEVERE, () -> \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled()) {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg > 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "logger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a > 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a > 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "logger.log(Level.DEBUG, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\nlogger.log(Level.SEVERE, () -> \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled()) {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg > 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "9ea667b8-5097-4544-abbb-689584adc413",
            "title": "Avoid Creating Objects Just to Call `getClass()`",
            "rule": "Ensure that objects are not created solely for calling `getClass()`. Use `ClassName.class` instead.",
            "why_is_this_important": "Creating an object solely to call `getClass()` wastes memory and CPU cycles. Use `ClassName.class` instead.",
            "severity": "High",
            "bad_example": "MyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();",
            "good_example": "Class c = MyObject.class;",
            "tags": "performance, maintainability",
            "examples": [
                {
                    "snippet": "MyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();",
                    "isCorrect": false
                },
                {
                    "snippet": "Class c = MyObject.class;",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "89ca18bf-df36-4c81-a74c-ff7691b962b5",
            "title": "Do Not Call `wait()` When Holding Multiple Locks",
            "rule": "Ensure that `wait()` is not called while holding multiple locks to prevent deadlocks.",
            "why_is_this_important": "Calling `wait()` while holding multiple locks can cause deadlocks if no other thread tries to acquire the awaited object. Always release locks before calling `wait()`.",
            "severity": "Critical",
            "bad_example": "synchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock & release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}",
            "good_example": "",
            "tags": "reliability, security",
            "examples": [
                {
                    "snippet": "synchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock & release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "114564cb-fc9d-450f-bd6e-c4384fa65c31",
            "title": "Avoid Equality Operators in Loop Termination Conditions",
            "rule": "Ensure that relational operators (`<`, `>`) are used instead of equality operators (`==`, `!=`) in loop termination conditions.",
            "why_is_this_important": "Using `==` or `!=` in loop termination conditions can lead to infinite loops due to floating-point precision errors or unexpected comparisons. Prefer relational operators (`<`, `>`) instead.",
            "severity": "Critical",
            "bad_example": "for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
            "good_example": "for (int i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
            "tags": "cwe, maintainability, reliability",
            "examples": [
                {
                    "snippet": "for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "for (int i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ddd19b01-ec5d-4541-924b-f16c722dd929",
            "title": "Prevent Server-Side Request Path Traversal Attacks",
            "rule": "Ensure that all user inputs related to file paths are validated and sanitized to prevent path traversal attacks.",
            "why_is_this_important": "Path traversal attacks exploit server-side request handling to access unauthorized resources. Always validate and sanitize request paths to prevent unauthorized access.",
            "severity": "Critical",
            "bad_example": "@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    URL url = new URL(\"http://example.com/api/user/\" + id); // Noncompliant\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}",
            "good_example": "import java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\n@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    String encodedId = URLEncoder.encode(id, StandardCharsets.UTF_8);\n    URL url = new URL(\"http://example.com/api/user/?id=\" + encodedId);\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    URL url = new URL(\"http://example.com/api/user/\" + id); // Noncompliant\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "import java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\n@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    String encodedId = URLEncoder.encode(id, StandardCharsets.UTF_8);\n    URL url = new URL(\"http://example.com/api/user/?id=\" + encodedId);\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "0cde2d0b-b6bd-40be-b3a0-d745f35c6043",
            "title": "Prevent Filesystem Oracle Attacks",
            "rule": "Ensure that the application does not disclose file existence based on user input to prevent filesystem oracle attacks.",
            "why_is_this_important": "Applications that disclose file existence based on user input can be exploited to infer filesystem structure. Ensure user input is properly validated and sanitized.",
            "severity": "Critical",
            "bad_example": "import java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void delete(@RequestParam(\"filetitle\") String filetitle) throws IOException {\n\n        File file = new File(targetDirectory + filetitle);\n        if (!file.exists()) { // Noncompliant\n            throw new IOException(\"File does not exists in the target directory\");\n        }\n    }\n}",
            "good_example": "import java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void delete(@RequestParam(\"filetitle\") String filetitle) throws IOException {\n\n        File file = new File(targetDirectory + filetitle);\n        String canonicalDestinationPath = file.getCanonicalPath();\n\n        if (!canonicalDestinationPath.startsWith(targetDirectory)) {\n            throw new IOException(\"Entry is outside of the target directory\");\n        } else if (!file.exists()) {\n            throw new IOException(\"File does not exists in the target directory\");\n        }\n    }\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "import java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void delete(@RequestParam(\"filetitle\") String filetitle) throws IOException {\n\n        File file = new File(targetDirectory + filetitle);\n        if (!file.exists()) { // Noncompliant\n            throw new IOException(\"File does not exists in the target directory\");\n        }\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "import java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void delete(@RequestParam(\"filetitle\") String filetitle) throws IOException {\n\n        File file = new File(targetDirectory + filetitle);\n        String canonicalDestinationPath = file.getCanonicalPath();\n\n        if (!canonicalDestinationPath.startsWith(targetDirectory)) {\n            throw new IOException(\"Entry is outside of the target directory\");\n        } else if (!file.exists()) {\n            throw new IOException(\"File does not exists in the target directory\");\n        }\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d96ecbef-2f69-4605-9183-84e324808417",
            "title": "Do Not Define Environment Variables from Untrusted Input",
            "rule": "Ensure that external user input is properly sanitized before being used to define environment variables.",
            "why_is_this_important": "Environment variable injection can allow attackers to manipulate system behavior, affecting sensitive paths like `PATH` or `LD_PRELOAD`. Always sanitize external input before using it.",
            "severity": "Critical",
            "bad_example": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null) {\n    String[] envs = {userInput};\n    r.exec(\"/path/to/example\", userInput);\n  } else{\n    r.exec(\"/path/to/example\");\n  }\n}",
            "good_example": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null && userInput.matches(\"^[a-zA-Z0-9]*$\")) {\n    String[] envs = {\"ENV_VAR=%s\".format(userInput)};\n    r.exec(\"/path/to/example\", envs);\n  } else {\n    r.exec(\"/path/to/example\");\n  }\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null) {\n    String[] envs = {userInput};\n    r.exec(\"/path/to/example\", userInput);\n  } else{\n    r.exec(\"/path/to/example\");\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null && userInput.matches(\"^[a-zA-Z0-9]*$\")) {\n    String[] envs = {\"ENV_VAR=%s\".format(userInput)};\n    r.exec(\"/path/to/example\", envs);\n  } else {\n    r.exec(\"/path/to/example\");\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fffcbad8-819c-4a66-9ecd-4878f5cd0507",
            "title": "Prevent Thread Suspension from Leading to Denial of Service (DoS)",
            "rule": "Ensure that user-controlled data is not used to suspend threads, as it can lead to Denial of Service (DoS) attacks.",
            "why_is_this_important": "Using user-controlled data as a parameter for thread suspension can be exploited to cause Denial of Service (DoS) attacks by exhausting available threads.",
            "severity": "Critical",
            "bad_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        Long time = Long.parseLong(req.getParameter(\"time\"));\n        try {\n            Thread.sleep(time); // Noncompliant\n        } catch (InterruptedException e) {\n            resp.sendError(500);\n        }\n    }",
            "good_example": "protected void compliant(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        Long time = Long.parseLong(req.getParameter(\"time\"));\n        try {\n            Thread.sleep(Math.min(time, 1000));\n        } catch (InterruptedException e) {\n            resp.sendError(500);\n        }\n    }",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        Long time = Long.parseLong(req.getParameter(\"time\"));\n        try {\n            Thread.sleep(time); // Noncompliant\n        } catch (InterruptedException e) {\n            resp.sendError(500);\n        }\n    }",
                    "isCorrect": false
                },
                {
                    "snippet": "protected void compliant(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        Long time = Long.parseLong(req.getParameter(\"time\"));\n        try {\n            Thread.sleep(Math.min(time, 1000));\n        } catch (InterruptedException e) {\n            resp.sendError(500);\n        }\n    }",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a9dcc12d-4534-4278-ac87-b63a1ed12f10",
            "title": "Prevent Intent Redirection Vulnerabilities",
            "rule": "Ensure that applications do not expose intent-processing components that can be manipulated by other applications.",
            "why_is_this_important": "Intent redirection occurs when an app exposes an intent-processing component that can be manipulated by malicious applications, leading to security risks.",
            "severity": "Critical",
            "bad_example": "public class Noncompliant extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n        startActivity(forward); // Noncompliant\n    }\n}",
            "good_example": "public class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n\n        ComponentName title = forward.resolveActivity(getPackageManager());\n        if (title.getPackageName().equals(\"safePackage\") &&\n                title.getClassName().equals(\"safeClass\")) {\n            startActivity(forward);\n        }\n    }\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "public class Noncompliant extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n        startActivity(forward); // Noncompliant\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n\n        ComponentName title = forward.resolveActivity(getPackageManager());\n        if (title.getPackageName().equals(\"safePackage\") &&\n                title.getClassName().equals(\"safeClass\")) {\n            startActivity(forward);\n        }\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "adfdaeb0-2d70-44da-b4bd-319df5f2eeba",
            "title": "Create a New Session on User Authentication",
            "rule": "Ensure that a new session is always created upon user authentication to prevent session fixation attacks.",
            "why_is_this_important": "Failing to create a new session upon user authentication makes the application vulnerable to session fixation attacks, allowing attackers to hijack user sessions.",
            "severity": "Critical",
            "bad_example": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   http.sessionManagement()\n     .sessionFixation().none(); // Noncompliant: the existing session will continue\n}",
            "good_example": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.sessionManagement()\n     .sessionFixation().migrateSession();\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   http.sessionManagement()\n     .sessionFixation().none(); // Noncompliant: the existing session will continue\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.sessionManagement()\n     .sessionFixation().migrateSession();\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6a2f133a-b2ee-49dd-baee-8c2c568ef1de",
            "title": "Prevent Server-Side Template Injection (SSTI)",
            "rule": "Ensure that all user inputs in templates are properly validated and sanitized to prevent SSTI attacks.",
            "why_is_this_important": "Unsanitized user input in server-side templates can allow attackers to manipulate template rendering logic, leading to remote code execution vulnerabilities.",
            "severity": "Critical",
            "bad_example": "<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <span th:text=\"${__${tainted}__}\"></span> <!-- Noncompliant -->\n</div>\n</body>\n</html>",
            "good_example": "<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <span th:text=\"${tainted}\"></span>\n</div>\n</body>\n</html>",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <span th:text=\"${__${tainted}__}\"></span> <!-- Noncompliant -->\n</div>\n</body>\n</html>",
                    "isCorrect": false
                },
                {
                    "snippet": "<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <span th:text=\"${tainted}\"></span>\n</div>\n</body>\n</html>",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8e3ae781-34f9-4ee4-8683-fd9381943296",
            "title": "Prevent Open HTTP Redirect Vulnerabilities",
            "rule": "Ensure that user-controlled HTTP redirections are validated to prevent phishing attacks.",
            "why_is_this_important": "Allowing user-controlled HTTP redirections enables attackers to redirect victims to malicious websites, commonly used in phishing attacks.",
            "severity": "Critical",
            "bad_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n  resp.sendRedirect(location);\n}",
            "good_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n\n  List<String> allowedHosts = new ArrayList<String>();\n  allowedHosts.add(\"https://trusted1.example.com/\");\n  allowedHosts.add(\"https://trusted2.example.com/\");\n\n  if (allowedHosts.contains(location))\n    resp.sendRedirect(location);\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n  resp.sendRedirect(location);\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n\n  List<String> allowedHosts = new ArrayList<String>();\n  allowedHosts.add(\"https://trusted1.example.com/\");\n  allowedHosts.add(\"https://trusted2.example.com/\");\n\n  if (allowedHosts.contains(location))\n    resp.sendRedirect(location);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "aacecf97-5e41-48e3-bc02-c7cdd223bba9",
            "title": "Prevent Server-Side Request Forgery (SSRF)",
            "rule": "Ensure that server-side requests are properly validated to prevent SSRF attacks.",
            "why_is_this_important": "SSRF vulnerabilities allow attackers to manipulate server-side requests, potentially accessing internal resources or exposing sensitive data.",
            "severity": "High",
            "bad_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    URL url = new URL(location);\n\n    HttpURLConnection  conn = (HttpURLConnection) url.openConnection();\n}",
            "good_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    List<String> allowedHosts = new ArrayList<String>();\n    allowedHosts.add(\"https://trusted1.example.com/\");\n    allowedHosts.add(\"https://trusted2.example.com/\");\n\n    URL url = new URL(location);\n\n    if (allowedHosts.contains(location))\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    URL url = new URL(location);\n\n    HttpURLConnection  conn = (HttpURLConnection) url.openConnection();\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    List<String> allowedHosts = new ArrayList<String>();\n    allowedHosts.add(\"https://trusted1.example.com/\");\n    allowedHosts.add(\"https://trusted2.example.com/\");\n\n    URL url = new URL(location);\n\n    if (allowedHosts.contains(location))\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "16df4af5-51b6-4e0b-9a49-70421793087a",
            "title": "Ensure Secure Deserialization",
            "rule": "Ensure that deserialization processes validate untrusted data before processing to prevent code execution vulnerabilities.",
            "why_is_this_important": "Deserializing untrusted data without validation can allow attackers to inject malicious objects, leading to remote code execution and security breaches.",
            "severity": "Critical",
            "bad_example": "public class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new ObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}",
            "good_example": "public class SecureObjectInputStream extends ObjectInputStream {\n\n  @Override\n  protected Class<?> resolveClass(ObjectStreamClass osc) throws IOException, ClassNotFoundException {\n\n    List<String> approvedClasses = new ArrayList<String>();\n    approvedClasses.add(AllowedClass1.class.getName());\n    approvedClasses.add(AllowedClass2.class.getName());\n\n    if (!approvedClasses.contains(osc.getName())) {\n      throw new InvalidClassException(\"Unauthorized deserialization\", osc.getName());\n    }\n\n    return super.resolveClass(osc);\n  }\n}\n\npublic class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new SecureObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "public class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new ObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class SecureObjectInputStream extends ObjectInputStream {\n\n  @Override\n  protected Class<?> resolveClass(ObjectStreamClass osc) throws IOException, ClassNotFoundException {\n\n    List<String> approvedClasses = new ArrayList<String>();\n    approvedClasses.add(AllowedClass1.class.getName());\n    approvedClasses.add(AllowedClass2.class.getName());\n\n    if (!approvedClasses.contains(osc.getName())) {\n      throw new InvalidClassException(\"Unauthorized deserialization\", osc.getName());\n    }\n\n    return super.resolveClass(osc);\n  }\n}\n\npublic class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new SecureObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "597a0558-b568-4cc9-89f4-de5a86839ec8",
            "title": "Use Appropriate HTTP Status Codes",
            "rule": "Ensure that HTTP handlers return the appropriate status codes based on request success or failure.",
            "why_is_this_important": "Returning incorrect HTTP status codes can lead to ambiguous API behavior, making it harder for clients to handle responses correctly.",
            "severity": "High",
            "bad_example": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(user); // Noncompliant: Setting 500 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.OK).build(); // Noncompliant: Setting 200 for exception\n        }\n    }\n}",
            "good_example": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.ok(user); // Compliant: Setting 200 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Compliant: Setting 500 for exception\n        }\n    }\n}",
            "tags": "reliability, spring, maintainability",
            "examples": [
                {
                    "snippet": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(user); // Noncompliant: Setting 500 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.OK).build(); // Noncompliant: Setting 200 for exception\n        }\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.ok(user); // Compliant: Setting 200 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Compliant: Setting 500 for exception\n        }\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "27e686fd-1c5c-49b7-9baf-0e3506ca21ff",
            "title": "Ensure `@PathVariable` is Used for Path Variables",
            "rule": "Ensure that `@PathVariable` is used correctly in Spring applications to bind URI path variables to method parameters.",
            "why_is_this_important": "In Spring, failing to use `@PathVariable` with a path template placeholder (`/api/resource/{id}`) can cause unexpected behavior or missing parameter errors.",
            "severity": "High",
            "bad_example": "@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity<String> getResourceById(Long id) { // Noncompliant - The 'id' parameter will not be automatically populated with the path variable value\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}",
            "good_example": "@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity<String> getResourceById(@PathVariable Long id) { // Compliant\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}",
            "tags": "reliability, spring, maintainability",
            "examples": [
                {
                    "snippet": "@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity<String> getResourceById(Long id) { // Noncompliant - The 'id' parameter will not be automatically populated with the path variable value\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity<String> getResourceById(@PathVariable Long id) { // Compliant\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a6ba9d44-a30b-478a-b80a-a56bd159b321",
            "title": "Avoid Using `@Qualifier` on `@Bean` Methods",
            "rule": "Ensure that `@Qualifier` is not used on `@Bean` methods, as explicit bean titles should be used instead.",
            "why_is_this_important": "Using `@Qualifier` on `@Bean` methods is redundant and can cause unnecessary complexity in Spring applications. Beans should be titled explicitly using the method title or the `title` attribute.",
            "severity": "High",
            "bad_example": "@Configuration\npublic class MyConfiguration {\n  @Bean\n  @Qualifier(\"myService\")\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}",
            "good_example": "@Configuration\npublic class MyConfiguration {\n  @Bean\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}",
            "tags": "reliability, spring, maintainability",
            "examples": [
                {
                    "snippet": "@Configuration\npublic class MyConfiguration {\n  @Bean\n  @Qualifier(\"myService\")\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "@Configuration\npublic class MyConfiguration {\n  @Bean\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "531eee8c-cc3c-42e4-832a-7170d8b5557a",
            "title": "Avoid ClassCastException Due to Unsafe Casting",
            "rule": "Ensure that `instanceof` checks are used before performing explicit type casting to prevent `ClassCastException`.",
            "why_is_this_important": "Unsafe casting can lead to runtime `ClassCastException` errors. Always use `instanceof` checks before performing type casting.",
            "severity": "High",
            "bad_example": "private String hexString(Object o) {\n  return Integer.toHexString((Integer) o); // Noncompliant if hexString is called with a String for example\n}",
            "good_example": "private String hexString(Integer i) {\n  return Integer.toHexString(i);\n}",
            "tags": "reliability, maintainability",
            "examples": [
                {
                    "snippet": "private String hexString(Object o) {\n  return Integer.toHexString((Integer) o); // Noncompliant if hexString is called with a String for example\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "private String hexString(Integer i) {\n  return Integer.toHexString(i);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "331764a9-d674-489b-b43b-bbc1321e9405",
            "title": "Always Verify Server Certificates in SSL/TLS Connections",
            "rule": "Ensure that SSL/TLS certificate validation is always enabled to prevent Man-in-the-Middle (MitM) attacks.",
            "why_is_this_important": "Disabling SSL/TLS certificate validation exposes applications to Man-in-the-Middle (MitM) attacks, allowing attackers to intercept and manipulate sensitive data.",
            "severity": "Critical",
            "bad_example": "class TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}",
            "good_example": "",
            "tags": "cwe, security, owasp",
            "examples": [
                {
                    "snippet": "class TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "fb6fcc04-883e-4989-9543-578d297a8741",
            "title": "Retrieve Only Necessary Fields in SQL Queries",
            "rule": "Ensure that SQL queries specify only the necessary fields instead of using `SELECT *` to optimize database performance.",
            "why_is_this_important": "Using `SELECT *` retrieves more data than necessary, increasing database load, network traffic, and memory usage. Query only required fields to optimize performance.",
            "severity": "High",
            "bad_example": "public class OrderRepository {\n\n    public record OrderSummary(String title, String orderId, BigDecimal price) { }\n\n    public List<OrderSummary> queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT * \" +                                                         // Noncompliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}",
            "good_example": "public class OrderRepository {\n\n    public record OrderSummary(String title, String orderId, BigDecimal price) { }\n\n    public List<OrderSummary> queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT Customers.title, Orders.id, Orders.price \" +                   // Compliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}",
            "tags": "maintainability, performance",
            "examples": [
                {
                    "snippet": "public class OrderRepository {\n\n    public record OrderSummary(String title, String orderId, BigDecimal price) { }\n\n    public List<OrderSummary> queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT * \" +                                                         // Noncompliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class OrderRepository {\n\n    public record OrderSummary(String title, String orderId, BigDecimal price) { }\n\n    public List<OrderSummary> queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT Customers.title, Orders.id, Orders.price \" +                   // Compliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b1c15d7e-f072-4490-9616-7fc8620ff498",
            "title": "Keep Lambdas Concise",
            "rule": "Ensure that lambda expressions remain short and simple. If a lambda grows too complex, refactor it into a titled method.",
            "why_is_this_important": "Lambdas should remain short and simple. Large, complex lambdas reduce readability and should be refactored into titled methods for better maintainability.",
            "severity": "High",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, performance",
            "examples": []
        },
        {
            "uuid": "e9c957f4-064d-4e86-bd4e-bf2154e78011",
            "title": "Use Batch Processing in JDBC",
            "rule": "Ensure that batch processing is used instead of executing individual SQL statements inside loops for better database efficiency.",
            "why_is_this_important": "Executing individual SQL statements in a loop is inefficient. Using batch processing improves performance by reducing database communication overhead.",
            "severity": "High",
            "bad_example": "public void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i < 10; i++) {\n      statement.execute(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Noncompliant\n    }\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}",
            "good_example": "public void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i < 10; i++) {\n      statement.addBatch(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Compliant\n    }\n    statement.executeBatch();\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}",
            "tags": "maintainability, performance",
            "examples": [
                {
                    "snippet": "public void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i < 10; i++) {\n      statement.execute(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Noncompliant\n    }\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i < 10; i++) {\n      statement.addBatch(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Compliant\n    }\n    statement.executeBatch();\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "03ee9442-1afd-46c2-836a-82ac3d102275",
            "title": "Use Object Types for Optional REST Parameters",
            "rule": "Ensure that optional REST parameters use object types or `Optional<T>` instead of primitive types to avoid runtime errors.",
            "why_is_this_important": "Using primitive types for optional REST parameters can lead to runtime errors when the parameter is absent. Use object types or `Optional<T>` instead.",
            "severity": "High",
            "bad_example": "@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) int articleId) { // Noncompliant, null cannot be mapped to int\n   //...\n}",
            "good_example": "@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) Integer articleId) { // Compliant\n   //...\n}",
            "tags": "reliability, maintainability",
            "examples": [
                {
                    "snippet": "@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) int articleId) { // Noncompliant, null cannot be mapped to int\n   //...\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) Integer articleId) { // Compliant\n   //...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "682eb9c9-2213-4d4c-ba25-59d1113d2c2f",
            "title": "Prefer Constructor Injection for Spring Components",
            "rule": "Ensure that constructor injection is used instead of field injection (`@Autowired` on fields) in Spring components for better testability.",
            "why_is_this_important": "Using field injection (`@Autowired` on fields) in Spring components increases coupling and testability issues. Constructor injection is more reliable and preferred.",
            "severity": "High",
            "bad_example": "@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String title = null; // Noncompliant\n\n}",
            "good_example": "",
            "tags": "maintainability, spring, reliability",
            "examples": [
                {
                    "snippet": "@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String title = null; // Noncompliant\n\n}",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "269039f7-387f-4a40-8792-ccc6d2e37e76",
            "title": "Avoid Brain Methods (Methods Doing Too Many Tasks)",
            "rule": "Ensure that methods perform a single, well-defined task. Large methods should be refactored into smaller, focused methods.",
            "why_is_this_important": "A method that performs too many operations becomes difficult to understand, maintain, and reuse. Large methods should be broken down into smaller, focused methods.",
            "severity": "Medium",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, readability",
            "examples": []
        },
        {
            "uuid": "5e75dc52-6308-43c1-8c5e-dfdd11f51143",
            "title": "Avoid Monster Classes (Excessive Dependencies)",
            "rule": "Ensure that large classes with multiple responsibilities are refactored into smaller, more manageable classes.",
            "why_is_this_important": "Classes with too many responsibilities become difficult to maintain and violate the Single Responsibility Principle. Refactor to separate concerns into smaller, independent classes.",
            "severity": "Medium",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, readability",
            "examples": []
        },
        {
            "uuid": "85f5905d-688e-47da-b347-c7d45e99b629",
            "title": "Use Java Records for Immutable Data Structures",
            "rule": "Ensure that Java records are used for immutable data structures instead of manually implementing immutable classes.",
            "why_is_this_important": "Java records provide built-in immutability, reducing the risk of accidental modifications. Avoid manually creating immutable classes when records can be used.",
            "severity": "High",
            "bad_example": "final class Person { // Noncompliant\n  private final String title;\n  private final int age;\n\n  public Person(String title, int age) {\n    this.title = title;\n    this.age = age;\n  }\n\n  public String getName() {...}\n\n  public int getAge() {...}\n\n  @Override\n  public boolean equals(Object o) {...}\n\n  @Override\n  public int hashCode() {...}\n\n  @Override\n  public String toString() {...}\n}",
            "good_example": "record Person(String title, int age) { }",
            "tags": "maintainability, performance, reliability",
            "examples": [
                {
                    "snippet": "final class Person { // Noncompliant\n  private final String title;\n  private final int age;\n\n  public Person(String title, int age) {\n    this.title = title;\n    this.age = age;\n  }\n\n  public String getName() {...}\n\n  public int getAge() {...}\n\n  @Override\n  public boolean equals(Object o) {...}\n\n  @Override\n  public int hashCode() {...}\n\n  @Override\n  public String toString() {...}\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "record Person(String title, int age) { }",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "71b8ab33-91a8-488f-8ff4-64363a5ace6b",
            "title": "Avoid Redundant Null Checks with `instanceof`",
            "rule": "Ensure that explicit null checks are not used with `instanceof`, as `null` is never an instance of any class.",
            "why_is_this_important": "`null` is never an instance of any class, making explicit null checks redundant when using `instanceof`. This check should be removed.",
            "severity": "",
            "bad_example": "if (x != null && x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant",
            "good_example": "if (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }",
            "tags": "maintainability, readability",
            "examples": [
                {
                    "snippet": "if (x != null && x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "if (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }",
                    "isCorrect": true
                }
            ]
        }
    ],
    "CSHARP": [
        {
            "uuid": "a7d8419b-b62c-489d-87ae-005b90257a61",
            "title": "Use `var` Wisely",
            "rule": "Check if `var` is used only when the variable type is clear and enhances readability. Avoid using `var` when the type is not obvious.",
            "why_is_this_important": "Overusing `var` can make code harder to read, especially when the variable type isn't obvious. Use it only when it enhances readability.",
            "severity": "Medium",
            "bad_example": "var x = 42; // Type is unclear.",
            "good_example": "int x = 42; // Explicit type improves readability.",
            "tags": "maintainability, google, readability",
            "examples": [
                {
                    "snippet": "var x = 42; // Type is unclear.",
                    "isCorrect": false
                },
                {
                    "snippet": "int x = 42; // Explicit type improves readability.",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ca089fa7-0c0d-4cfd-9458-aac4c6480669",
            "title": "Prefer Named Classes Over Tuples",
            "rule": "Ensure that titled classes are used instead of untitled tuples for complex data structures. Tuples should only be used when their purpose is immediately clear.",
            "why_is_this_important": "Tuples without descriptive titles can make code difficult to understand and maintain. Named classes provide clarity and improve code readability.",
            "severity": "Medium",
            "bad_example": "Tuple<int, string> result = new Tuple<int, string>(1, \"Hello\");",
            "good_example": "public class Result\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\nvar result = new Result { Id = 1, Name = \"Hello\" };\n",
            "tags": "maintainability, readability, best-practices, google",
            "examples": [
                {
                    "snippet": "Tuple<int, string> result = new Tuple<int, string>(1, \"Hello\");",
                    "isCorrect": false
                },
                {
                    "snippet": "public class Result\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\nvar result = new Result { Id = 1, Name = \"Hello\" };\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fb748486-8d16-42a5-a274-06cab01cede4",
            "title": "Remove Items Safely During Iteration",
            "rule": "Verify that collections are not modified directly during iteration. Instead, ensure safe removal techniques such as iterating over a copy or using `ToList()`.",
            "why_is_this_important": "Removing items directly from a collection while iterating can cause runtime exceptions. Use safe removal techniques such as `ToList()`.",
            "severity": "High",
            "bad_example": "foreach (var item in someList)\n{\n    if (item.Condition)\n        someList.Remove(item);\n}\n",
            "good_example": "someList.RemoveAll(item => item.Condition);\n",
            "tags": "maintainability, reliability, performance, google",
            "examples": [
                {
                    "snippet": "foreach (var item in someList)\n{\n    if (item.Condition)\n        someList.Remove(item);\n}\n",
                    "isCorrect": false
                },
                {
                    "snippet": "someList.RemoveAll(item => item.Condition);\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "82707830-f308-44aa-8b7e-380222f42711",
            "title": "Avoid Excessively Deep Namespaces",
            "rule": "Ensure that titlespace structures are not overly deep. Favor a flat, organized structure to enhance readability and navigation.",
            "why_is_this_important": "Deeply nested titlespaces increase code complexity, making navigation and maintenance more difficult.",
            "severity": "Medium",
            "bad_example": "titlespace Company.Project.Module.Component.Subcomponent.Feature {}",
            "good_example": "titlespace Company.Feature {}\n",
            "tags": "maintainability, organization, readability, google",
            "examples": [
                {
                    "snippet": "titlespace Company.Project.Module.Component.Subcomponent.Feature {}",
                    "isCorrect": false
                },
                {
                    "snippet": "titlespace Company.Feature {}\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "0395d142-3656-4ccd-b90d-f7d87a486535",
            "title": "Organize Class Members by Accessibility",
            "rule": "Check if class members are grouped by accessibility (`public`, `protected`, `private`) to improve code readability and maintainability.",
            "why_is_this_important": "Poorly organized class members make code harder to navigate and maintain. Grouping members by accessibility improves readability.",
            "severity": "Low",
            "bad_example": "private int _value;\npublic void DoSomething() {}\npublic int Value { get; set; }",
            "good_example": "public int Value { get; set; }\npublic void DoSomething() {}\nprivate int _value;",
            "tags": "maintainability, readability, best-practices, google",
            "examples": [
                {
                    "snippet": "private int _value;\npublic void DoSomething() {}\npublic int Value { get; set; }",
                    "isCorrect": false
                },
                {
                    "snippet": "public int Value { get; set; }\npublic void DoSomething() {}\nprivate int _value;",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "cc0b3dd2-c2fe-4abe-b2c4-5f035ba3787e",
            "title": "Use `readonly` or `const` for Immutable Data",
            "rule": "Ensure that immutable instance fields are marked as `readonly`, and compile-time constants are marked as `const`.",
            "why_is_this_important": "Mutable fields can lead to unintended modifications. Use `readonly` for instance fields and `const` for compile-time constants.",
            "severity": "High",
            "bad_example": "public int MaxValue = 100;\n",
            "good_example": "public const int MaxValue = 100;\n",
            "tags": "reliability, google, performance, best-practices",
            "examples": [
                {
                    "snippet": "public int MaxValue = 100;\n",
                    "isCorrect": false
                },
                {
                    "snippet": "public const int MaxValue = 100;\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b4b7cde1-c916-4d03-ba78-ffe862bc2c45",
            "title": "Limit Lengthy LINQ Chains",
            "rule": "Verify that LINQ queries are not excessively long. Break complex queries into smaller, more understandable expressions.",
            "why_is_this_important": "Overly long LINQ queries reduce readability and make debugging difficult. Break them into smaller, more understandable expressions.",
            "severity": "High",
            "bad_example": "var result = someList.Where(x => x.IsValid).OrderBy(x => x.Name).Select(x => x.Value).ToList();",
            "good_example": "var validItems = someList.Where(x => x.IsValid);\nvar orderedItems = validItems.OrderBy(x => x.Name);\nvar result = orderedItems.Select(x => x.Value).ToList();\n",
            "tags": "maintainability, readability, performance, google",
            "examples": [
                {
                    "snippet": "var result = someList.Where(x => x.IsValid).OrderBy(x => x.Name).Select(x => x.Value).ToList();",
                    "isCorrect": false
                },
                {
                    "snippet": "var validItems = someList.Where(x => x.IsValid);\nvar orderedItems = validItems.OrderBy(x => x.Name);\nvar result = orderedItems.Select(x => x.Value).ToList();\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "0239cb0c-8390-44ff-9886-3911e4a3be5a",
            "title": "Ensure Consistent Attribute Placement",
            "rule": "Check if attributes are consistently placed in the code, maintaining uniform formatting across the project.",
            "why_is_this_important": "Inconsistent placement of attributes can cause confusion and make code harder to read and modify.",
            "severity": "Medium",
            "bad_example": "[Obsolete]\npublic class OldClass {}\n\n[Obsolete(\"Use NewMethod instead\")] public void OldMethod() {}",
            "good_example": "[Obsolete]\npublic class OldClass {}\n\n[Obsolete(\"Use NewMethod instead\")]\npublic void OldMethod() {}\n",
            "tags": "maintainability, readability, best-practices, google",
            "examples": [
                {
                    "snippet": "[Obsolete]\npublic class OldClass {}\n\n[Obsolete(\"Use NewMethod instead\")] public void OldMethod() {}",
                    "isCorrect": false
                },
                {
                    "snippet": "[Obsolete]\npublic class OldClass {}\n\n[Obsolete(\"Use NewMethod instead\")]\npublic void OldMethod() {}\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "1c933de6-5df7-4ff9-8b6a-3d7dbc76de45",
            "title": "Use Expression-Bodied Members Where Appropriate",
            "rule": "Ensure that simple methods and properties use expression-bodied syntax to improve code conciseness and readability.",
            "why_is_this_important": "Expression-bodied members improve code conciseness and readability for simple properties and methods.",
            "severity": "Low",
            "bad_example": "public int Property\n{\n    get { return _property; }\n}",
            "good_example": "public int Property => _property;\n",
            "tags": "maintainability, readability, performance, google",
            "examples": [
                {
                    "snippet": "public int Property\n{\n    get { return _property; }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public int Property => _property;\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3c417b64-1173-46ac-a936-46e426c30432",
            "title": "Ensure Parameter Names Match Base Methods",
            "rule": "Verify that method parameters in overrides and interface implementations match the base method’s parameter titles to maintain consistency.",
            "why_is_this_important": "Changing parameter titles when implementing an interface or overriding a base method reduces readability and can confuse developers.",
            "severity": "High",
            "bad_example": "interface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int amount) // Noncompliant: parameter's title differs from base\n  {\n    // ...\n  }\n}",
            "good_example": "interface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int money) // Compliant: parameter's title match base title\n  {\n    // ...\n  }\n}",
            "tags": "maintainability, best-practices, readability",
            "examples": [
                {
                    "snippet": "interface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int amount) // Noncompliant: parameter's title differs from base\n  {\n    // ...\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "interface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int money) // Compliant: parameter's title match base title\n  {\n    // ...\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "79a737a5-333a-45b1-bd98-e2b69ca47d3b",
            "title": "Avoid Using `goto`",
            "rule": "Check if `goto` statements are avoided. Ensure that structured control flow statements (`if`, `for`, `while`) are used instead.",
            "why_is_this_important": "`goto` leads to unstructured, difficult-to-maintain code. Use structured control flow statements (`if`, `for`, `while`, etc.) instead.",
            "severity": "High",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, readability, best-practices",
            "examples": []
        },
        {
            "uuid": "ce580c6e-9485-4858-82f7-61e03714c19f",
            "title": "Use `First`/`Single` Instead of `FirstOrDefault`/`SingleOrDefault` for Non-Empty Collections",
            "rule": "Ensure `First()` or `Single()` is used instead of `FirstOrDefault()` or `SingleOrDefault()` when collections are guaranteed to have elements.",
            "why_is_this_important": "`FirstOrDefault` and `SingleOrDefault` imply that a collection might be empty, leading to unnecessary null checks and potential bugs.",
            "severity": "High",
            "bad_example": "var items = new List<int> { 1, 2, 3 };\n\nint firstItem = items.FirstOrDefault(); // Noncompliant, this implies the collection might be empty, when we know it is not",
            "good_example": "var items = new List<int> { 1, 2, 3 };\n\nint firstItem = items.First(); // Compliant",
            "tags": "maintainability, readability, performance, best-practices",
            "examples": [
                {
                    "snippet": "var items = new List<int> { 1, 2, 3 };\n\nint firstItem = items.FirstOrDefault(); // Noncompliant, this implies the collection might be empty, when we know it is not",
                    "isCorrect": false
                },
                {
                    "snippet": "var items = new List<int> { 1, 2, 3 };\n\nint firstItem = items.First(); // Compliant",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a3c4e913-d4a9-4d54-bd95-74d8597707ab",
            "title": "API Controllers Should Inherit from `ControllerBase`",
            "rule": "Verify that API controllers inherit from `ControllerBase` instead of `Controller` unless views are explicitly required.",
            "why_is_this_important": "`ControllerBase` is the proper base class for API controllers, avoiding unnecessary dependencies on view-related functionality.",
            "severity": "High",
            "bad_example": "[ApiController]\npublic class MyController : Controller // Noncompliant: Inherit from ControllerBase instead of Controller.\n//                          ^^^^^^^^^^\n{\n    // ..\n}",
            "good_example": "[ApiController]\npublic class MyController : ControllerBase\n{\n    // ..\n}",
            "tags": "maintainability, performance, aspnet-core, google",
            "examples": [
                {
                    "snippet": "[ApiController]\npublic class MyController : Controller // Noncompliant: Inherit from ControllerBase instead of Controller.\n//                          ^^^^^^^^^^\n{\n    // ..\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "[ApiController]\npublic class MyController : ControllerBase\n{\n    // ..\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "98c8581b-5cbb-46fa-baa9-16b7eb464a36",
            "title": "Mark Unchanged Variables as `const`",
            "rule": "Ensure that variables that never change are marked as `const` to prevent accidental modification and enhance code clarity.",
            "why_is_this_important": "Variables that never change should be marked as `const` to prevent accidental modification and improve code clarity.",
            "severity": "High",
            "bad_example": "public bool Seek(int[] input)\n{\n  var target = 32;  // Noncompliant\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
            "good_example": "public bool Seek(int[] input)\n{\n  const int target = 32;\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
            "tags": "performance, maintainability, best-practices",
            "examples": [
                {
                    "snippet": "public bool Seek(int[] input)\n{\n  var target = 32;  // Noncompliant\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public bool Seek(int[] input)\n{\n  const int target = 32;\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "2e5ce6d4-0309-4e0d-89bb-8f6209299866",
            "title": "Avoid Empty Finalizers",
            "rule": "Check that finalizers are not left empty. If cleanup is needed, ensure proper resource disposal is implemented instead.",
            "why_is_this_important": "Empty finalizers introduce unnecessary performance overhead. If cleanup is needed, implement proper resource disposal instead.",
            "severity": "High",
            "bad_example": "public class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}",
            "good_example": "",
            "tags": "performance, memory-management, maintainability",
            "examples": [
                {
                    "snippet": "public class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "15beb1a7-d383-4e4f-b53e-ae2f67899e37",
            "title": "Value Types Should Implement `IEquatable<T>`",
            "rule": "Ensure that value types (structs) implement `IEquatable<T>` for efficient equality comparisons, avoiding boxing and reflection.",
            "why_is_this_important": "Structs without `IEquatable<T>` use boxing and reflection for equality checks, reducing performance.",
            "severity": "High",
            "bad_example": "struct MyStruct  // Noncompliant\n{\n    public int Value { get; set; }\n}",
            "good_example": "struct MyStruct : IEquatable<MyStruct>\n{\n    public int Value { get; set; }\n\n    public bool Equals(MyStruct other)\n    {\n        // ...\n    }\n}",
            "tags": "performance, maintainability, best-practices",
            "examples": [
                {
                    "snippet": "struct MyStruct  // Noncompliant\n{\n    public int Value { get; set; }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "struct MyStruct : IEquatable<MyStruct>\n{\n    public int Value { get; set; }\n\n    public bool Equals(MyStruct other)\n    {\n        // ...\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "9b7b9ad1-c5f8-4775-b5c2-a699f3400d91",
            "title": "Use Start Index Instead of `Substring`",
            "rule": "Verify that when extracting substrings, a start index is specified to avoid unnecessary memory allocations.",
            "why_is_this_important": "Searching for characters within a substring without a start index can lead to inefficiency and unnecessary memory usage.",
            "severity": "Critical",
            "bad_example": "if (str.SubString(startIndex).IndexOf(char1) == -1) // Noncompliant: a new string is going to be created by \"Substring\"\n{\n   // ...\n}",
            "good_example": "if (str.IndexOf(char1, startIndex) == -1)           // Compliant: no new instance of string is created\n{\n   // ...\n}",
            "tags": "performance, readability, efficiency",
            "examples": [
                {
                    "snippet": "if (str.SubString(startIndex).IndexOf(char1) == -1) // Noncompliant: a new string is going to be created by \"Substring\"\n{\n   // ...\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "if (str.IndexOf(char1, startIndex) == -1)           // Compliant: no new instance of string is created\n{\n   // ...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "efc20e28-a153-45be-825c-e63854899ee0",
            "title": "Ensure `StringBuilder` Data Is Used",
            "rule": "Ensure that `StringBuilder` instances are converted to strings using `ToString()` before use to prevent memory wastage.",
            "why_is_this_important": "Creating a `StringBuilder` without calling `ToString()` results in unused objects, wasting memory and reducing performance.",
            "severity": "High",
            "bad_example": "public void DoSomething(List<string> strings) {\n  var sb = new StringBuilder();  // Noncompliant\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n}",
            "good_example": "public void DoSomething(List<string> strings) {\n  foreach(var str in strings) {\n    // ...\n  }\n}",
            "tags": "performance, efficiency, maintainability",
            "examples": [
                {
                    "snippet": "public void DoSomething(List<string> strings) {\n  var sb = new StringBuilder();  // Noncompliant\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public void DoSomething(List<string> strings) {\n  foreach(var str in strings) {\n    // ...\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "462eeb30-508b-492c-ab12-bcc365b07f5a",
            "title": "Mark Non-Derived Private Classes as `sealed`",
            "rule": "Check if private or `file`-scoped classes that are never inherited are explicitly marked as `sealed` to indicate they are final.",
            "why_is_this_important": "Private or `file`-scoped classes that are never inherited should be explicitly marked as `sealed` to indicate they are final.",
            "severity": "Low",
            "bad_example": "private class MyClass  // Noncompliant\n{\n  // ...\n}\n\nprivate record MyRecord  // Noncompliant\n{\n  // ...\n}",
            "good_example": "private sealed class MyClass\n{\n  // ...\n}\n\nprivate sealed record MyRecord\n{\n  // ...\n}",
            "tags": "performance, maintainability, best-practices",
            "examples": [
                {
                    "snippet": "private class MyClass  // Noncompliant\n{\n  // ...\n}\n\nprivate record MyRecord  // Noncompliant\n{\n  // ...\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "private sealed class MyClass\n{\n  // ...\n}\n\nprivate sealed record MyRecord\n{\n  // ...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "424a6105-5bd0-4f58-83f8-350536f0fa66",
            "title": "Avoid Blocking Calls to Async Methods",
            "rule": "Blocking async methods with `.Result` or `.Wait()` can cause deadlocks and prevent efficient asynchronous execution. Use `await` instead for proper async behavior.",
            "why_is_this_important": "Blocking async methods with `.Result` or `.Wait()` can cause deadlocks and prevent efficient asynchronous execution. Use `await` instead for proper async behavior.",
            "severity": "Critical",
            "bad_example": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    // This method causes a deadlock when called in a GUI or ASP.NET context.\n    public static void Test()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        delayTask.Wait(); // Noncompliant\n    }\n}",
            "good_example": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    public static async Task TestAsync()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        await delayTask;\n    }\n}",
            "tags": "maintainability, performance, concurrency, async-best-practices",
            "examples": [
                {
                    "snippet": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    // This method causes a deadlock when called in a GUI or ASP.NET context.\n    public static void Test()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        delayTask.Wait(); // Noncompliant\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    public static async Task TestAsync()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        await delayTask;\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "38bd4144-c918-4eda-a67b-b74534be6e37",
            "title": "Secure Connection Strings from Injection",
            "rule": "Allowing user input in connection strings can lead to injection attacks. Always validate and sanitize inputs before constructing connection strings.",
            "why_is_this_important": "Allowing user input in connection strings can lead to injection attacks. Always validate and sanitize inputs before constructing connection strings.",
            "severity": "Critical",
            "bad_example": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    string connectionString = string.Format(\"{0};User ID={1};Password={2}\",\n        ConnectionString,\n        request.Form[\"usertitle\"],\n        request.Form[\"password\"]);\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = connectionString; // Noncompliant\n    connection.Open();\n    return connection;\n}",
            "good_example": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(ConnectionString);\n    builder.UserID = request.Form[\"usertitle\"];\n    builder.Password = request.Form[\"password\"];\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = builder.ConnectionString;\n    connection.Open();\n    return connection;\n}",
            "tags": "security, owasp, cwe, injection-prevention",
            "examples": [
                {
                    "snippet": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    string connectionString = string.Format(\"{0};User ID={1};Password={2}\",\n        ConnectionString,\n        request.Form[\"usertitle\"],\n        request.Form[\"password\"]);\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = connectionString; // Noncompliant\n    connection.Open();\n    return connection;\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(ConnectionString);\n    builder.UserID = request.Form[\"usertitle\"];\n    builder.Password = request.Form[\"password\"];\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = builder.ConnectionString;\n    connection.Open();\n    return connection;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8fe21ae4-4037-4afd-bfe2-00364cc4f3a2",
            "title": "Prevent Deserialization Injection",
            "rule": "Deserializing untrusted data can allow attackers to execute arbitrary code. Always validate and sanitize serialized inputs before processing.",
            "why_is_this_important": "Deserializing untrusted data can allow attackers to execute arbitrary code. Always validate and sanitize serialized inputs before processing.",
            "severity": "Critical",
            "bad_example": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        var formatter               = new BinaryFormatter();\n        expectedObject              = (ExpectedType)formatter.Deserialize(inputFile.InputStream);\n    }\n}",
            "good_example": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        JsonSerializer serializer   = new JsonSerializer(typeof(expectedObject));\n        expectedObject              = (ExpectedType)serializer.Deserialize(inputFile.InputStream);\n    }\n}",
            "tags": "security, owasp, cwe, injection-prevention",
            "examples": [
                {
                    "snippet": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        var formatter               = new BinaryFormatter();\n        expectedObject              = (ExpectedType)formatter.Deserialize(inputFile.InputStream);\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        JsonSerializer serializer   = new JsonSerializer(typeof(expectedObject));\n        expectedObject              = (ExpectedType)serializer.Deserialize(inputFile.InputStream);\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d16cc083-653c-4275-af24-5370328eaed5",
            "title": "Prevent SQL Injection in Queries",
            "rule": "Using unsanitized user input in SQL queries can lead to SQL injection attacks. Use parameterized queries to protect against malicious inputs.",
            "why_is_this_important": "Using unsanitized user input in SQL queries can lead to SQL injection attacks. Use parameterized queries to protect against malicious inputs.",
            "severity": "Critical",
            "bad_example": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
            "good_example": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = {0} AND pass = {1}\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query, user, pass);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
            "tags": "security, owasp, cwe, database-security",
            "examples": [
                {
                    "snippet": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = {0} AND pass = {1}\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query, user, pass);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "2e54e74d-8ea6-4633-b2d2-1e4d3cd8dbd5",
            "title": "Prevent Numeric Overflow in Calculations",
            "rule": "Numeric overflows occur when values exceed the data type limits, leading to incorrect calculations. Use checked arithmetic where necessary.",
            "why_is_this_important": "Numeric overflows occur when values exceed the data type limits, leading to incorrect calculations. Use checked arithmetic where necessary.",
            "severity": "High",
            "bad_example": "public int Transform(int value)\n{\n    if (value <= 0)\n    {\n        return value;\n    }\n    int number = int.MaxValue;\n    return number + value;  // Noncompliant\n}",
            "good_example": "public long Transform(int value)\n{\n    if (value <= 0)\n    {\n        return value;\n    }\n    long number = int.MaxValue;\n    return number + value;\n}",
            "tags": "reliability, performance, best-practices",
            "examples": [
                {
                    "snippet": "public int Transform(int value)\n{\n    if (value <= 0)\n    {\n        return value;\n    }\n    int number = int.MaxValue;\n    return number + value;  // Noncompliant\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public long Transform(int value)\n{\n    if (value <= 0)\n    {\n        return value;\n    }\n    long number = int.MaxValue;\n    return number + value;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7f7601ec-dfa7-47e5-a04f-584fdd17e996",
            "title": "Use PascalCase for Methods and Properties",
            "rule": "Consistent naming conventions improve readability and maintainability. Method and property titles should follow PascalCase.",
            "why_is_this_important": "Consistent naming conventions improve readability and maintainability. Method and property titles should follow PascalCase.",
            "severity": "Low",
            "bad_example": "public int doSomething() {...} // Noncompliant",
            "good_example": "public int DoSomething() {...}",
            "tags": "maintainability, naming-conventions, best-practices",
            "examples": [
                {
                    "snippet": "public int doSomething() {...} // Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "public int DoSomething() {...}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4bcc03ff-7efb-4373-bd80-f14195938b70",
            "title": "Use PascalCase for Type Names",
            "rule": "Following PascalCase for type titles ensures consistency and readability across the codebase.",
            "why_is_this_important": "Following PascalCase for type titles ensures consistency and readability across the codebase.",
            "severity": "Low",
            "bad_example": "class my_class {...}\nclass SOMEName42 {...}",
            "good_example": "class MyClass {...}\nclass SomeName42 {...}",
            "tags": "maintainability, naming-conventions, best-practices",
            "examples": [
                {
                    "snippet": "class my_class {...}\nclass SOMEName42 {...}",
                    "isCorrect": false
                },
                {
                    "snippet": "class MyClass {...}\nclass SomeName42 {...}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4dfcedf8-3fc0-4dbc-993f-ba51ceaaadbc",
            "title": "Avoid Private-Only Constructors",
            "rule": "Classes with only private constructors cannot be instantiated outside their own scope, potentially making them dead code.",
            "why_is_this_important": "Classes with only private constructors cannot be instantiated outside their own scope, potentially making them dead code.",
            "severity": "High",
            "bad_example": "public class MyClass // Noncompliant: the class contains only private constructors\n{\n  private MyClass() { ... }\n}",
            "good_example": "public class MyClass // Compliant: the class contains at least one non-private constructor\n{\n  public MyClass() { ... }\n}",
            "tags": "reliability, maintainability, code-smell",
            "examples": [
                {
                    "snippet": "public class MyClass // Noncompliant: the class contains only private constructors\n{\n  private MyClass() { ... }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class MyClass // Compliant: the class contains at least one non-private constructor\n{\n  public MyClass() { ... }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b942be7f-a8cf-4e37-afcf-225000be1488",
            "title": "Avoid Returning Unused Values",
            "rule": "Methods returning values that are never used introduce unnecessary complexity. Remove such return values to improve clarity.",
            "why_is_this_important": "Methods returning values that are never used introduce unnecessary complexity. Remove such return values to improve clarity.",
            "severity": "Low",
            "bad_example": "class SomeClass\n{\n     private int PrivateMethod() => 42;\n\n     public void PublicMethod()\n     {\n          PrivateMethod(); // Noncompliant: the result of PrivateMethod is not used\n     }\n}",
            "good_example": "",
            "tags": "maintainability, best-practices, efficiency",
            "examples": [
                {
                    "snippet": "class SomeClass\n{\n     private int PrivateMethod() => 42;\n\n     public void PublicMethod()\n     {\n          PrivateMethod(); // Noncompliant: the result of PrivateMethod is not used\n     }\n}",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "ec25cda7-b984-4818-a339-dc7ccb7ad278",
            "title": "Verify Server Certificates in SSL/TLS",
            "rule": "Disabling SSL/TLS certificate validation exposes applications to Man-in-the-Middle (MitM) attacks, compromising security.",
            "why_is_this_important": "Disabling SSL/TLS certificate validation exposes applications to Man-in-the-Middle (MitM) attacks, compromising security.",
            "severity": "Critical",
            "bad_example": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
            "good_example": "",
            "tags": "security, owasp, cwe, tls-security",
            "examples": [
                {
                    "snippet": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "fbf50a5b-d84f-4ada-98ed-b86140f33044",
            "title": "Avoid `new Guid()` When Not Needed",
            "rule": "Using `new Guid()` instead of `Guid.Empty` or `Guid.NewGuid()` can be misleading and lead to unintended behavior.",
            "why_is_this_important": "Using `new Guid()` instead of `Guid.Empty` or `Guid.NewGuid()` can be misleading and lead to unintended behavior.",
            "severity": "High",
            "bad_example": "public void Foo()\n{\n    var g1 = new Guid();    // Noncompliant - what's the intent?\n    Guid g2 = new();        // Noncompliant\n    var g3 = default(Guid); // Noncompliant\n    Guid g4 = default;      // Noncompliant\n}",
            "good_example": "public void Foo(byte[] bytes)\n{\n    var g1 = Guid.Empty;\n    var g2 = Guid.NewGuid();\n    var g3 = new Guid(bytes);\n}",
            "tags": "maintainability, performance, best-practices",
            "examples": [
                {
                    "snippet": "public void Foo()\n{\n    var g1 = new Guid();    // Noncompliant - what's the intent?\n    Guid g2 = new();        // Noncompliant\n    var g3 = default(Guid); // Noncompliant\n    Guid g4 = default;      // Noncompliant\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public void Foo(byte[] bytes)\n{\n    var g1 = Guid.Empty;\n    var g2 = Guid.NewGuid();\n    var g3 = new Guid(bytes);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fec79496-7c18-45b9-a5b8-dbabe53db7ab",
            "title": "Verify SSL/TLS Server Certificates",
            "rule": "Skipping certificate validation enables attackers to impersonate trusted entities and intercept secure communications.",
            "why_is_this_important": "Skipping certificate validation enables attackers to impersonate trusted entities and intercept secure communications.",
            "severity": "Critical",
            "bad_example": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
            "good_example": "",
            "tags": "security, owasp, cwe, tls-security",
            "examples": [
                {
                    "snippet": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "a4efb52f-c8b3-42ea-afeb-32ebf4f707d9",
            "title": "Avoid Constructing System Commands from User Input",
            "rule": "Passing user input directly into system commands can lead to command injection vulnerabilities. Always sanitize inputs before execution.",
            "why_is_this_important": "Passing user input directly into system commands can lead to command injection vulnerabilities. Always sanitize inputs before execution.",
            "severity": "High",
            "bad_example": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\np.StartInfo.ArgumentList.Add(input); // Sensitive",
            "good_example": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\nif (allowed.Contains(input)) {\n  p.StartInfo.ArgumentList.Add(input);\n}",
            "tags": "security, owasp, cwe, command-injection",
            "examples": [
                {
                    "snippet": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\np.StartInfo.ArgumentList.Add(input); // Sensitive",
                    "isCorrect": false
                },
                {
                    "snippet": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\nif (allowed.Contains(input)) {\n  p.StartInfo.ArgumentList.Add(input);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7fe1e683-e80a-4cf8-b39e-77eee2da0455",
            "title": "Use `string.IsNullOrEmpty()` for String Checks",
            "rule": "`string.Equals()` for checking empty strings is inefficient. Use `string.IsNullOrEmpty()` instead for clarity and performance.",
            "why_is_this_important": "`string.Equals()` for checking empty strings is inefficient. Use `string.IsNullOrEmpty()` instead for clarity and performance.",
            "severity": "Low",
            "bad_example": "\"\".Equals(title); // Noncompliant\n!title.Equals(\"\"); // Noncompliant\ntitle.Equals(string.Empty); // Noncompliant",
            "good_example": "title != null && title.Length > 0 // Compliant but more error prone\n!string.IsNullOrEmpty(title)\nstring.IsNullOrEmpty(title)",
            "tags": "maintainability, performance, best-practices",
            "examples": [
                {
                    "snippet": "\"\".Equals(title); // Noncompliant\n!title.Equals(\"\"); // Noncompliant\ntitle.Equals(string.Empty); // Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "title != null && title.Length > 0 // Compliant but more error prone\n!string.IsNullOrEmpty(title)\nstring.IsNullOrEmpty(title)",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "8e5347c4-486d-4be4-8a2e-4ce875fd5658",
            "title": "Avoid `DateTime.Now` for Timing Operations",
            "rule": "`DateTime.Now` is affected by daylight savings and system clock adjustments. Use `Stopwatch` for more accurate timing.",
            "why_is_this_important": "`DateTime.Now` is affected by daylight savings and system clock adjustments. Use `Stopwatch` for more accurate timing.",
            "severity": "High",
            "bad_example": "var start = DateTime.Now; // First call, on March 26th 2:59 am\nMethodToBeBenchmarked();\n\nConsole.WriteLine($\"{(DateTime.Now - start).TotalMilliseconds} ms\"); // Second call happens 2 minutes later but `Now` is March 26th, 4:01 am as there's a shift to summer time",
            "good_example": "var stopWatch = Stopwatch.StartNew(); // Compliant\nMethodToBeBenchmarked();\nstopWatch.Stop();\n\nConsole.WriteLine($\"{stopWatch.ElapsedMilliseconds} ms\");",
            "tags": "maintainability, performance, precision",
            "examples": [
                {
                    "snippet": "var start = DateTime.Now; // First call, on March 26th 2:59 am\nMethodToBeBenchmarked();\n\nConsole.WriteLine($\"{(DateTime.Now - start).TotalMilliseconds} ms\"); // Second call happens 2 minutes later but `Now` is March 26th, 4:01 am as there's a shift to summer time",
                    "isCorrect": false
                },
                {
                    "snippet": "var stopWatch = Stopwatch.StartNew(); // Compliant\nMethodToBeBenchmarked();\nstopWatch.Stop();\n\nConsole.WriteLine($\"{stopWatch.ElapsedMilliseconds} ms\");",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "145d7956-5208-4426-ad77-63257ff706c1",
            "title": "Annotate REST API Actions with HTTP Verb Attributes",
            "rule": "Without explicit HTTP method attributes, API behavior can be unclear, leading to route conflicts and unexpected results.",
            "why_is_this_important": "Without explicit HTTP method attributes, API behavior can be unclear, leading to route conflicts and unexpected results.",
            "severity": "High",
            "bad_example": "[Route(\"Customer\")]                                                        // This route conflicts with GetCustomers action route\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)   // Noncompliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[Route(\"Customer\")]                         // This route conflicts with ChangeCustomer action route\npublic async Task<string> GetCustomers()    // Noncompliant\n{\n    return _customerRepository.GetAll();\n}",
            "good_example": "[Route(\"Customer\")]\n[HttpPost]\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)    // Compliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[HttpGet(\"Customer\")]\npublic async Task<string> GetCustomers()    // Compliant\n{\n    return _customerRepository.GetAll();\n}",
            "tags": "maintainability, api-design, best-practices, aspnet-core",
            "examples": [
                {
                    "snippet": "[Route(\"Customer\")]                                                        // This route conflicts with GetCustomers action route\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)   // Noncompliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[Route(\"Customer\")]                         // This route conflicts with ChangeCustomer action route\npublic async Task<string> GetCustomers()    // Noncompliant\n{\n    return _customerRepository.GetAll();\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "[Route(\"Customer\")]\n[HttpPost]\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)    // Compliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[HttpGet(\"Customer\")]\npublic async Task<string> GetCustomers()    // Compliant\n{\n    return _customerRepository.GetAll();\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3c6a4031-525c-48c3-8615-e001555b901c",
            "title": "Ensure Controllers Follow Single Responsibility Principle",
            "rule": "Controllers handling multiple concerns become harder to maintain and test. Split responsibilities into separate controllers.",
            "why_is_this_important": "Controllers handling multiple concerns become harder to maintain and test. Split responsibilities into separate controllers.",
            "severity": "High",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, best-practices, clean-code, solid-principles",
            "examples": []
        },
        {
            "uuid": "5a0fd2b0-9ff1-41b3-b942-ad8cbebf067e",
            "title": "Always Validate `ModelState.IsValid` in Controllers",
            "rule": "Failing to check `ModelState.IsValid` before processing user input can result in invalid or unverified data being accepted.",
            "why_is_this_important": "Failing to check `ModelState.IsValid` before processing user input can result in invalid or unverified data being accepted.",
            "severity": "High",
            "bad_example": "public async Task<IActionResult> Create(Movie movie) // Noncompliant: model validity check is missing\n{\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
            "good_example": "public async Task<IActionResult> Create(Movie movie)\n{\n    if (!ModelState.IsValid)\n    {\n        return View(movie);\n    }\n\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
            "tags": "security, reliability, owasp, input-validation",
            "examples": [
                {
                    "snippet": "public async Task<IActionResult> Create(Movie movie) // Noncompliant: model validity check is missing\n{\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public async Task<IActionResult> Create(Movie movie)\n{\n    if (!ModelState.IsValid)\n    {\n        return View(movie);\n    }\n\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "e387d811-dad2-4d10-ace7-20c7b2d5d9c3",
            "title": "Enforce Authentication for LDAP Connections",
            "rule": "Allowing anonymous LDAP connections exposes directory data to unauthorized users. Always require authentication.",
            "why_is_this_important": "Allowing anonymous LDAP connections exposes directory data to unauthorized users. Always require authentication.",
            "severity": "High",
            "bad_example": "DirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath);\nmyDirectoryEntry.AuthenticationType = AuthenticationTypes.None; // Noncompliant\n\nDirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath, \"u\", \"p\", AuthenticationTypes.None); // Noncompliant",
            "good_example": "DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath); // Compliant; default DirectoryEntry.AuthenticationType property value is \"Secure\" since .NET Framework 2.0\n\nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath, \"u\", \"p\", AuthenticationTypes.Secure);",
            "tags": "security, owasp, cwe, authentication",
            "examples": [
                {
                    "snippet": "DirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath);\nmyDirectoryEntry.AuthenticationType = AuthenticationTypes.None; // Noncompliant\n\nDirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath, \"u\", \"p\", AuthenticationTypes.None); // Noncompliant",
                    "isCorrect": false
                },
                {
                    "snippet": "DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath); // Compliant; default DirectoryEntry.AuthenticationType property value is \"Secure\" since .NET Framework 2.0\n\nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath, \"u\", \"p\", AuthenticationTypes.Secure);",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "f2a25bd4-ce19-4f16-a640-25c5e6b4d659",
            "title": "Prevent Reflection Injection Attacks",
            "rule": "Reflection methods that process untrusted input can be exploited for remote code execution. Always validate and sanitize external input before using reflection.",
            "why_is_this_important": "Reflection methods that process untrusted input can be exploited for remote code execution. Always validate and sanitize external input before using reflection.",
            "severity": "High",
            "bad_example": "public class ExampleController : Controller\n{\n    public IActionResult Apply(string EffectName)\n    {\n        var EffectInstance  = Activator.CreateInstance(null, EffectName); // Noncompliant\n        object EffectPlugin = EffectInstance.Unwrap();\n\n        if ( ((IEffect)EffectPlugin).ApplyFilter() )\n        {\n            return Ok();\n        }\n        else\n        {\n            return Problem();\n        }\n    }\n}\n\npublic interface IEffect\n{\n    bool ApplyFilter();\n}",
            "good_example": "public class ExampleController : Controller\n{\n    private static readonly string[] EFFECT_ALLOW_LIST = {\n        \"SepiaEffect\",\n        \"BlackAndWhiteEffect\",\n        \"WaterColorEffect\",\n        \"OilPaintingEffect\"\n    };\n\n    public IActionResult Apply(string EffectName)\n    {\n        if (!EFFECT_ALLOW_LIST.Contains(EffectName))\n        {\n            return BadRequest(\"Invalid effect title. The effect is not allowed.\");\n        }\n\n        var EffectInstance  = Activator.CreateInstance(null, EffectName);\n        object EffectPlugin = EffectInstance.Unwrap();\n\n        if ( ((IEffect)EffectPlugin).ApplyFilter() )\n        {\n            return Ok();\n        }\n        else\n        {\n            return Problem();\n        }\n    }\n}\n\npublic interface IEffect\n{\n    bool ApplyFilter();\n}",
            "tags": "security, owasp, cwe, injection-prevention",
            "examples": [
                {
                    "snippet": "public class ExampleController : Controller\n{\n    public IActionResult Apply(string EffectName)\n    {\n        var EffectInstance  = Activator.CreateInstance(null, EffectName); // Noncompliant\n        object EffectPlugin = EffectInstance.Unwrap();\n\n        if ( ((IEffect)EffectPlugin).ApplyFilter() )\n        {\n            return Ok();\n        }\n        else\n        {\n            return Problem();\n        }\n    }\n}\n\npublic interface IEffect\n{\n    bool ApplyFilter();\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class ExampleController : Controller\n{\n    private static readonly string[] EFFECT_ALLOW_LIST = {\n        \"SepiaEffect\",\n        \"BlackAndWhiteEffect\",\n        \"WaterColorEffect\",\n        \"OilPaintingEffect\"\n    };\n\n    public IActionResult Apply(string EffectName)\n    {\n        if (!EFFECT_ALLOW_LIST.Contains(EffectName))\n        {\n            return BadRequest(\"Invalid effect title. The effect is not allowed.\");\n        }\n\n        var EffectInstance  = Activator.CreateInstance(null, EffectName);\n        object EffectPlugin = EffectInstance.Unwrap();\n\n        if ( ((IEffect)EffectPlugin).ApplyFilter() )\n        {\n            return Ok();\n        }\n        else\n        {\n            return Problem();\n        }\n    }\n}\n\npublic interface IEffect\n{\n    bool ApplyFilter();\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "5735059c-ec5b-401c-bc6a-58cb13e14a17",
            "title": "Prevent Code Injection in Dynamic Execution",
            "rule": "Allowing untrusted data to be executed dynamically can lead to arbitrary code execution and security vulnerabilities. Always validate input before execution.",
            "why_is_this_important": "Allowing untrusted data to be executed dynamically can lead to arbitrary code execution and security vulnerabilities. Always validate input before execution.",
            "severity": "Critical",
            "bad_example": "using System.CodeDom.Compiler;\n\npublic class ExampleController : Controller\n{\n    public void Run(string message)\n    {\n        const string code = @\"\n            using System;\n            public class MyClass\n            {\n                public void MyMethod()\n                {\n                    Console.WriteLine(\"\"\" + message + @\"\"\");\n                }\n            }\n        \";\n\n        var provider = CodeDomProvider.CreateProvider(\"CSharp\");\n        var compilerParameters = new CompilerParameters { ReferencedAssemblies = { \"System.dll\", \"System.Runtime.dll\" } };\n        var compilerResults = provider.CompileAssemblyFromSource(compilerParameters, code); // Noncompliant\n\n        object myInstance = compilerResults.CompiledAssembly.CreateInstance(\"MyClass\");\n        myInstance.GetType().GetMethod(\"MyMethod\").Invoke(myInstance, new object[0]);\n    }\n}",
            "good_example": "using System.CodeDom.Compiler;\n\npublic class ExampleController : Controller\n{\n    public void Run(string message)\n    {\n        const string code = @\"\n            using System;\n            public class MyClass\n            {\n                public void MyMethod(string input)\n                {\n                    Console.WriteLine(input);\n                }\n            }\n        \";\n\n        var provider = CodeDomProvider.CreateProvider(\"CSharp\");\n        var compilerParameters = new CompilerParameters { ReferencedAssemblies = { \"System.dll\", \"System.Runtime.dll\" } };\n        var compilerResults = provider.CompileAssemblyFromSource(compilerParameters, code);\n        object myInstance = compilerResults.CompiledAssembly.CreateInstance(\"MyClass\");\n        myInstance.GetType().GetMethod(\"MyMethod\").Invoke(myInstance, new object[]{ message }); // Pass message to dynamic method\n    }\n}",
            "tags": "security, owasp, cwe, injection-prevention",
            "examples": [
                {
                    "snippet": "using System.CodeDom.Compiler;\n\npublic class ExampleController : Controller\n{\n    public void Run(string message)\n    {\n        const string code = @\"\n            using System;\n            public class MyClass\n            {\n                public void MyMethod()\n                {\n                    Console.WriteLine(\"\"\" + message + @\"\"\");\n                }\n            }\n        \";\n\n        var provider = CodeDomProvider.CreateProvider(\"CSharp\");\n        var compilerParameters = new CompilerParameters { ReferencedAssemblies = { \"System.dll\", \"System.Runtime.dll\" } };\n        var compilerResults = provider.CompileAssemblyFromSource(compilerParameters, code); // Noncompliant\n\n        object myInstance = compilerResults.CompiledAssembly.CreateInstance(\"MyClass\");\n        myInstance.GetType().GetMethod(\"MyMethod\").Invoke(myInstance, new object[0]);\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "using System.CodeDom.Compiler;\n\npublic class ExampleController : Controller\n{\n    public void Run(string message)\n    {\n        const string code = @\"\n            using System;\n            public class MyClass\n            {\n                public void MyMethod(string input)\n                {\n                    Console.WriteLine(input);\n                }\n            }\n        \";\n\n        var provider = CodeDomProvider.CreateProvider(\"CSharp\");\n        var compilerParameters = new CompilerParameters { ReferencedAssemblies = { \"System.dll\", \"System.Runtime.dll\" } };\n        var compilerResults = provider.CompileAssemblyFromSource(compilerParameters, code);\n        object myInstance = compilerResults.CompiledAssembly.CreateInstance(\"MyClass\");\n        myInstance.GetType().GetMethod(\"MyMethod\").Invoke(myInstance, new object[]{ message }); // Pass message to dynamic method\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fa56c6b0-ee83-4076-b852-879cb6ee77e2",
            "title": "Secure OS Command Arguments",
            "rule": "If user input is used in OS command arguments, it can be manipulated to expand access or execute unintended commands. Ensure proper sanitization to prevent injection.",
            "why_is_this_important": "If user input is used in OS command arguments, it can be manipulated to expand access or execute unintended commands. Ensure proper sanitization to prevent injection.",
            "severity": "Low",
            "bad_example": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p             = new Process();\n        p.StartInfo.FileName  = \"/usr/bin/find\";\n        p.StartInfo.Arguments = \"/some/folder -ititle \" + args;\n        p.Start();\n    }\n}",
            "good_example": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p            = new Process();\n        p.StartInfo.FileName = \"/usr/bin/find\";\n        p.StartInfo.ArgumentList.Add(\"/some/folder\");\n        p.StartInfo.ArgumentList.Add(\"-ititle\");\n        p.StartInfo.ArgumentList.Add(args);\n        p.Start();\n    }\n}",
            "tags": "security, owasp, cwe, command-injection",
            "examples": [
                {
                    "snippet": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p             = new Process();\n        p.StartInfo.FileName  = \"/usr/bin/find\";\n        p.StartInfo.Arguments = \"/some/folder -ititle \" + args;\n        p.Start();\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p            = new Process();\n        p.StartInfo.FileName = \"/usr/bin/find\";\n        p.StartInfo.ArgumentList.Add(\"/some/folder\");\n        p.StartInfo.ArgumentList.Add(\"-ititle\");\n        p.StartInfo.ArgumentList.Add(args);\n        p.Start();\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "f0c429c0-da21-4f46-822c-9da170e54f08",
            "title": "CSRF Protection Should Always Be Enabled",
            "rule": "Disabling CSRF protection allows attackers to trick users into performing unintended actions, such as modifying account details or making unauthorized transactions.",
            "why_is_this_important": "Disabling CSRF protection allows attackers to trick users into performing unintended actions, such as modifying account details or making unauthorized transactions.",
            "severity": "Critical",
            "bad_example": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new IgnoreAntiforgeryTokenAttribute())); // Sensitive\n    // ...\n}",
            "good_example": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()));\n    // or\n    services.AddControllersWithViews(options => options.Filters.Add(new ValidateAntiForgeryTokenAttribute()));\n    // ...\n}",
            "tags": "security, owasp, cwe, csrf-prevention",
            "examples": [
                {
                    "snippet": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new IgnoreAntiforgeryTokenAttribute())); // Sensitive\n    // ...\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()));\n    // or\n    services.AddControllersWithViews(options => options.Filters.Add(new ValidateAntiForgeryTokenAttribute()));\n    // ...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "9c96e8e1-6db4-4726-bc94-60c0c7097e43",
            "title": "Use ProducesResponseTypeAttribute for API Actions",
            "rule": "Without ProducesResponseTypeAttribute, Swagger cannot infer the response type of an action returning IActionResult, making API documentation unclear and unreliable.",
            "why_is_this_important": "Without ProducesResponseTypeAttribute, Swagger cannot infer the response type of an action returning IActionResult, making API documentation unclear and unreliable.",
            "severity": "High",
            "bad_example": "[HttpGet(\"foo\")]\n// Noncompliant: Use the ProducesResponseType overload containing the return type for succesful responses.\n[ProducesResponseType(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
            "good_example": "[HttpGet(\"foo\")]\n[ProducesResponseType<int>(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
            "tags": "security, api-design, maintainability, aspnet-core",
            "examples": [
                {
                    "snippet": "[HttpGet(\"foo\")]\n// Noncompliant: Use the ProducesResponseType overload containing the return type for succesful responses.\n[ProducesResponseType(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
                    "isCorrect": false
                },
                {
                    "snippet": "[HttpGet(\"foo\")]\n[ProducesResponseType<int>(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "dd873ee1-49b1-4bbf-a268-3f1aa44be20a",
            "title": "Prevent NoSQL Injection Attacks",
            "rule": "Unsanitized user input in NoSQL queries can allow attackers to manipulate database queries, leading to data leaks or unauthorized modifications.",
            "why_is_this_important": "Unsanitized user input in NoSQL queries can allow attackers to manipulate database queries, leading to data leaks or unauthorized modifications.",
            "severity": "Critical",
            "bad_example": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Request.Query[\"filterDefinition\"];\n\n        await collection.FindAsync(filter)\n    }\n}",
            "good_example": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Builders<BsonDocument>.Filter.Eq(\"Usertitle\", \"Example\");\n\n        await collection.FindAsync(filter)\n    }\n}",
            "tags": "security, owasp, cwe, database-security",
            "examples": [
                {
                    "snippet": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Request.Query[\"filterDefinition\"];\n\n        await collection.FindAsync(filter)\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Builders<BsonDocument>.Filter.Eq(\"Usertitle\", \"Example\");\n\n        await collection.FindAsync(filter)\n    }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d85801c4-f4ef-4be6-951f-2e3bb0f6af2c",
            "title": "Avoid Returning Null in Non-Async Task Methods",
            "rule": "Returning null from a Task or Task<T> method causes a NullReferenceException if awaited. Use Task.CompletedTask or Task.FromResult<T>(null) instead.",
            "why_is_this_important": "Returning null from a Task or Task<T> method causes a NullReferenceException if awaited. Use Task.CompletedTask or Task.FromResult<T>(null) instead.",
            "severity": "Critical",
            "bad_example": "public Task DoFooAsync()\n{\n    return null;               // Noncompliant: Causes a NullReferenceException if awaited.\n}",
            "good_example": "public Task DoFooAsync()\n{\n    return Task.CompletedTask; // Compliant: Method can be awaited.\n}",
            "tags": "reliability, async-best-practices, maintainability",
            "examples": [
                {
                    "snippet": "public Task DoFooAsync()\n{\n    return null;               // Noncompliant: Causes a NullReferenceException if awaited.\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public Task DoFooAsync()\n{\n    return Task.CompletedTask; // Compliant: Method can be awaited.\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6e05a980-0a37-4774-b83e-04527b0a5867",
            "title": "Specify Timeout for Regular Expressions",
            "rule": "Without a timeout, regex processing on untrusted input can be exploited for Denial-of-Service (DoS) attacks. Always define a timeout when using regex.",
            "why_is_this_important": "Without a timeout, regex processing on untrusted input can be exploited for Denial-of-Service (DoS) attacks. Always define a timeout when using regex.",
            "severity": "High",
            "bad_example": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None);\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\");\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\");\n}",
            "good_example": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\", RegexOptions.NonBacktracking); // .Net 7 and above\n    AppDomain.CurrentDomain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromMilliseconds(100)); // process-wide setting\n}",
            "tags": "security, owasp, cwe, dos-prevention",
            "examples": [
                {
                    "snippet": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None);\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\");\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\");\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\", RegexOptions.NonBacktracking); // .Net 7 and above\n    AppDomain.CurrentDomain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromMilliseconds(100)); // process-wide setting\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b4cc475e-7cf8-4db2-a65a-cd7d17bbe1e2",
            "title": "Do Not Start Route Templates with '/' in ASP.NET",
            "rule": "Starting a route template with '/' in ASP.NET makes it absolute, ignoring controller-level routes and potentially breaking expected routing behavior.",
            "why_is_this_important": "Starting a route template with '/' in ASP.NET makes it absolute, ignoring controller-level routes and potentially breaking expected routing behavior.",
            "severity": "High",
            "bad_example": "[Route(\"[controller]\")]  // This route is ignored\npublic class ReviewsController : Controller // Noncompliant\n{\n    // Route is /reviews\n    [HttpGet(\"/reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"/reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
            "good_example": "[Route(\"/\")] // Turns on attribute routing\npublic class ReviewsController : Controller\n{\n    // Route is /reviews\n    [HttpGet(\"reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
            "tags": "maintainability, aspnet-core, api-design",
            "examples": [
                {
                    "snippet": "[Route(\"[controller]\")]  // This route is ignored\npublic class ReviewsController : Controller // Noncompliant\n{\n    // Route is /reviews\n    [HttpGet(\"/reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"/reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "[Route(\"/\")] // Turns on attribute routing\npublic class ReviewsController : Controller\n{\n    // Route is /reviews\n    [HttpGet(\"reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "bae4c695-9b8b-4354-b33d-abd37121058e",
            "title": "Utility Classes Should Not Have Public Constructors",
            "rule": "Utility classes are not meant to be instantiated. Mark them as static or provide a private constructor to prevent unintended instantiation.",
            "why_is_this_important": "Utility classes are not meant to be instantiated. Mark them as static or provide a private constructor to prevent unintended instantiation.",
            "severity": "Medium",
            "bad_example": "public class StringUtils // Noncompliant: implicit public constructor\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}",
            "good_example": "public static class StringUtils // Compliant: the class is static\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\n\npublic class StringUtils // Compliant: the constructor is not public\n{\n  private StringUtils()\n  {\n  }\n\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}",
            "tags": "maintainability, best-practices, clean-code",
            "examples": [
                {
                    "snippet": "public class StringUtils // Noncompliant: implicit public constructor\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public static class StringUtils // Compliant: the class is static\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\n\npublic class StringUtils // Compliant: the constructor is not public\n{\n  private StringUtils()\n  {\n  }\n\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3eb90b4d-1c7d-44bd-acc4-e3105798a894",
            "title": "Use Awaitable Methods in Async Code",
            "rule": "Calling synchronous methods inside async code can block execution and reduce performance. Use awaitable methods to ensure proper async execution.",
            "why_is_this_important": "Calling synchronous methods inside async code can block execution and reduce performance. Use awaitable methods to ensure proper async execution.",
            "severity": "High",
            "bad_example": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    stream.Read(array, 0, 1024);            // Noncompliant\n    File.ReadAllLines(\"path\");              // Noncompliant\n    dbSet.ToList();                         // Noncompliant in Entity Framework Core queries\n    dbSet.FirstOrDefault(x => x.Age >= 18); // Noncompliant in Entity Framework Core queries\n}",
            "good_example": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    await stream.ReadAsync(array, 0, 1024);\n    await File.ReadAllLinesAsync(\"path\");\n    await dbSet.ToListAsync();\n    await dbSet.FirstOrDefaultAsync(x => x.Age >= 18);\n}",
            "tags": "reliability, async-best-practices, maintainability",
            "examples": [
                {
                    "snippet": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    stream.Read(array, 0, 1024);            // Noncompliant\n    File.ReadAllLines(\"path\");              // Noncompliant\n    dbSet.ToList();                         // Noncompliant in Entity Framework Core queries\n    dbSet.FirstOrDefault(x => x.Age >= 18); // Noncompliant in Entity Framework Core queries\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    await stream.ReadAsync(array, 0, 1024);\n    await File.ReadAllLinesAsync(\"path\");\n    await dbSet.ToListAsync();\n    await dbSet.FirstOrDefaultAsync(x => x.Age >= 18);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "61789334-c695-4e31-933a-0226c5c4b6cf",
            "title": "Ensure Getters and Setters Access the Correct Fields",
            "rule": "Copy-pasting code can lead to errors where getters or setters access the wrong fields. Always verify that properties interact with the expected fields.",
            "why_is_this_important": "Copy-pasting code can lead to errors where getters or setters access the wrong fields. Always verify that properties interact with the expected fields.",
            "severity": "High",
            "bad_example": "class A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x = value; }\n    }\n\n    public int Y\n    {\n        get { return x; }  // Noncompliant: field 'y' is not used in the return value\n        set { x = value; } // Noncompliant: field 'y' is not updated\n    }\n}",
            "good_example": "class A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x = value; }\n    }\n\n    public int Y\n    {\n        get { return y; }\n        set { y = value; }\n    }\n}",
            "tags": "reliability, maintainability, best-practices",
            "examples": [
                {
                    "snippet": "class A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x = value; }\n    }\n\n    public int Y\n    {\n        get { return x; }  // Noncompliant: field 'y' is not used in the return value\n        set { x = value; } // Noncompliant: field 'y' is not updated\n    }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "class A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x = value; }\n    }\n\n    public int Y\n    {\n        get { return y; }\n        set { y = value; }\n    }\n}",
                    "isCorrect": true
                }
            ]
        }
    ],
    "RUBY": [
        {
            "uuid": "9c7da2a9-bf5c-4db1-9390-e89c76910ca6",
            "title": "Ensure `case` Statements Have an `else` Clause",
            "rule": "Check if every `case` statement includes an `else` clause. If an `else` clause is missing, ensure that a comment explicitly states why it is unnecessary.",
            "why_is_this_important": "A `case` statement without an `else` clause may not handle all possible cases, leading to unexpected behavior. Always include an `else` clause or explicitly document why it is unnecessary.",
            "severity": "Critical",
            "bad_example": "case param\n  when 1\n    do_something()\n  when 2\n    do_something_else()\nend",
            "good_example": "case param\n  when 1\n    do_something()\n  when 2\n    do_something_else()\n  else\n    handle_error('error_message')\nend",
            "tags": "cwe, maintainability, reliability, error-handling",
            "examples": [
                {
                    "snippet": "case param\n  when 1\n    do_something()\n  when 2\n    do_something_else()\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "case param\n  when 1\n    do_something()\n  when 2\n    do_something_else()\n  else\n    handle_error('error_message')\nend",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "27926977-7fd0-44f9-abbe-a9bcb5a1d939",
            "title": "Ensure `if...elsif` Constructs End with an `else` Clause",
            "rule": "Verify that all `if...elsif` constructs include a final `else` clause. If `else` is missing, ensure there is a comment explaining why all cases are covered.",
            "why_is_this_important": "When an `if` statement has multiple `elsif` branches, it should always end with an `else` clause. This ensures all possible cases are handled, preventing unintended behavior.",
            "severity": "Critical",
            "bad_example": "if x == 0\n  doSomething\nelsif x == 1\n  doSomethingElse\nend",
            "good_example": "if x == 0\n  doSomething\nelsif x == 1\n  doSomethingElse\nelse\n  raise 'An error has occured'\nend",
            "tags": "maintainability, reliability, error-handling",
            "examples": [
                {
                    "snippet": "if x == 0\n  doSomething\nelsif x == 1\n  doSomethingElse\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "if x == 0\n  doSomething\nelsif x == 1\n  doSomethingElse\nelse\n  raise 'An error has occured'\nend",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d4c6bc9b-997e-4512-8ede-ed642cb95eb5",
            "title": "Place Statements on Separate Lines",
            "rule": "Ensure that multiple statements are not written on the same line. Each statement should be placed on a new line to improve readability.",
            "why_is_this_important": "Writing multiple statements on a single line reduces readability and makes debugging harder. Separate statements should be placed on different lines for clarity.",
            "severity": "Medium",
            "bad_example": "if someCondition; puts \"hello\"; end # Noncompliant\n",
            "good_example": "if someCondition\n  puts \"hello\"\nend",
            "tags": "maintainability, readability, debugging, Shopify",
            "examples": [
                {
                    "snippet": "if someCondition; puts \"hello\"; end # Noncompliant\n",
                    "isCorrect": false
                },
                {
                    "snippet": "if someCondition\n  puts \"hello\"\nend",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "cf9c167a-69ae-46cb-9ac1-20f0536c8788",
            "title": "Avoid Empty Methods",
            "rule": "Detect methods that have an empty body. If a method is empty, ensure that a comment is present explaining why it remains unimplemented.",
            "why_is_this_important": "Empty methods can be misleading, making it unclear whether they are unfinished, redundant, or intentionally blank. If an empty method is necessary, include a comment explaining why.",
            "severity": "Critical",
            "bad_example": "def shouldNotBeEmpty()  # Noncompliant - method is empty\nend\n\ndef notImplemented()  # Noncompliant - method is empty\nend\n\ndef emptyOnPurpose()  # Noncompliant - method is empty\nend",
            "good_example": "def shouldNotBeEmpty()\n  doSomething()\nend\n\ndef notImplemented()\n  raise NotImplementedError, 'notImplemented() cannot be performed because ...'\nend\n\ndef emptyOnPurpose()\n  # comment explaining why the method is empty\nend",
            "tags": "maintainability, readability, reliability, debugging",
            "examples": [
                {
                    "snippet": "def shouldNotBeEmpty()  # Noncompliant - method is empty\nend\n\ndef notImplemented()  # Noncompliant - method is empty\nend\n\ndef emptyOnPurpose()  # Noncompliant - method is empty\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "def shouldNotBeEmpty()\n  doSomething()\nend\n\ndef notImplemented()\n  raise NotImplementedError, 'notImplemented() cannot be performed because ...'\nend\n\ndef emptyOnPurpose()\n  # comment explaining why the method is empty\nend",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "0c72dff5-a39a-4dd1-981c-5aff6b518cf7",
            "title": "Remove Unused Function Parameters",
            "rule": "Identify function parameters that are declared but never used within the function body. Remove them to improve clarity and maintainability.",
            "why_is_this_important": "Declaring parameters that are never used in a function leads to confusion and unnecessary complexity. Remove unused parameters to improve code clarity and maintainability.",
            "severity": "High",
            "bad_example": "",
            "good_example": "",
            "tags": "maintainability, readability, performance, Shopify",
            "examples": []
        },
        {
            "uuid": "f36175e8-93e3-4918-8f6a-bccd330f220a",
            "title": "Do Not Leave Empty Code Blocks",
            "rule": "Check for empty code blocks (such as `if` or `loop` structures) that do not contain any statements. If an empty block is present, ensure it includes a comment explaining its purpose.",
            "why_is_this_important": "Empty code blocks make it unclear whether they are placeholders for future logic or mistakenly left blank. Always remove them or add a comment explaining their purpose.",
            "severity": "High",
            "bad_example": "",
            "good_example": "def compute(a, b)\n  sum = a + b\n  if  sum > 0 # Noncompliant: is the block empty on purpose, or is code missing?\n  end\n  puts \"Result: #{sum}\"\nend",
            "tags": "maintainability, readability, debugging, Shopify",
            "examples": [
                {
                    "snippet": "def compute(a, b)\n  sum = a + b\n  if  sum > 0 # Noncompliant: is the block empty on purpose, or is code missing?\n  end\n  puts \"Result: #{sum}\"\nend",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "a0a4d9fd-5293-498f-abaf-1da1be711068",
            "title": "Avoid Using Semicolons to Terminate Statements",
            "rule": "Detect unnecessary semicolons at the end of statements. Ruby does not require semicolons, so they should be removed unless multiple statements exist on the same line.",
            "why_is_this_important": "Ruby does not require semicolons at the end of statements. Using them unnecessarily reduces readability and goes against standard Ruby conventions.",
            "severity": "Low",
            "bad_example": "puts 'Hello, world!'; # unnecessary semicolo\n",
            "good_example": "puts 'Hello, world!'\n",
            "tags": "maintainability, readability, Shopify, Ruby-style",
            "examples": [
                {
                    "snippet": "puts 'Hello, world!'; # unnecessary semicolo\n",
                    "isCorrect": false
                },
                {
                    "snippet": "puts 'Hello, world!'\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "5314121d-63de-4aad-9968-21af35032753",
            "title": "Use Spaces Around Operators",
            "rule": "Ensure that arithmetic and logical operators have spaces around them for better readability (e.g., `x + y` instead of `x+y`).",
            "why_is_this_important": "Omitting spaces around operators (`+`, `-`, `*`, etc.) reduces code readability. Proper spacing makes expressions easier to read and understand.",
            "severity": "Low",
            "bad_example": "sum=1+2",
            "good_example": "sum = 1 + 2",
            "tags": "maintainability, readability, Shopify, Ruby-style",
            "examples": [
                {
                    "snippet": "sum=1+2",
                    "isCorrect": false
                },
                {
                    "snippet": "sum = 1 + 2",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4cd295ac-e0f6-4d05-8080-003129e800f5",
            "title": "Limit Line Length to 120 Characters",
            "rule": "Detect lines exceeding 120 characters and suggest breaking them into multiple lines for better readability.",
            "why_is_this_important": "Keeping lines under 120 characters improves readability, especially on smaller screens or in side-by-side code comparisons.",
            "severity": "Medium",
            "bad_example": "def example\n  long_line = \"This is an example of a line that is way too long and exceeds the recommended limit of 120 characters.\"\nend",
            "good_example": "def example\n  long_line = \"This is an example of a line that is way too long and \" \\\n              \"exceeds the recommended limit of 120 characters.\"\nend\n",
            "tags": "maintainability, readability, Shopify, Ruby-style",
            "examples": [
                {
                    "snippet": "def example\n  long_line = \"This is an example of a line that is way too long and exceeds the recommended limit of 120 characters.\"\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "def example\n  long_line = \"This is an example of a line that is way too long and \" \\\n              \"exceeds the recommended limit of 120 characters.\"\nend\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fc914787-6b44-42f7-9197-13d58fe1d7be",
            "title": "Follow `snake_case` for Method and Variable Names",
            "rule": "Verify that method and variable titles follow `snake_case` conventions, avoiding camelCase or PascalCase.",
            "why_is_this_important": "Ruby conventionally uses `snake_case` for method and variable titles. This improves consistency and makes code easier to read and maintain.",
            "severity": "Medium",
            "bad_example": "def calculateTotal\n  finalValue = 0\nend",
            "good_example": "def calculate_total\n  final_value = 0\nend",
            "tags": "maintainability, readability, Shopify, Ruby-style",
            "examples": [
                {
                    "snippet": "def calculateTotal\n  finalValue = 0\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "def calculate_total\n  final_value = 0\nend",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "00afb6fa-e1e6-4fce-be10-c10fcce05e72",
            "title": "Use `CamelCase` for Class and Module Names",
            "rule": "Check if class and module titles use `CamelCase`. If not, suggest renaming them for consistency.",
            "why_is_this_important": "Classes and modules in Ruby should follow `CamelCase` naming conventions, making them easily distinguishable and improving code organization.",
            "severity": "Medium",
            "bad_example": "class myclass\nend",
            "good_example": "class MyClass\nend",
            "tags": "maintainability, readability, Shopify, Ruby-style",
            "examples": [
                {
                    "snippet": "class myclass\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "class MyClass\nend",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6060439e-3c52-4e21-9a21-7fe5b7ea9120",
            "title": "Avoid Unnecessary Defensive Programming",
            "rule": "Identify overly defensive code that checks for unrealistic conditions, such as excessive `nil?` checks or redundant type verifications.",
            "why_is_this_important": "Overly defensive programming that handles unrealistic scenarios increases code complexity. Focus on handling real-world edge cases instead.",
            "severity": "Medium",
            "bad_example": "def process(input)\n  if input.nil? || !input.is_a?(String) || input.empty?\n    return \"Invalid input\"\n  end\n\n  input.strip.upcase\nend\n",
            "good_example": "def process(input)\n  return unless input.is_a?(String) && !input.empty?\n\n  input.strip.upcase\nend\n",
            "tags": "maintainability, performance, readability, Shopify",
            "examples": [
                {
                    "snippet": "def process(input)\n  if input.nil? || !input.is_a?(String) || input.empty?\n    return \"Invalid input\"\n  end\n\n  input.strip.upcase\nend\n",
                    "isCorrect": false
                },
                {
                    "snippet": "def process(input)\n  return unless input.is_a?(String) && !input.empty?\n\n  input.strip.upcase\nend\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ca03ae44-7b0f-4a24-9503-531871ff0545",
            "title": "Prefer Guard Clauses Over Nested Conditionals",
            "rule": "Detect deeply nested conditionals and suggest using guard clauses (`return unless condition`) instead to improve readability.",
            "why_is_this_important": "Deeply nested conditionals make code hard to follow. Using guard clauses (`return` early) improves clarity and reduces indentation depth.",
            "severity": "High",
            "bad_example": "def process(input)\n  if input.is_a?(String)\n    if !input.empty?\n      return input.strip.upcase\n    end\n  end\n  nil\nend",
            "good_example": "def process(input)\n  return unless input.is_a?(String)\n  return if input.empty?\n\n  input.strip.upcase\nend\n",
            "tags": "maintainability, readability, Shopify, performance",
            "examples": [
                {
                    "snippet": "def process(input)\n  if input.is_a?(String)\n    if !input.empty?\n      return input.strip.upcase\n    end\n  end\n  nil\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "def process(input)\n  return unless input.is_a?(String)\n  return if input.empty?\n\n  input.strip.upcase\nend\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3f1b589f-0d5c-42cf-88f5-8694a4222829",
            "title": "Avoid Using Global Variables",
            "rule": "Check for global variable usage (e.g., variables prefixed with `$`). Suggest using instance variables, constants, or dependency injection instead.",
            "why_is_this_important": "Global variables create hidden dependencies, making code harder to debug, maintain, and test. Use instance variables or constants instead.",
            "severity": "High",
            "bad_example": "$counter = 0\n\ndef increment\n  $counter += 1\nend",
            "good_example": "class Counter\n  def initialize\n    @counter = 0\n  end\n\n  def increment\n    @counter += 1\n  end\nend\n",
            "tags": "maintainability, reliability, debugging, Shopify",
            "examples": [
                {
                    "snippet": "$counter = 0\n\ndef increment\n  $counter += 1\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "class Counter\n  def initialize\n    @counter = 0\n  end\n\n  def increment\n    @counter += 1\n  end\nend\n",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "4309f625-ebaf-4024-8cad-f2ae4ae20e59",
            "title": "Use Descriptive Exception Variable Names",
            "rule": "Ensure that exception variables in `rescue` blocks use meaningful titles instead of generic ones like `e`.",
            "why_is_this_important": "Naming exception variables generically (`e`) makes debugging harder. Use meaningful titles that describe the type or context of the error.",
            "severity": "Medium",
            "bad_example": "begin\n  risky_operation\nrescue => e\n  puts e.message\nend",
            "good_example": "",
            "tags": "debugging, error-handling, maintainability, Shopify",
            "examples": [
                {
                    "snippet": "begin\n  risky_operation\nrescue => e\n  puts e.message\nend",
                    "isCorrect": false
                }
            ]
        },
        {
            "uuid": "d2a078cd-0ee3-4a0b-bf51-16dcf259efe8",
            "title": "Provide Meaningful Default Values for Hash Keys",
            "rule": "Check for hash key lookups without default values. If a missing key is accessed, suggest using `fetch` with a default value.",
            "why_is_this_important": "Using meaningful default values prevents errors caused by uninitialized keys, improving code robustness and reducing unexpected `nil` values.",
            "severity": "Medium",
            "bad_example": "options = {}\nputs options[:timeout] || 5",
            "good_example": "options = { timeout: 5 }\nputs options.fetch(:timeout)",
            "tags": "maintainability, reliability, Shopify",
            "examples": [
                {
                    "snippet": "options = {}\nputs options[:timeout] || 5",
                    "isCorrect": false
                },
                {
                    "snippet": "options = { timeout: 5 }\nputs options.fetch(:timeout)",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "84d2d06e-cff0-43d1-9a6c-3c78bfdcb581",
            "title": "Avoid Rescuing the `Exception` Class",
            "rule": "Identify `rescue Exception` statements and suggest replacing them with `rescue StandardError` to avoid catching critical system exceptions.",
            "why_is_this_important": "Rescuing `Exception` captures critical system-level errors like `NoMemoryError`, preventing proper application termination and potentially masking serious issues.",
            "severity": "Medium",
            "bad_example": "begin\n  risky_operation\nrescue Exception\n  puts \"An error occurred\"\nend",
            "good_example": "begin\n  risky_operation\nrescue StandardError => error\n  puts \"An error occurred: #{error.message}\"\nend",
            "tags": "reliability, error-handling, Shopify",
            "examples": [
                {
                    "snippet": "begin\n  risky_operation\nrescue Exception\n  puts \"An error occurred\"\nend",
                    "isCorrect": false
                },
                {
                    "snippet": "begin\n  risky_operation\nrescue StandardError => error\n  puts \"An error occurred: #{error.message}\"\nend",
                    "isCorrect": true
                }
            ]
        }
    ],
    "DART": [
        {
            "uuid": "e4fb820f-287e-4cba-b3ea-f7a699ba2834",
            "title": "Use `const` for Literal Constructor Parameters in `@immutable` Classes",
            "rule": "Ensure that all literal values passed to constructors of `@immutable` classes are marked as `const` to prevent unnecessary object creation.",
            "why_is_this_important": "`@immutable` classes should have only `final` fields, and constructor parameters that are literals should be `const` to prevent accidental modifications.",
            "severity": "High",
            "bad_example": "import 'package:meta/meta.dart';\n\n@immutable\nclass MultiDimensionalPoint {\n  final List<int> coordinates;\n  MultiDimensionalPoint(this.coordinates);\n}\n\nvoid main() {\n  final p1 = MultiDimensionalPoint([1, 2, 3]); // Non compliant\n}",
            "good_example": "import 'package:meta/meta.dart';\n\n@immutable\nclass MultiDimensionalPoint {\n  final List<int> coordinates;\n  MultiDimensionalPoint(this.coordinates);\n}\n\nvoid main() {\n  final p1 = MultiDimensionalPoint(const [1, 2, 3]);\n}",
            "tags": "maintainability, performance, Flutter",
            "examples": [
                {
                    "snippet": "import 'package:meta/meta.dart';\n\n@immutable\nclass MultiDimensionalPoint {\n  final List<int> coordinates;\n  MultiDimensionalPoint(this.coordinates);\n}\n\nvoid main() {\n  final p1 = MultiDimensionalPoint([1, 2, 3]); // Non compliant\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "import 'package:meta/meta.dart';\n\n@immutable\nclass MultiDimensionalPoint {\n  final List<int> coordinates;\n  MultiDimensionalPoint(this.coordinates);\n}\n\nvoid main() {\n  final p1 = MultiDimensionalPoint(const [1, 2, 3]);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "afb72af5-dda3-44c2-a872-8efea9e913de",
            "title": "`@immutable` Classes Should Only Have `const` Constructors",
            "rule": "Define constructors for `@immutable` classes as `const` to ensure that instances are created efficiently and cannot be modified.",
            "why_is_this_important": "An `@immutable` class should only have `const` constructors to enforce immutability and improve performance.",
            "severity": "High",
            "bad_example": "import 'package:meta/meta.dart';\n\n@immutable\nclass Point {\n  final int x;\n  final int y;\n  Point(this.x, this.y); // Non compliant\n}",
            "good_example": "import 'package:meta/meta.dart';\n\n@immutable\nclass Point {\n  final int x;\n  final int y;\n  const Point(this.x, this.y);\n}",
            "tags": "maintainability, performance, Flutter",
            "examples": [
                {
                    "snippet": "import 'package:meta/meta.dart';\n\n@immutable\nclass Point {\n  final int x;\n  final int y;\n  Point(this.x, this.y); // Non compliant\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "import 'package:meta/meta.dart';\n\n@immutable\nclass Point {\n  final int x;\n  final int y;\n  const Point(this.x, this.y);\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "936f5320-85d2-40e9-8eb9-90da58bbe26e",
            "title": "Avoid Unnecessary `toList()` with Spread Operator",
            "rule": "Remove unnecessary calls to `.toList()` when using the spread operator (`...`) as it is already designed to work with iterable collections.",
            "why_is_this_important": "The spread operators (`...` and `...?`) can flatten collections directly, making `toList()` redundant and less efficient.",
            "severity": "High",
            "bad_example": "final list = [\n    1,\n    2,\n    ...anIterable.toList(), // Noncompliant\n    3,\n    4\n];",
            "good_example": "final list = [\n    1,\n    2,\n    ...anIterable,\n    3,\n    4\n];",
            "tags": "maintainability, performance, Flutter",
            "examples": [
                {
                    "snippet": "final list = [\n    1,\n    2,\n    ...anIterable.toList(), // Noncompliant\n    3,\n    4\n];",
                    "isCorrect": false
                },
                {
                    "snippet": "final list = [\n    1,\n    2,\n    ...anIterable,\n    3,\n    4\n];",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ee3bcaee-3fab-4ce3-91e4-7131031eace5",
            "title": "Prefer `for` Elements Over `Map.fromIterable`",
            "rule": "Use `for` elements inside map literals instead of `Map.fromIterable` to improve readability and allow better compiler optimizations.",
            "why_is_this_important": "Using `for` elements instead of `Map.fromIterable` improves readability and allows for compiler optimizations, making the code more performant.",
            "severity": "High",
            "bad_example": "Map<String, int>.fromIterable(\n  [1, 2, 3],\n  key: (v) => 'The value is $v',\n  value: (v) => v,\n);",
            "good_example": "{\n    for (final v in [1, 2, 3])\n        'The value is $v': v\n}",
            "tags": "maintainability, performance, readability",
            "examples": [
                {
                    "snippet": "Map<String, int>.fromIterable(\n  [1, 2, 3],\n  key: (v) => 'The value is $v',\n  value: (v) => v,\n);",
                    "isCorrect": false
                },
                {
                    "snippet": "{\n    for (final v in [1, 2, 3])\n        'The value is $v': v\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "ef556cf6-7fbe-43a8-bbcb-3030d1cf273e",
            "title": "Use `const` Instead of `static final` Where Possible",
            "rule": "Replace `static final` with `const` where applicable to enable compile-time evaluation and optimize performance.",
            "why_is_this_important": "`const` values are computed at compile-time, improving performance compared to `final`, which is computed at runtime.",
            "severity": "Low",
            "bad_example": "final i = 1000; // Noncompliant\nfinal ints = const [1, 2, 3]; // Noncompliant\n\nclass MyClass {\n  static final title = \"NAME\"; // Noncompliant\n}",
            "good_example": "const i = 1000;\nconst ints = [1, 2, 3]; // const after assignment can be omitted\n\nclass MyClass {\n  static const title = \"NAME\";\n}",
            "tags": "maintainability, performance",
            "examples": [
                {
                    "snippet": "final i = 1000; // Noncompliant\nfinal ints = const [1, 2, 3]; // Noncompliant\n\nclass MyClass {\n  static final title = \"NAME\"; // Noncompliant\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "const i = 1000;\nconst ints = [1, 2, 3]; // const after assignment can be omitted\n\nclass MyClass {\n  static const title = \"NAME\";\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b93c6f88-f1d6-48eb-bf39-e77016fdd325",
            "title": "Avoid Duplicating String Literals",
            "rule": "Store repeated string literals in constants or variables to improve maintainability and reduce redundancy.",
            "why_is_this_important": "Duplicated string literals make refactoring harder and increase the risk of inconsistencies in the codebase.",
            "severity": "Critical",
            "bad_example": "class A {\n  void run() {\n    prepare('string literal');    // Noncompliant - \"string literal\" is duplicated 3 times\n    execute('string literal');\n    release('string literal');\n  }\n}",
            "good_example": "class A {\n  static const _const = 'string literal';\n\n  void run() {\n    prepare(_const);    // Compliant\n    execute(_const);\n    release(_const);\n  }\n}",
            "tags": "maintainability, readability",
            "examples": [
                {
                    "snippet": "class A {\n  void run() {\n    prepare('string literal');    // Noncompliant - \"string literal\" is duplicated 3 times\n    execute('string literal');\n    release('string literal');\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "class A {\n  static const _const = 'string literal';\n\n  void run() {\n    prepare(_const);    // Compliant\n    execute(_const);\n    release(_const);\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "beeca29b-fd90-4bee-b164-6c31d545cc02",
            "title": "Utility Classes Should Not Have Public Constructors",
            "rule": "Make utility classes non-instantiable by providing a private constructor or marking them as `abstract`.",
            "why_is_this_important": "Utility classes contain only static members and should not be instantiated. Mark them as `abstract` or provide a private constructor.",
            "severity": "High",
            "bad_example": "class StringUtils { // Noncompliant\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
            "good_example": "class StringUtils { // Compliant\n\n  StringUtils._() {\n    throw Exception('Utility class');\n  }\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
            "tags": "maintainability, design",
            "examples": [
                {
                    "snippet": "class StringUtils { // Noncompliant\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "class StringUtils { // Compliant\n\n  StringUtils._() {\n    throw Exception('Utility class');\n  }\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "748bae62-2d80-40db-96df-18c38bd0e25a",
            "title": "Avoid Using Constant Patterns with Type Literals",
            "rule": "Do not use constant patterns with type literals as it can lead to unexpected behavior. Prefer direct type checking instead.",
            "why_is_this_important": "Using constant patterns with type literals can lead to incorrect assumptions and unintended behavior.",
            "severity": "High",
            "bad_example": "bool isANumber(Object? o) {\n  if (o case num) {\n    return true;\n  }\n  return false;\n}",
            "good_example": "bool isANumber(Object? o) {\n  if (o case num _) {\n    return true;\n  }\n  return false;\n}",
            "tags": "reliability, performance",
            "examples": [
                {
                    "snippet": "bool isANumber(Object? o) {\n  if (o case num) {\n    return true;\n  }\n  return false;\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "bool isANumber(Object? o) {\n  if (o case num _) {\n    return true;\n  }\n  return false;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "b13c96e3-2a22-4bbd-9970-a64a379fc37f",
            "title": "Always Use Curly Braces in Control Structures",
            "rule": "Use curly braces `{}` around all control structures (`if`, `for`, `while`, `do`-`while`) to improve readability and prevent logic errors.",
            "why_is_this_important": "Omitting curly braces in control structures can lead to errors when modifying the code. Always use `{}` for clarity.",
            "severity": "High",
            "bad_example": "if (condition)  // Noncompliant\n  executeSomething();\n  checkSomething();",
            "good_example": "if (condition) {\n  executeSomething();\n  checkSomething();\n}",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "if (condition)  // Noncompliant\n  executeSomething();\n  checkSomething();",
                    "isCorrect": false
                },
                {
                    "snippet": "if (condition) {\n  executeSomething();\n  checkSomething();\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6d596229-9e3c-4941-bba7-4225468049a7",
            "title": "Do Not Ignore Exceptions",
            "rule": "Always handle or log caught exceptions instead of silently ignoring them to improve debugging and maintain application stability.",
            "why_is_this_important": "Ignoring exceptions can hide potential bugs. Handle them properly or log them for debugging purposes.",
            "severity": "Medium",
            "bad_example": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n  }\n}",
            "good_example": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n    log(exception);\n  }\n}",
            "tags": "cwe, maintainability, security, owasp",
            "examples": [
                {
                    "snippet": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n    log(exception);\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d01e82c2-b913-472b-8e37-3853e3ee4028",
            "title": "Avoid `return`, `break`, or `continue` in `finally` Blocks",
            "rule": "Do not use `return`, `break`, or `continue` inside `finally` blocks as they can suppress exceptions and lead to unintended behavior.",
            "why_is_this_important": "Using control flow statements inside `finally` blocks suppresses exceptions and can lead to unexpected behavior.",
            "severity": "High",
            "bad_example": "class ReturnInFinally {\n  int nonCompliantMethod(int n) {\n    for (int i = 0; i < n; ++i) {\n      try {\n        functionThrowingException(i);\n      } catch (e) {\n        print(e);\n      } finally {\n        return 1; // Noncompliant\n      }\n    }\n    return 0;\n  }\n}",
            "good_example": "class Ok {\n  int nonCompliantMethod(int n) {\n    for (int i = 0; i < n; ++i) {\n      try {\n        functionThrowingException(i);\n      } catch (e) {\n        print(e);\n        return 1;\n      }\n    }\n    return 0;\n  }\n}",
            "tags": "maintainability, reliability",
            "examples": [
                {
                    "snippet": "class ReturnInFinally {\n  int nonCompliantMethod(int n) {\n    for (int i = 0; i < n; ++i) {\n      try {\n        functionThrowingException(i);\n      } catch (e) {\n        print(e);\n      } finally {\n        return 1; // Noncompliant\n      }\n    }\n    return 0;\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "class Ok {\n  int nonCompliantMethod(int n) {\n    for (int i = 0; i < n; ++i) {\n      try {\n        functionThrowingException(i);\n      } catch (e) {\n        print(e);\n        return 1;\n      }\n    }\n    return 0;\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "7c030279-b22f-4121-aa64-35a23233bcc6",
            "title": "Remove Unused Assignments",
            "rule": "Eliminate assignments to variables that are never used or overwritten immediately to improve code efficiency and readability.",
            "why_is_this_important": "Assignments to variables that are never used waste computation and clutter the code. Remove them to improve clarity.",
            "severity": "Medium",
            "bad_example": "int foo(int y) {\n  int x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}",
            "good_example": "int foo(int y) {\n  int x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}",
            "tags": "cwe, maintainability, performance",
            "examples": [
                {
                    "snippet": "int foo(int y) {\n  int x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "int foo(int y) {\n  int x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "6e9490a1-4912-4183-90c2-ceb0d1f9b19e",
            "title": "Prefer `SizedBox` Over `Container` for Spacing",
            "rule": "Use `SizedBox` instead of `Container` when adding spacing in layouts to improve performance and avoid unnecessary rendering overhead.",
            "why_is_this_important": "`SizedBox` is a lightweight alternative to `Container` when only spacing is needed, reducing unnecessary widget complexity.",
            "severity": "High",
            "bad_example": "List<Widget> widgets(){\n  return [\n    Container(width: 4, height: 5),\n    Container(key: Key(\"MyWidget\"), child: MyWidget(), height: 5)\n  ];\n}",
            "good_example": "List<Widget> widgets(){\n  return [\n    SizedBox(width: 4, height: 5),\n    SizedBox(key: Key(\"MyWidget\"), child: MyWidget(), height: 5)\n  ];\n}",
            "tags": "Flutter, performance, readability",
            "examples": [
                {
                    "snippet": "List<Widget> widgets(){\n  return [\n    Container(width: 4, height: 5),\n    Container(key: Key(\"MyWidget\"), child: MyWidget(), height: 5)\n  ];\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "List<Widget> widgets(){\n  return [\n    SizedBox(width: 4, height: 5),\n    SizedBox(key: Key(\"MyWidget\"), child: MyWidget(), height: 5)\n  ];\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d42d2547-f8d9-45c1-ad36-ddac85fba3e0",
            "title": "Check `mounted` Before Using `BuildContext` After an Async Operation",
            "rule": "Verify if a widget is still mounted before using `BuildContext` inside an asynchronous operation to prevent accessing invalid states.",
            "why_is_this_important": "`BuildContext` may become invalid if the widget is unmounted during an async operation. Always check `mounted` before using it.",
            "severity": "High",
            "bad_example": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        Navigator.of(context).pop(); // Non compliant\n    },\n    child: const Text('Delayed pop'),\n  );",
            "good_example": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        if (context.mounted) {\n          // The context is mounted, so it's safe to use it\n          Navigator.of(context).pop();\n        }\n    },\n    child: const Text('Delayed pop'),\n  );",
            "tags": "Flutter, reliability, async",
            "examples": [
                {
                    "snippet": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        Navigator.of(context).pop(); // Non compliant\n    },\n    child: const Text('Delayed pop'),\n  );",
                    "isCorrect": false
                },
                {
                    "snippet": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        if (context.mounted) {\n          // The context is mounted, so it's safe to use it\n          Navigator.of(context).pop();\n        }\n    },\n    child: const Text('Delayed pop'),\n  );",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "098b7cf8-8c00-4b29-9588-70d4be0370c3",
            "title": "Use Web-Only Libraries Only in Flutter Web Plugins",
            "rule": "Ensure `dart:html`, `dart:js`, and `dart:js_util` are only used in Flutter web plugins to prevent runtime errors in non-web environments.",
            "why_is_this_important": "`dart:html`, `dart:js`, and `dart:js_util` are only supported in web contexts. Using them outside of Flutter web plugins leads to runtime errors.",
            "severity": "High",
            "bad_example": "import 'dart:html';    // Non compliant\nimport 'dart:js';      // Non compliant\nimport 'dart:js_util'; // Non compliant\nimport 'package:other_package/other_library.dart';",
            "good_example": "import 'package:other_package/other_library.dart';",
            "tags": "reliability, Flutter, web",
            "examples": [
                {
                    "snippet": "import 'dart:html';    // Non compliant\nimport 'dart:js';      // Non compliant\nimport 'dart:js_util'; // Non compliant\nimport 'package:other_package/other_library.dart';",
                    "isCorrect": false
                },
                {
                    "snippet": "import 'package:other_package/other_library.dart';",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "e790035d-a88c-4772-a0ff-0c151fce1a1d",
            "title": "Do Not Assign Values to `void` Variables",
            "rule": "Avoid assigning values to `void` variables as `void` is not a compatible type and doing so results in runtime errors.",
            "why_is_this_important": "In Dart, `void` is a type that does not hold values. Assigning a value to a `void` variable is a logical error.",
            "severity": "High",
            "bad_example": "void x;\nx = 3; // Non compliant",
            "good_example": "dynamic x; // type of x not known\nx = 3;",
            "tags": "reliability, maintainability",
            "examples": [
                {
                    "snippet": "void x;\nx = 3; // Non compliant",
                    "isCorrect": false
                },
                {
                    "snippet": "dynamic x; // type of x not known\nx = 3;",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "e46cf6ae-dd38-4676-a7c3-1dac9923510f",
            "title": "Avoid Unnecessary `toList()` with Spread Operator",
            "rule": "Remove unnecessary `.toList()` calls when using the spread operator (`...`) to avoid redundant operations.",
            "why_is_this_important": "The spread operator (`...` and `...?`) flattens collections directly, making `toList()` redundant and inefficient.",
            "severity": "High",
            "bad_example": "final list = [\n    1,\n    2,\n    ...anIterable.toList(), // Noncompliant\n    3,\n    4\n];",
            "good_example": "final list = [\n    1,\n    2,\n    ...anIterable,\n    3,\n    4\n];",
            "tags": "performance, maintainability, Flutter",
            "examples": [
                {
                    "snippet": "final list = [\n    1,\n    2,\n    ...anIterable.toList(), // Noncompliant\n    3,\n    4\n];",
                    "isCorrect": false
                },
                {
                    "snippet": "final list = [\n    1,\n    2,\n    ...anIterable,\n    3,\n    4\n];",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "127b121d-80e5-47e0-9f5c-f341c576c2b0",
            "title": "Prefer `is!` Over `!is` for Type Checks",
            "rule": "Use `is!` instead of `!is` for type checking to prevent confusion and ensure consistent behavior.",
            "why_is_this_important": "Using `is!` instead of `!is` avoids confusion with null assertion syntax and improves code clarity.",
            "severity": "High",
            "bad_example": "void main(dynamic s) {\n\n  if (s !is String) { // Noncompliant\n    print('s is not a String!');\n  }\n\n}",
            "good_example": "void main(dynamic s) {\n\n  if (s is! String) {\n    print('s is not a String!');\n  }\n\n}",
            "tags": "reliability, readability",
            "examples": [
                {
                    "snippet": "void main(dynamic s) {\n\n  if (s !is String) { // Noncompliant\n    print('s is not a String!');\n  }\n\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "void main(dynamic s) {\n\n  if (s is! String) {\n    print('s is not a String!');\n  }\n\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "e09250c2-a042-45c5-8a36-2703327d8feb",
            "title": "Avoid Using `!` to Null Check Nullable Type Parameters",
            "rule": "Do not use `!` to check nullable type parameters, as this can lead to runtime exceptions if the type itself is nullable.",
            "why_is_this_important": "If a type parameter itself is nullable, using `!` for null checking can cause runtime exceptions. Use explicit checks instead.",
            "severity": "High",
            "bad_example": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result!; // Noncompliant\n}",
            "good_example": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result as T;\n}",
            "tags": "reliability, null-safety",
            "examples": [
                {
                    "snippet": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result!; // Noncompliant\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result as T;\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "fca3f7d8-e250-4836-8f1e-a6b44a804277",
            "title": "Do Not Use Block Comments for Documentation",
            "rule": "Use `///` for documentation instead of block comments to improve tooling support and ensure better formatting in generated docs.",
            "why_is_this_important": "Block comments do not generate proper Dart documentation. Use `///` for documentation comments instead.",
            "severity": "Low",
            "bad_example": "void greet(String title) {\n  /* Assume we have a valid title. */\n  print('Hi, $title!');\n}",
            "good_example": "void greet(String title) {\n  // Assume we have a valid title.\n  print('Hi, $title!');\n}",
            "tags": "docs, Google, readability",
            "examples": [
                {
                    "snippet": "void greet(String title) {\n  /* Assume we have a valid title. */\n  print('Hi, $title!');\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "void greet(String title) {\n  // Assume we have a valid title.\n  print('Hi, $title!');\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "c962f34f-5455-4d36-8fbe-105d842f34bb",
            "title": "Use `///` Doc Comments for Members and Types",
            "rule": "Use `///` instead of regular comments to properly document Dart classes, methods, and properties for automatic documentation generation.",
            "why_is_this_important": "`///` comments allow tools like dartdoc to generate documentation, improving maintainability and usability.",
            "severity": "Low",
            "bad_example": "// The number of characters in this chunk when unsplit.\nint get length => ...",
            "good_example": "int get length => ...",
            "tags": "docs, Google, maintainability",
            "examples": [
                {
                    "snippet": "// The number of characters in this chunk when unsplit.\nint get length => ...",
                    "isCorrect": false
                },
                {
                    "snippet": "int get length => ...",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "84c091f7-88dc-4ed0-be08-3504a9daa1e0",
            "title": "AVOID redundancy with the surrounding context\n",
            "rule": "Check if the method, variable, or class title contains redundant context (e.g., using 'carDrive()' when 'drive()' would suffice). Ensure the title is concise and avoids repetition of surrounding context.",
            "why_is_this_important": "Avoid redundant words in titles that repeat the surrounding context. For example, a class titled `Car` should not have a method `carDrive()`; instead, use `drive()`. Redundant naming decreases readability and clarity.",
            "severity": "Low",
            "bad_example": "class RadioButtonWidget extends Widget {\n  /// Sets the tooltip for this radio button widget to the list of strings in\n  /// [lines].\n  void tooltip(List<String> lines) {\n    ...\n  }\n}",
            "good_example": "class RadioButtonWidget extends Widget {\n  /// Sets the tooltip to [lines], which should have been word wrapped using\n  /// the current font.\n  void tooltip(List<String> lines) {\n    ...\n  }\n}",
            "tags": "docs, Google, readability",
            "examples": [
                {
                    "snippet": "class RadioButtonWidget extends Widget {\n  /// Sets the tooltip for this radio button widget to the list of strings in\n  /// [lines].\n  void tooltip(List<String> lines) {\n    ...\n  }\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "class RadioButtonWidget extends Widget {\n  /// Sets the tooltip to [lines], which should have been word wrapped using\n  /// the current font.\n  void tooltip(List<String> lines) {\n    ...\n  }\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "97502612-74f2-4afc-ad36-7ec0f14a74d3",
            "title": "DO title extensions using UpperCamelCase\n",
            "rule": "Ensure that extensions use UpperCamelCase naming conventions (e.g., `MyExtension`). Avoid other casing styles that could reduce readability.",
            "why_is_this_important": "Extensions should follow Dart's naming conventions, which use UpperCamelCase. Using other casing styles reduces readability and makes it inconsistent with other identifiers.",
            "severity": "Low",
            "bad_example": "",
            "good_example": "extension MyFancyList<T> on List<T> { ... }\n\nextension SmartIterable<T> on Iterable<T> { ... }",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "extension MyFancyList<T> on List<T> { ... }\n\nextension SmartIterable<T> on Iterable<T> { ... }",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3c6caf9b-936a-4125-adea-e71c2ed7abdc",
            "title": "DO title import prefixes using lowercase_with_underscores\n",
            "rule": "Check that import prefixes use lowercase_with_underscores (e.g., `my_library`), following Dart's style guide.",
            "why_is_this_important": "Import prefixes should use lowercase_with_underscores to improve readability and align with Dart's style guide. Using different naming conventions reduces clarity.",
            "severity": "Low",
            "bad_example": "import 'dart:math' as Math;\nimport 'package:angular_components/angular_components.dart' as angularComponents;\nimport 'package:js/js.dart' as JS;",
            "good_example": "import 'dart:math' as math;\nimport 'package:angular_components/angular_components.dart' as angular_components;\nimport 'package:js/js.dart' as js;",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "import 'dart:math' as Math;\nimport 'package:angular_components/angular_components.dart' as angularComponents;\nimport 'package:js/js.dart' as JS;",
                    "isCorrect": false
                },
                {
                    "snippet": "import 'dart:math' as math;\nimport 'package:angular_components/angular_components.dart' as angular_components;\nimport 'package:js/js.dart' as js;",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "3ab622a5-7b29-410a-b9c0-6d5f104acfaf",
            "title": "DO title other identifiers using lowerCamelCase",
            "rule": "Ensure that identifiers such as variables and method titles are written in lowerCamelCase (e.g., `myVariable`). Avoid using other naming conventions.",
            "why_is_this_important": "Identifiers (such as variable titles and method titles) should follow the lowerCamelCase naming convention. This improves consistency and readability.",
            "severity": "Low",
            "bad_example": "",
            "good_example": "var count = 3;\n\nHttpRequest httpRequest;\n\nvoid align(bool clearItems) {\n  // ...\n}",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "var count = 3;\n\nHttpRequest httpRequest;\n\nvoid align(bool clearItems) {\n  // ...\n}",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "797faa11-6bfc-4bc2-8fdc-2f729c4103c9",
            "title": "PREFER using _, __, etc. for unused callback parameters",
            "rule": "Check for functions with unused parameters and ensure they are titled with `_` or `__` to indicate they are intentionally unused.",
            "why_is_this_important": "When defining a function with unused parameters, use `_` or `__` to indicate they are intentionally unused. This avoids confusion and prevents unnecessary warnings.",
            "severity": "Low",
            "bad_example": "",
            "good_example": "futureOfVoid.then((_) {\n  print('Operation complete.');\n});",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "futureOfVoid.then((_) {\n  print('Operation complete.');\n});",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "1af0ea12-d9a8-412f-a699-fcb6e3e0b59a",
            "title": "DON'T explicitly title libraries",
            "rule": "Ensure that libraries are not explicitly titled. Dart provides automatic library titles, so avoid redundant naming of libraries in the code.",
            "why_is_this_important": "Dart's library system provides automatic library titles based on file paths. Explicitly naming libraries is unnecessary and can lead to inconsistencies.",
            "severity": "Low",
            "bad_example": "library my_library;",
            "good_example": "/// A really great test library.\n@TestOn('browser')\nlibrary;",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "library my_library;",
                    "isCorrect": false
                },
                {
                    "snippet": "/// A really great test library.\n@TestOn('browser')\nlibrary;",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "9ae0852e-eaac-4d7e-b418-b88254b832fa",
            "title": "PREFER a noun phrase for a non-boolean property or variable",
            "rule": "Ensure that non-boolean properties or variables are titled with noun phrases (e.g., `userDetails`, not `getUserDetails`). This improves readability.",
            "why_is_this_important": "Non-boolean properties and variables should be titled using noun phrases to improve clarity and readability. Using verb-like titles can cause confusion.",
            "severity": "Medium",
            "bad_example": "list.deleteItems",
            "good_example": "list.length\ncontext.lineWidth\nquest.rampagingSwampBeast",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "list.deleteItems",
                    "isCorrect": false
                },
                {
                    "snippet": "list.length\ncontext.lineWidth\nquest.rampagingSwampBeast",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "d3b8a960-ae76-4be0-9a9a-eb539cfa3fe6",
            "title": "AVOID defining a class that contains only static members",
            "rule": "Ensure that classes with only static members are converted to top-level functions or extensions. Avoid unnecessary class instantiation.",
            "why_is_this_important": "If a class only contains static members, it should be converted into a top-level utility function or extension. This reduces unnecessary class instantiation and improves efficiency.",
            "severity": "Medium",
            "bad_example": "class DateUtils {\n  static DateTime mostRecent(List<DateTime> dates) {\n    return dates.reduce((a, b) => a.isAfter(b) ? a : b);\n  }\n}\n\nclass _Favorites {\n  static const mammal = 'weasel';\n}",
            "good_example": "DateTime mostRecent(List<DateTime> dates) {\n  return dates.reduce((a, b) => a.isAfter(b) ? a : b);\n}\n\nconst _favoriteMammal = 'weasel';",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "class DateUtils {\n  static DateTime mostRecent(List<DateTime> dates) {\n    return dates.reduce((a, b) => a.isAfter(b) ? a : b);\n  }\n}\n\nclass _Favorites {\n  static const mammal = 'weasel';\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "DateTime mostRecent(List<DateTime> dates) {\n  return dates.reduce((a, b) => a.isAfter(b) ? a : b);\n}\n\nconst _favoriteMammal = 'weasel';",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "313f4c7a-1a20-4af1-8834-522de2b3f7f6",
            "title": "DO type annotate fields and top-level variables if the type isn't obvious",
            "rule": "Check that fields and top-level variables are type-annotated explicitly when the type is not obvious from the context. This avoids ambiguity.",
            "why_is_this_important": "Using explicit type annotations improves readability and prevents ambiguity, especially when the type is not obvious from the assignment.",
            "severity": "Low",
            "bad_example": "install(id, destination) => ...",
            "good_example": "Future<bool> install(PackageId id, String destination) => ...",
            "tags": "maintainability, readability, Google",
            "examples": [
                {
                    "snippet": "install(id, destination) => ...",
                    "isCorrect": false
                },
                {
                    "snippet": "Future<bool> install(PackageId id, String destination) => ...",
                    "isCorrect": true
                }
            ]
        },
        {
            "uuid": "1219eb38-027f-4eac-a636-89aabe17e0f5",
            "title": "DON'T make the parameter to == nullable",
            "rule": "Ensure that parameters to `==` are non-nullable. Avoid using nullable parameters as they can introduce unexpected behavior and null reference errors.",
            "why_is_this_important": "Making the parameter to `==` nullable can introduce unexpected behavior. Always use a non-nullable parameter to prevent null reference errors.",
            "severity": "Low",
            "bad_example": "class Person {\n  final String title;\n\n  // ···\n\n  bool operator ==(Object? other) =>\n      other != null && other is Person && title == other.title;\n}",
            "good_example": "class Person {\n  final String title;\n\n  // ···\n\n  bool operator ==(Object other) => other is Person && title == other.title;\n}",
            "tags": "maintainability, reliability, Google",
            "examples": [
                {
                    "snippet": "class Person {\n  final String title;\n\n  // ···\n\n  bool operator ==(Object? other) =>\n      other != null && other is Person && title == other.title;\n}",
                    "isCorrect": false
                },
                {
                    "snippet": "class Person {\n  final String title;\n\n  // ···\n\n  bool operator ==(Object other) => other is Person && title == other.title;\n}",
                    "isCorrect": true
                }
            ]
        }
    ]
}